package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.sync.GreenSync;
import com.google.gson.reflect.TypeToken;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.saulpower.GreenWireTest.database.ImmunizationDefinition;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMMUNIZATION_DEFINITION.
*/
public class ImmunizationDefinitionDao extends AbstractDao<ImmunizationDefinition, Long> {

    public static final String TABLENAME = "IMMUNIZATION_DEFINITION";

    /**
     * Properties of entity ImmunizationDefinition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Guid = new Property(0, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ExternalID = new Property(2, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property SortOrder = new Property(3, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property TagString = new Property(4, String.class, "tagString", false, "TAG_STRING");
        public final static Property TenantID = new Property(5, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(6, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(7, String.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property SyncBaseId = new Property(8, Long.class, "syncBaseId", false, "SYNC_BASE_ID");
        public final static Property IsDeleted = new Property(9, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(10, Integer.class, "version", false, "VERSION");
        public final static Property Id = new Property(11, Long.class, "id", true, "_id");
        public final static Property OUOUId = new Property(12, long.class, "oUOUId", false, "O_UOUID");
        public final static Property DateCreated = new Property(13, String.class, "dateCreated", false, "DATE_CREATED");
    };

    private DaoSession daoSession;

    public ImmunizationDefinitionDao(DaoConfig config) {
        super(config);
    }
    
    public ImmunizationDefinitionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMMUNIZATION_DEFINITION' (" + //
                "'GUID' TEXT," + // 0: guid
                "'NAME' TEXT," + // 1: name
                "'EXTERNAL_ID' TEXT," + // 2: externalID
                "'SORT_ORDER' INTEGER," + // 3: sortOrder
                "'TAG_STRING' TEXT," + // 4: tagString
                "'TENANT_ID' INTEGER," + // 5: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 6: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' TEXT," + // 7: dateLastModified
                "'SYNC_BASE_ID' INTEGER REFERENCES 'SYNC_BASE'('SYNC_BASE_ID') ," + // 8: syncBaseId
                "'IS_DELETED' INTEGER," + // 9: isDeleted
                "'VERSION' INTEGER," + // 10: version
                "'_id' INTEGER PRIMARY KEY ," + // 11: id
                "'O_UOUID' INTEGER NOT NULL ," + // 12: oUOUId
                "'DATE_CREATED' TEXT);"); // 13: dateCreated
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMMUNIZATION_DEFINITION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImmunizationDefinition entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(3, externalID);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(4, sortOrder);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(5, tagString);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(6, tenantID);
        }
        stmt.bindLong(7, entity.getSaveResultSaveResultId());
 
        String dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindString(8, dateLastModified);
        }
 
        Long syncBaseId = entity.getSyncBaseId();
        if (syncBaseId != null) {
            stmt.bindLong(9, syncBaseId);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(10, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(11, version);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(12, id);
        }
        stmt.bindLong(13, entity.getOUOUId());
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(14, dateCreated);
        }
    }

    @Override
    protected void attachEntity(ImmunizationDefinition entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11);
    }    

    /** @inheritdoc */
    @Override
    public ImmunizationDefinition readEntity(Cursor cursor, int offset) {
        ImmunizationDefinition entity = new ImmunizationDefinition( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // externalID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sortOrder
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tagString
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // tenantID
            cursor.getLong(offset + 6), // saveResultSaveResultId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dateLastModified
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // syncBaseId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isDeleted
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // version
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // id
            cursor.getLong(offset + 12), // oUOUId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // dateCreated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImmunizationDefinition entity, int offset) {
        entity.setGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExternalID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTagString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTenantID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 6));
        entity.setDateLastModified(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSyncBaseId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsDeleted(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setVersion(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setOUOUId(cursor.getLong(offset + 12));
        entity.setDateCreated(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImmunizationDefinition entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImmunizationDefinition entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOUDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM IMMUNIZATION_DEFINITION T");
            builder.append(" LEFT JOIN OU T0 ON T.'O_UOUID'=T0.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T1 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ImmunizationDefinition loadCurrentDeep(Cursor cursor, boolean lock) {
        ImmunizationDefinition entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OU oU = loadCurrentOther(daoSession.getOUDao(), cursor, offset);
         if(oU != null) {
            entity.setOU(oU);
        }
        offset += daoSession.getOUDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public ImmunizationDefinition loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ImmunizationDefinition> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ImmunizationDefinition> list = new ArrayList<ImmunizationDefinition>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ImmunizationDefinition> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ImmunizationDefinition> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
    @Override
    protected void onPreInsertEntity(ImmunizationDefinition entity) {
        entity.insertBase(daoSession.getSyncBaseDao());
        entity.setSyncBaseId(entity.getSyncBaseId());
    }

    @Override
    protected void onPreLoadEntity(ImmunizationDefinition entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreRefreshEntity(ImmunizationDefinition entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreUpdateEntity(ImmunizationDefinition entity) {
        entity.updateBase(daoSession.getSyncBaseDao());
    }

    @Override
    protected void onPreDeleteEntity(ImmunizationDefinition entity) {
        entity.deleteBase(daoSession.getSyncBaseDao());
    }

    static {
        GreenSync.registerListTypeToken("ImmunizationDefinition", new TypeToken<List<ImmunizationDefinition>>(){}.getType());
        GreenSync.registerTypeToken("ImmunizationDefinition", ImmunizationDefinition.class);
    }

}
