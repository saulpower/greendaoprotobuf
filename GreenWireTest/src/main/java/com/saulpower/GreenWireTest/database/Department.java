package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DEPARTMENT.
 */
public class Department extends SyncBase  {

    private String externalID;
    private String guid;
    private String name;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private transient long departmentsCenterId;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private transient long departmentsEmployeeFileId;
    private Long id;
    private transient long oUOUId;
    private String dateCreated;
    private transient long departmentsOUId;
    private Boolean isActive;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DepartmentDao myDao;
    private OU oU;
    private Long oU__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public Department() {
    }

    public Department(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Department(String externalID, String guid, String name, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, long departmentsCenterId, Long syncBaseId, Boolean isDeleted, Integer version, long departmentsEmployeeFileId, Long id, long oUOUId, String dateCreated, long departmentsOUId, Boolean isActive) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.departmentsCenterId = departmentsCenterId;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.departmentsEmployeeFileId = departmentsEmployeeFileId;
        this.id = id;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
        this.departmentsOUId = departmentsOUId;
        this.isActive = isActive;
    }

    public Department(String externalID, String guid, String name, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, long departmentsCenterId, Boolean isDeleted, Integer version, long departmentsEmployeeFileId, Long id, long oUOUId, String dateCreated, long departmentsOUId, Boolean isActive) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.departmentsCenterId = departmentsCenterId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.departmentsEmployeeFileId = departmentsEmployeeFileId;
        this.id = id;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
        this.departmentsOUId = departmentsOUId;
        this.isActive = isActive;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDepartmentDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getDepartmentsCenterId() {
        return departmentsCenterId;
    }

    public void setDepartmentsCenterId(long departmentsCenterId) {
        this.departmentsCenterId = departmentsCenterId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public long getDepartmentsEmployeeFileId() {
        return departmentsEmployeeFileId;
    }

    public void setDepartmentsEmployeeFileId(long departmentsEmployeeFileId) {
        this.departmentsEmployeeFileId = departmentsEmployeeFileId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getOUOUId() {
        return oUOUId;
    }

    public void setOUOUId(long oUOUId) {
        this.oUOUId = oUOUId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getDepartmentsOUId() {
        return departmentsOUId;
    }

    public void setDepartmentsOUId(long departmentsOUId) {
        this.departmentsOUId = departmentsOUId;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    /** To-one relationship, resolved on first access. */
    public OU getOU() {
        long __key = this.oUOUId;
        if (oU__resolvedKey == null || !oU__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUDao targetDao = daoSession.getOUDao();
            OU oUNew = targetDao.load(__key);
            synchronized (this) {
                oU = oUNew;
            	oU__resolvedKey = __key;
            }
        }
        return oU;
    }

    public void setOU(OU oU) {
        if (oU == null) {
            throw new DaoException("To-one property 'oUOUId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oU = oU;
            oUOUId = oU.getId();
            oU__resolvedKey = oUOUId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryDepartment_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}