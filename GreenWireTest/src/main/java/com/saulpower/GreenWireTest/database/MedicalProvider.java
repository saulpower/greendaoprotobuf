package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.HashMap;
import java.util.Map;

import com.saulpower.GreenWireTest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MEDICAL_PROVIDER.
 */
public class MedicalProvider {

    private String externalID;
    private String guid;
    private String name;
    private transient long familyFamilyId;
    private String tagString;
    private String address;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private Long dateLastModified;
    private transient long medicalProvidersFamilyId;
    private String policyNumber;
    private String phoneNumber;
    private Boolean isDeleted;
    private Integer version;
    private String clinicName;
    private Long id;
    private transient long medicalProvidersStudentId;
    private String insuranceProvider;
    private transient long studentStudentId;
    private Long dateCreated;
    private MedicalProviderType type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MedicalProviderDao myDao;

    private Family family;
    private Long family__resolvedKey;

    private Student student;
    private Long student__resolvedKey;

    private SaveResult saveResult;
    private Long saveResult__resolvedKey;

    private List<CustomValue> customValues;

    public MedicalProvider() {
    }

    public MedicalProvider(Long id) {
        this.id = id;
    }

    public MedicalProvider(String externalID, String guid, String name, long familyFamilyId, String tagString, String address, Long tenantID, long saveResultSaveResultId, Long dateLastModified, long medicalProvidersFamilyId, String policyNumber, String phoneNumber, Boolean isDeleted, Integer version, String clinicName, Long id, long medicalProvidersStudentId, String insuranceProvider, long studentStudentId, Long dateCreated, MedicalProviderType type) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.familyFamilyId = familyFamilyId;
        this.tagString = tagString;
        this.address = address;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.medicalProvidersFamilyId = medicalProvidersFamilyId;
        this.policyNumber = policyNumber;
        this.phoneNumber = phoneNumber;
        this.isDeleted = isDeleted;
        this.version = version;
        this.clinicName = clinicName;
        this.id = id;
        this.medicalProvidersStudentId = medicalProvidersStudentId;
        this.insuranceProvider = insuranceProvider;
        this.studentStudentId = studentStudentId;
        this.dateCreated = dateCreated;
        this.type = type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMedicalProviderDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getFamilyFamilyId() {
        return familyFamilyId;
    }

    public void setFamilyFamilyId(long familyFamilyId) {
        this.familyFamilyId = familyFamilyId;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public Long getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(Long dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getMedicalProvidersFamilyId() {
        return medicalProvidersFamilyId;
    }

    public void setMedicalProvidersFamilyId(long medicalProvidersFamilyId) {
        this.medicalProvidersFamilyId = medicalProvidersFamilyId;
    }

    public String getPolicyNumber() {
        return policyNumber;
    }

    public void setPolicyNumber(String policyNumber) {
        this.policyNumber = policyNumber;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getClinicName() {
        return clinicName;
    }

    public void setClinicName(String clinicName) {
        this.clinicName = clinicName;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getMedicalProvidersStudentId() {
        return medicalProvidersStudentId;
    }

    public void setMedicalProvidersStudentId(long medicalProvidersStudentId) {
        this.medicalProvidersStudentId = medicalProvidersStudentId;
    }

    public String getInsuranceProvider() {
        return insuranceProvider;
    }

    public void setInsuranceProvider(String insuranceProvider) {
        this.insuranceProvider = insuranceProvider;
    }

    public long getStudentStudentId() {
        return studentStudentId;
    }

    public void setStudentStudentId(long studentStudentId) {
        this.studentStudentId = studentStudentId;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public MedicalProviderType getType() {
        return type;
    }

    public void setType(MedicalProviderType type) {
        this.type = type;
    }

    public enum MedicalProviderType implements DaoEnum {
        PHYSICIAN(0),
        DENTIST(1);

        private static final Map<Long, MedicalProviderType> intToTypeMap = new HashMap<Long, MedicalProviderType>();

        static {
            for (MedicalProviderType type : MedicalProviderType.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static MedicalProviderType fromInt(long i) {
            MedicalProviderType type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private MedicalProviderType(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Family getFamily() {
        long __key = this.familyFamilyId;
        if (family__resolvedKey == null || !family__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FamilyDao targetDao = daoSession.getFamilyDao();
            Family familyNew = targetDao.load(__key);
            synchronized (this) {
                family = familyNew;
            	family__resolvedKey = __key;
            }
        }
        return family;
    }

    public void setFamily(Family family) {
        if (family == null) {
            throw new DaoException("To-one property 'familyFamilyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.family = family;
            familyFamilyId = family.getId();
            family__resolvedKey = familyFamilyId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Student getStudent() {
        long __key = this.studentStudentId;
        if (student__resolvedKey == null || !student__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentDao targetDao = daoSession.getStudentDao();
            Student studentNew = targetDao.load(__key);
            synchronized (this) {
                student = studentNew;
            	student__resolvedKey = __key;
            }
        }
        return student;
    }

    public void setStudent(Student student) {
        if (student == null) {
            throw new DaoException("To-one property 'studentStudentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.student = student;
            studentStudentId = student.getId();
            student__resolvedKey = studentStudentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryMedicalProvider_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
