package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.Student;
import com.saulpower.GreenWireTest.database.School.SchoolTransportation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDENT.
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Prefix = new Property(0, String.class, "prefix", false, "PREFIX");
        public final static Property SocialSecurityRaw = new Property(1, String.class, "socialSecurityRaw", false, "SOCIAL_SECURITY_RAW");
        public final static Property AttendsSchool = new Property(2, Boolean.class, "attendsSchool", false, "ATTENDS_SCHOOL");
        public final static Property DateLastModified = new Property(3, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property CurrentDeviceDeviceId = new Property(4, long.class, "currentDeviceDeviceId", false, "CURRENT_DEVICE_DEVICE_ID");
        public final static Property SchoolSchoolId = new Property(5, long.class, "schoolSchoolId", false, "SCHOOL_SCHOOL_ID");
        public final static Property BlacklistedFromStudentId = new Property(6, long.class, "blacklistedFromStudentId", false, "BLACKLISTED_FROM_STUDENT_ID");
        public final static Property MiddleName = new Property(7, String.class, "middleName", false, "MIDDLE_NAME");
        public final static Property IsDeleted = new Property(8, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property StudentsActivityId = new Property(9, long.class, "studentsActivityId", false, "STUDENTS_ACTIVITY_ID");
        public final static Property StartDate = new Property(10, Long.class, "startDate", false, "START_DATE");
        public final static Property Version = new Property(11, Integer.class, "version", false, "VERSION");
        public final static Property EmailAddresses = new Property(12, String.class, "emailAddresses", false, "EMAIL_ADDRESSES");
        public final static Property DistinguishingMarks = new Property(13, String.class, "distinguishingMarks", false, "DISTINGUISHING_MARKS");
        public final static Property Id = new Property(14, Long.class, "id", true, "_id");
        public final static Property DateCreated = new Property(15, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property SocialSecurityEntrypted = new Property(16, String.class, "socialSecurityEntrypted", false, "SOCIAL_SECURITY_ENTRYPTED");
        public final static Property Name = new Property(17, String.class, "name", false, "NAME");
        public final static Property Suffix = new Property(18, String.class, "suffix", false, "SUFFIX");
        public final static Property Employer = new Property(19, String.class, "employer", false, "EMPLOYER");
        public final static Property TagString = new Property(20, String.class, "tagString", false, "TAG_STRING");
        public final static Property TenantID = new Property(21, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SchoolID = new Property(22, Long.class, "schoolID", false, "SCHOOL_ID");
        public final static Property YearInSchool = new Property(23, String.class, "yearInSchool", false, "YEAR_IN_SCHOOL");
        public final static Property Languages = new Property(24, String.class, "languages", false, "LANGUAGES");
        public final static Property InterestsString = new Property(25, String.class, "interestsString", false, "INTERESTS_STRING");
        public final static Property IsEnabled = new Property(26, Boolean.class, "isEnabled", false, "IS_ENABLED");
        public final static Property LastName = new Property(27, String.class, "lastName", false, "LAST_NAME");
        public final static Property SchoolPickupTime = new Property(28, String.class, "schoolPickupTime", false, "SCHOOL_PICKUP_TIME");
        public final static Property SocialSecurity = new Property(29, String.class, "socialSecurity", false, "SOCIAL_SECURITY");
        public final static Property SchoolDropOffTime = new Property(30, String.class, "schoolDropOffTime", false, "SCHOOL_DROP_OFF_TIME");
        public final static Property Guid = new Property(31, String.class, "guid", false, "GUID");
        public final static Property ExternalID = new Property(32, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property StudentsSchoolId = new Property(33, long.class, "studentsSchoolId", false, "STUDENTS_SCHOOL_ID");
        public final static Property BlacklistedFromPersonId = new Property(34, long.class, "blacklistedFromPersonId", false, "BLACKLISTED_FROM_PERSON_ID");
        public final static Property Height = new Property(35, String.class, "height", false, "HEIGHT");
        public final static Property PreferredName = new Property(36, String.class, "preferredName", false, "PREFERRED_NAME");
        public final static Property DateEnrolled = new Property(37, Long.class, "dateEnrolled", false, "DATE_ENROLLED");
        public final static Property FirstName = new Property(38, String.class, "firstName", false, "FIRST_NAME");
        public final static Property WorkHours = new Property(39, String.class, "workHours", false, "WORK_HOURS");
        public final static Property Weight = new Property(40, String.class, "weight", false, "WEIGHT");
        public final static Property WithrawalCodeWithdrawalCodeId = new Property(41, long.class, "withrawalCodeWithdrawalCodeId", false, "WITHRAWAL_CODE_WITHDRAWAL_CODE_ID");
        public final static Property DateOfLastPhysical = new Property(42, Long.class, "dateOfLastPhysical", false, "DATE_OF_LAST_PHYSICAL");
        public final static Property BirthDate = new Property(43, Long.class, "birthDate", false, "BIRTH_DATE");
        public final static Property EmailAddressString = new Property(44, String.class, "emailAddressString", false, "EMAIL_ADDRESS_STRING");
        public final static Property SaveResultSaveResultId = new Property(45, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property HairColor = new Property(46, String.class, "hairColor", false, "HAIR_COLOR");
        public final static Property DateWithdrawn = new Property(47, Long.class, "dateWithdrawn", false, "DATE_WITHDRAWN");
        public final static Property SchoolTransportation = new Property(48, SchoolTransportation.class, "schoolTransportation", false, "SCHOOL_TRANSPORTATION");
    };

    private DaoSession daoSession;

    private Query<Student> activity_StudentsQuery;
    private Query<Student> student_BlacklistedFromQuery;
    private Query<Student> school_StudentsQuery;
    private Query<Student> person_BlacklistedFromQuery;

    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT' (" + //
                "'PREFIX' TEXT," + // 0: prefix
                "'SOCIAL_SECURITY_RAW' TEXT," + // 1: socialSecurityRaw
                "'ATTENDS_SCHOOL' INTEGER," + // 2: attendsSchool
                "'DATE_LAST_MODIFIED' INTEGER," + // 3: dateLastModified
                "'CURRENT_DEVICE_DEVICE_ID' INTEGER NOT NULL ," + // 4: currentDeviceDeviceId
                "'SCHOOL_SCHOOL_ID' INTEGER NOT NULL ," + // 5: schoolSchoolId
                "'BLACKLISTED_FROM_STUDENT_ID' INTEGER NOT NULL ," + // 6: blacklistedFromStudentId
                "'MIDDLE_NAME' TEXT," + // 7: middleName
                "'IS_DELETED' INTEGER," + // 8: isDeleted
                "'STUDENTS_ACTIVITY_ID' INTEGER NOT NULL ," + // 9: studentsActivityId
                "'START_DATE' INTEGER," + // 10: startDate
                "'VERSION' INTEGER," + // 11: version
                "'EMAIL_ADDRESSES' TEXT," + // 12: emailAddresses
                "'DISTINGUISHING_MARKS' TEXT," + // 13: distinguishingMarks
                "'_id' INTEGER PRIMARY KEY ," + // 14: id
                "'DATE_CREATED' INTEGER," + // 15: dateCreated
                "'SOCIAL_SECURITY_ENTRYPTED' TEXT," + // 16: socialSecurityEntrypted
                "'NAME' TEXT," + // 17: name
                "'SUFFIX' TEXT," + // 18: suffix
                "'EMPLOYER' TEXT," + // 19: employer
                "'TAG_STRING' TEXT," + // 20: tagString
                "'TENANT_ID' INTEGER," + // 21: tenantID
                "'SCHOOL_ID' INTEGER," + // 22: schoolID
                "'YEAR_IN_SCHOOL' TEXT," + // 23: yearInSchool
                "'LANGUAGES' TEXT," + // 24: languages
                "'INTERESTS_STRING' TEXT," + // 25: interestsString
                "'IS_ENABLED' INTEGER," + // 26: isEnabled
                "'LAST_NAME' TEXT," + // 27: lastName
                "'SCHOOL_PICKUP_TIME' TEXT," + // 28: schoolPickupTime
                "'SOCIAL_SECURITY' TEXT," + // 29: socialSecurity
                "'SCHOOL_DROP_OFF_TIME' TEXT," + // 30: schoolDropOffTime
                "'GUID' TEXT," + // 31: guid
                "'EXTERNAL_ID' TEXT," + // 32: externalID
                "'STUDENTS_SCHOOL_ID' INTEGER NOT NULL ," + // 33: studentsSchoolId
                "'BLACKLISTED_FROM_PERSON_ID' INTEGER NOT NULL ," + // 34: blacklistedFromPersonId
                "'HEIGHT' TEXT," + // 35: height
                "'PREFERRED_NAME' TEXT," + // 36: preferredName
                "'DATE_ENROLLED' INTEGER," + // 37: dateEnrolled
                "'FIRST_NAME' TEXT," + // 38: firstName
                "'WORK_HOURS' TEXT," + // 39: workHours
                "'WEIGHT' TEXT," + // 40: weight
                "'WITHRAWAL_CODE_WITHDRAWAL_CODE_ID' INTEGER NOT NULL ," + // 41: withrawalCodeWithdrawalCodeId
                "'DATE_OF_LAST_PHYSICAL' INTEGER," + // 42: dateOfLastPhysical
                "'BIRTH_DATE' INTEGER," + // 43: birthDate
                "'EMAIL_ADDRESS_STRING' TEXT," + // 44: emailAddressString
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 45: saveResultSaveResultId
                "'HAIR_COLOR' TEXT," + // 46: hairColor
                "'DATE_WITHDRAWN' INTEGER," + // 47: dateWithdrawn
                "'SCHOOL_TRANSPORTATION' INTEGER);"); // 48: schoolTransportation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        String prefix = entity.getPrefix();
        if (prefix != null) {
            stmt.bindString(1, prefix);
        }
 
        String socialSecurityRaw = entity.getSocialSecurityRaw();
        if (socialSecurityRaw != null) {
            stmt.bindString(2, socialSecurityRaw);
        }
 
        Boolean attendsSchool = entity.getAttendsSchool();
        if (attendsSchool != null) {
            stmt.bindLong(3, attendsSchool ? 1l: 0l);
        }
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(4, dateLastModified);
        }
        stmt.bindLong(5, entity.getCurrentDeviceDeviceId());
        stmt.bindLong(6, entity.getSchoolSchoolId());
        stmt.bindLong(7, entity.getBlacklistedFromStudentId());
 
        String middleName = entity.getMiddleName();
        if (middleName != null) {
            stmt.bindString(8, middleName);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(9, isDeleted ? 1l: 0l);
        }
        stmt.bindLong(10, entity.getStudentsActivityId());
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(11, startDate);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(12, version);
        }
 
        String emailAddresses = entity.getEmailAddresses();
        if (emailAddresses != null) {
            stmt.bindString(13, emailAddresses);
        }
 
        String distinguishingMarks = entity.getDistinguishingMarks();
        if (distinguishingMarks != null) {
            stmt.bindString(14, distinguishingMarks);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(15, id);
        }
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(16, dateCreated);
        }
 
        String socialSecurityEntrypted = entity.getSocialSecurityEntrypted();
        if (socialSecurityEntrypted != null) {
            stmt.bindString(17, socialSecurityEntrypted);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String suffix = entity.getSuffix();
        if (suffix != null) {
            stmt.bindString(19, suffix);
        }
 
        String employer = entity.getEmployer();
        if (employer != null) {
            stmt.bindString(20, employer);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(21, tagString);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(22, tenantID);
        }
 
        Long schoolID = entity.getSchoolID();
        if (schoolID != null) {
            stmt.bindLong(23, schoolID);
        }
 
        String yearInSchool = entity.getYearInSchool();
        if (yearInSchool != null) {
            stmt.bindString(24, yearInSchool);
        }
 
        String languages = entity.getLanguages();
        if (languages != null) {
            stmt.bindString(25, languages);
        }
 
        String interestsString = entity.getInterestsString();
        if (interestsString != null) {
            stmt.bindString(26, interestsString);
        }
 
        Boolean isEnabled = entity.getIsEnabled();
        if (isEnabled != null) {
            stmt.bindLong(27, isEnabled ? 1l: 0l);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(28, lastName);
        }
 
        String schoolPickupTime = entity.getSchoolPickupTime();
        if (schoolPickupTime != null) {
            stmt.bindString(29, schoolPickupTime);
        }
 
        String socialSecurity = entity.getSocialSecurity();
        if (socialSecurity != null) {
            stmt.bindString(30, socialSecurity);
        }
 
        String schoolDropOffTime = entity.getSchoolDropOffTime();
        if (schoolDropOffTime != null) {
            stmt.bindString(31, schoolDropOffTime);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(32, guid);
        }
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(33, externalID);
        }
        stmt.bindLong(34, entity.getStudentsSchoolId());
        stmt.bindLong(35, entity.getBlacklistedFromPersonId());
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(36, height);
        }
 
        String preferredName = entity.getPreferredName();
        if (preferredName != null) {
            stmt.bindString(37, preferredName);
        }
 
        Long dateEnrolled = entity.getDateEnrolled();
        if (dateEnrolled != null) {
            stmt.bindLong(38, dateEnrolled);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(39, firstName);
        }
 
        String workHours = entity.getWorkHours();
        if (workHours != null) {
            stmt.bindString(40, workHours);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(41, weight);
        }
        stmt.bindLong(42, entity.getWithrawalCodeWithdrawalCodeId());
 
        Long dateOfLastPhysical = entity.getDateOfLastPhysical();
        if (dateOfLastPhysical != null) {
            stmt.bindLong(43, dateOfLastPhysical);
        }
 
        Long birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindLong(44, birthDate);
        }
 
        String emailAddressString = entity.getEmailAddressString();
        if (emailAddressString != null) {
            stmt.bindString(45, emailAddressString);
        }
        stmt.bindLong(46, entity.getSaveResultSaveResultId());
 
        String hairColor = entity.getHairColor();
        if (hairColor != null) {
            stmt.bindString(47, hairColor);
        }
 
        Long dateWithdrawn = entity.getDateWithdrawn();
        if (dateWithdrawn != null) {
            stmt.bindLong(48, dateWithdrawn);
        }
 
        SchoolTransportation schoolTransportation = entity.getSchoolTransportation();
        if (schoolTransportation != null) {
            stmt.bindLong(49, schoolTransportation.getValue());
        }
    }

    @Override
    protected void attachEntity(Student entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14);
    }    

    /** @inheritdoc */
    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // prefix
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // socialSecurityRaw
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // attendsSchool
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // dateLastModified
            cursor.getLong(offset + 4), // currentDeviceDeviceId
            cursor.getLong(offset + 5), // schoolSchoolId
            cursor.getLong(offset + 6), // blacklistedFromStudentId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // middleName
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isDeleted
            cursor.getLong(offset + 9), // studentsActivityId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // startDate
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // version
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // emailAddresses
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // distinguishingMarks
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // id
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // dateCreated
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // socialSecurityEntrypted
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // suffix
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // employer
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tagString
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // tenantID
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // schoolID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // yearInSchool
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // languages
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // interestsString
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // isEnabled
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // lastName
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // schoolPickupTime
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // socialSecurity
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // schoolDropOffTime
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // guid
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // externalID
            cursor.getLong(offset + 33), // studentsSchoolId
            cursor.getLong(offset + 34), // blacklistedFromPersonId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // height
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // preferredName
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37), // dateEnrolled
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // firstName
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // workHours
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // weight
            cursor.getLong(offset + 41), // withrawalCodeWithdrawalCodeId
            cursor.isNull(offset + 42) ? null : cursor.getLong(offset + 42), // dateOfLastPhysical
            cursor.isNull(offset + 43) ? null : cursor.getLong(offset + 43), // birthDate
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // emailAddressString
            cursor.getLong(offset + 45), // saveResultSaveResultId
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // hairColor
            cursor.isNull(offset + 47) ? null : cursor.getLong(offset + 47), // dateWithdrawn
            cursor.isNull(offset + 48) ? null : SchoolTransportation.fromInt(cursor.getLong(offset + 48)) // schoolTransportation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setPrefix(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSocialSecurityRaw(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttendsSchool(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setDateLastModified(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCurrentDeviceDeviceId(cursor.getLong(offset + 4));
        entity.setSchoolSchoolId(cursor.getLong(offset + 5));
        entity.setBlacklistedFromStudentId(cursor.getLong(offset + 6));
        entity.setMiddleName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setStudentsActivityId(cursor.getLong(offset + 9));
        entity.setStartDate(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEmailAddresses(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDistinguishingMarks(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setDateCreated(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setSocialSecurityEntrypted(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSuffix(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEmployer(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTagString(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTenantID(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setSchoolID(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setYearInSchool(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLanguages(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setInterestsString(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsEnabled(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setLastName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSchoolPickupTime(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSocialSecurity(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSchoolDropOffTime(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setGuid(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setExternalID(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setStudentsSchoolId(cursor.getLong(offset + 33));
        entity.setBlacklistedFromPersonId(cursor.getLong(offset + 34));
        entity.setHeight(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setPreferredName(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDateEnrolled(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
        entity.setFirstName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setWorkHours(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setWeight(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setWithrawalCodeWithdrawalCodeId(cursor.getLong(offset + 41));
        entity.setDateOfLastPhysical(cursor.isNull(offset + 42) ? null : cursor.getLong(offset + 42));
        entity.setBirthDate(cursor.isNull(offset + 43) ? null : cursor.getLong(offset + 43));
        entity.setEmailAddressString(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 45));
        entity.setHairColor(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setDateWithdrawn(cursor.isNull(offset + 47) ? null : cursor.getLong(offset + 47));
        entity.setSchoolTransportation(cursor.isNull(offset + 48) ? null : SchoolTransportation.fromInt(cursor.getLong(offset + 48)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "students" to-many relationship of Activity. */
    public List<Student> _queryActivity_Students(long studentsActivityId) {
        synchronized (this) {
            if (activity_StudentsQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentsActivityId.eq(null));
                activity_StudentsQuery = queryBuilder.build();
            }
        }
        Query<Student> query = activity_StudentsQuery.forCurrentThread();
        query.setParameter(0, studentsActivityId);
        return query.list();
    }

    /** Internal query to resolve the "blacklistedFrom" to-many relationship of Student. */
    public List<Student> _queryStudent_BlacklistedFrom(long blacklistedFromStudentId) {
        synchronized (this) {
            if (student_BlacklistedFromQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BlacklistedFromStudentId.eq(null));
                student_BlacklistedFromQuery = queryBuilder.build();
            }
        }
        Query<Student> query = student_BlacklistedFromQuery.forCurrentThread();
        query.setParameter(0, blacklistedFromStudentId);
        return query.list();
    }

    /** Internal query to resolve the "students" to-many relationship of School. */
    public List<Student> _querySchool_Students(long studentsSchoolId) {
        synchronized (this) {
            if (school_StudentsQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentsSchoolId.eq(null));
                school_StudentsQuery = queryBuilder.build();
            }
        }
        Query<Student> query = school_StudentsQuery.forCurrentThread();
        query.setParameter(0, studentsSchoolId);
        return query.list();
    }

    /** Internal query to resolve the "blacklistedFrom" to-many relationship of Person. */
    public List<Student> _queryPerson_BlacklistedFrom(long blacklistedFromPersonId) {
        synchronized (this) {
            if (person_BlacklistedFromQuery == null) {
                QueryBuilder<Student> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BlacklistedFromPersonId.eq(null));
                person_BlacklistedFromQuery = queryBuilder.build();
            }
        }
        Query<Student> query = person_BlacklistedFromQuery.forCurrentThread();
        query.setParameter(0, blacklistedFromPersonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSchoolDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getWithdrawalCodeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getDeviceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM STUDENT T");
            builder.append(" LEFT JOIN SCHOOL T0 ON T.'SCHOOL_SCHOOL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN WITHDRAWAL_CODE T1 ON T.'WITHRAWAL_CODE_WITHDRAWAL_CODE_ID'=T1.'_id'");
            builder.append(" LEFT JOIN DEVICE T2 ON T.'CURRENT_DEVICE_DEVICE_ID'=T2.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T3 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Student loadCurrentDeep(Cursor cursor, boolean lock) {
        Student entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        School school = loadCurrentOther(daoSession.getSchoolDao(), cursor, offset);
         if(school != null) {
            entity.setSchool(school);
        }
        offset += daoSession.getSchoolDao().getAllColumns().length;

        WithdrawalCode withrawalCode = loadCurrentOther(daoSession.getWithdrawalCodeDao(), cursor, offset);
         if(withrawalCode != null) {
            entity.setWithrawalCode(withrawalCode);
        }
        offset += daoSession.getWithdrawalCodeDao().getAllColumns().length;

        Device currentDevice = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
         if(currentDevice != null) {
            entity.setCurrentDevice(currentDevice);
        }
        offset += daoSession.getDeviceDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public Student loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Student> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Student> list = new ArrayList<Student>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Student> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Student> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
