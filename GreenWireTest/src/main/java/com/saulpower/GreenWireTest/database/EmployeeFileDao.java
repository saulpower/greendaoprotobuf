package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.EmployeeFile;
import com.saulpower.GreenWireTest.database.EmployeeFile.EmploymentClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EMPLOYEE_FILE.
*/
public class EmployeeFileDao extends AbstractDao<EmployeeFile, Long> {

    public static final String TABLENAME = "EMPLOYEE_FILE";

    /**
     * Properties of entity EmployeeFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MinHoursPerWeek = new Property(0, Integer.class, "minHoursPerWeek", false, "MIN_HOURS_PER_WEEK");
        public final static Property ExternalID = new Property(1, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Guid = new Property(3, String.class, "guid", false, "GUID");
        public final static Property EmployeeFilesOUId = new Property(4, long.class, "employeeFilesOUId", false, "EMPLOYEE_FILES_OUID");
        public final static Property Priority = new Property(5, Integer.class, "priority", false, "PRIORITY");
        public final static Property TagString = new Property(6, String.class, "tagString", false, "TAG_STRING");
        public final static Property RoleID = new Property(7, String.class, "roleID", false, "ROLE_ID");
        public final static Property DepartmentID = new Property(8, String.class, "departmentID", false, "DEPARTMENT_ID");
        public final static Property TenantID = new Property(9, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(10, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(11, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property RoleEmploymentRoleId = new Property(12, long.class, "roleEmploymentRoleId", false, "ROLE_EMPLOYMENT_ROLE_ID");
        public final static Property EmploymentClass = new Property(13, EmploymentClass.class, "employmentClass", false, "EMPLOYMENT_CLASS");
        public final static Property IsDeleted = new Property(14, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(15, Integer.class, "version", false, "VERSION");
        public final static Property StartDate = new Property(16, Long.class, "startDate", false, "START_DATE");
        public final static Property StatusID = new Property(17, String.class, "statusID", false, "STATUS_ID");
        public final static Property MaxHoursPerWeek = new Property(18, Integer.class, "maxHoursPerWeek", false, "MAX_HOURS_PER_WEEK");
        public final static Property StatusEmploymentStatusId = new Property(19, long.class, "statusEmploymentStatusId", false, "STATUS_EMPLOYMENT_STATUS_ID");
        public final static Property Id = new Property(20, Long.class, "id", true, "_id");
        public final static Property OUOUId = new Property(21, long.class, "oUOUId", false, "O_UOUID");
        public final static Property DateCreated = new Property(22, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property EndDate = new Property(23, Long.class, "endDate", false, "END_DATE");
    };

    private DaoSession daoSession;

    private Query<EmployeeFile> oU_EmployeeFilesQuery;

    public EmployeeFileDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EMPLOYEE_FILE' (" + //
                "'MIN_HOURS_PER_WEEK' INTEGER," + // 0: minHoursPerWeek
                "'EXTERNAL_ID' TEXT," + // 1: externalID
                "'NAME' TEXT," + // 2: name
                "'GUID' TEXT," + // 3: guid
                "'EMPLOYEE_FILES_OUID' INTEGER NOT NULL ," + // 4: employeeFilesOUId
                "'PRIORITY' INTEGER," + // 5: priority
                "'TAG_STRING' TEXT," + // 6: tagString
                "'ROLE_ID' TEXT," + // 7: roleID
                "'DEPARTMENT_ID' TEXT," + // 8: departmentID
                "'TENANT_ID' INTEGER," + // 9: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 10: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' INTEGER," + // 11: dateLastModified
                "'ROLE_EMPLOYMENT_ROLE_ID' INTEGER NOT NULL ," + // 12: roleEmploymentRoleId
                "'EMPLOYMENT_CLASS' INTEGER," + // 13: employmentClass
                "'IS_DELETED' INTEGER," + // 14: isDeleted
                "'VERSION' INTEGER," + // 15: version
                "'START_DATE' INTEGER," + // 16: startDate
                "'STATUS_ID' TEXT," + // 17: statusID
                "'MAX_HOURS_PER_WEEK' INTEGER," + // 18: maxHoursPerWeek
                "'STATUS_EMPLOYMENT_STATUS_ID' INTEGER NOT NULL ," + // 19: statusEmploymentStatusId
                "'_id' INTEGER PRIMARY KEY ," + // 20: id
                "'O_UOUID' INTEGER NOT NULL ," + // 21: oUOUId
                "'DATE_CREATED' INTEGER," + // 22: dateCreated
                "'END_DATE' INTEGER);"); // 23: endDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EMPLOYEE_FILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EmployeeFile entity) {
        stmt.clearBindings();
 
        Integer minHoursPerWeek = entity.getMinHoursPerWeek();
        if (minHoursPerWeek != null) {
            stmt.bindLong(1, minHoursPerWeek);
        }
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(2, externalID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(4, guid);
        }
        stmt.bindLong(5, entity.getEmployeeFilesOUId());
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(7, tagString);
        }
 
        String roleID = entity.getRoleID();
        if (roleID != null) {
            stmt.bindString(8, roleID);
        }
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(9, departmentID);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(10, tenantID);
        }
        stmt.bindLong(11, entity.getSaveResultSaveResultId());
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(12, dateLastModified);
        }
        stmt.bindLong(13, entity.getRoleEmploymentRoleId());
 
        EmploymentClass employmentClass = entity.getEmploymentClass();
        if (employmentClass != null) {
            stmt.bindLong(14, employmentClass.getValue());
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(15, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(16, version);
        }
 
        Long startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(17, startDate);
        }
 
        String statusID = entity.getStatusID();
        if (statusID != null) {
            stmt.bindString(18, statusID);
        }
 
        Integer maxHoursPerWeek = entity.getMaxHoursPerWeek();
        if (maxHoursPerWeek != null) {
            stmt.bindLong(19, maxHoursPerWeek);
        }
        stmt.bindLong(20, entity.getStatusEmploymentStatusId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(21, id);
        }
        stmt.bindLong(22, entity.getOUOUId());
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(23, dateCreated);
        }
 
        Long endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(24, endDate);
        }
    }

    @Override
    protected void attachEntity(EmployeeFile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20);
    }    

    /** @inheritdoc */
    @Override
    public EmployeeFile readEntity(Cursor cursor, int offset) {
        EmployeeFile entity = new EmployeeFile( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // minHoursPerWeek
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // externalID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guid
            cursor.getLong(offset + 4), // employeeFilesOUId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tagString
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // roleID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departmentID
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // tenantID
            cursor.getLong(offset + 10), // saveResultSaveResultId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // dateLastModified
            cursor.getLong(offset + 12), // roleEmploymentRoleId
            cursor.isNull(offset + 13) ? null : EmploymentClass.fromInt(cursor.getLong(offset + 13)), // employmentClass
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isDeleted
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // version
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // startDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // statusID
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // maxHoursPerWeek
            cursor.getLong(offset + 19), // statusEmploymentStatusId
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // id
            cursor.getLong(offset + 21), // oUOUId
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // dateCreated
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23) // endDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EmployeeFile entity, int offset) {
        entity.setMinHoursPerWeek(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setExternalID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmployeeFilesOUId(cursor.getLong(offset + 4));
        entity.setPriority(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTagString(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRoleID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartmentID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTenantID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 10));
        entity.setDateLastModified(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setRoleEmploymentRoleId(cursor.getLong(offset + 12));
        entity.setEmploymentClass(cursor.isNull(offset + 13) ? null : EmploymentClass.fromInt(cursor.getLong(offset + 13)));
        entity.setIsDeleted(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setVersion(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setStartDate(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setStatusID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMaxHoursPerWeek(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setStatusEmploymentStatusId(cursor.getLong(offset + 19));
        entity.setId(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setOUOUId(cursor.getLong(offset + 21));
        entity.setDateCreated(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setEndDate(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EmployeeFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EmployeeFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "employeeFiles" to-many relationship of OU. */
    public List<EmployeeFile> _queryOU_EmployeeFiles(long employeeFilesOUId) {
        synchronized (this) {
            if (oU_EmployeeFilesQuery == null) {
                QueryBuilder<EmployeeFile> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EmployeeFilesOUId.eq(null));
                oU_EmployeeFilesQuery = queryBuilder.build();
            }
        }
        Query<EmployeeFile> query = oU_EmployeeFilesQuery.forCurrentThread();
        query.setParameter(0, employeeFilesOUId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOUDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEmploymentRoleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getEmploymentStatusDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM EMPLOYEE_FILE T");
            builder.append(" LEFT JOIN OU T0 ON T.'O_UOUID'=T0.'_id'");
            builder.append(" LEFT JOIN EMPLOYMENT_ROLE T1 ON T.'ROLE_EMPLOYMENT_ROLE_ID'=T1.'_id'");
            builder.append(" LEFT JOIN EMPLOYMENT_STATUS T2 ON T.'STATUS_EMPLOYMENT_STATUS_ID'=T2.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T3 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EmployeeFile loadCurrentDeep(Cursor cursor, boolean lock) {
        EmployeeFile entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OU oU = loadCurrentOther(daoSession.getOUDao(), cursor, offset);
         if(oU != null) {
            entity.setOU(oU);
        }
        offset += daoSession.getOUDao().getAllColumns().length;

        EmploymentRole role = loadCurrentOther(daoSession.getEmploymentRoleDao(), cursor, offset);
         if(role != null) {
            entity.setRole(role);
        }
        offset += daoSession.getEmploymentRoleDao().getAllColumns().length;

        EmploymentStatus status = loadCurrentOther(daoSession.getEmploymentStatusDao(), cursor, offset);
         if(status != null) {
            entity.setStatus(status);
        }
        offset += daoSession.getEmploymentStatusDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public EmployeeFile loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EmployeeFile> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EmployeeFile> list = new ArrayList<EmployeeFile>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EmployeeFile> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EmployeeFile> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
