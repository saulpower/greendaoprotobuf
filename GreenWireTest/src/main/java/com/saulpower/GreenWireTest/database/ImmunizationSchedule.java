package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.HashMap;
import java.util.Map;

import com.saulpower.GreenWireTest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table IMMUNIZATION_SCHEDULE.
 */
public class ImmunizationSchedule {

    private String externalID;
    private String guid;
    private String name;
    private String tagString;
    private transient long schedulesImmunizationDefinitionId;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String immunizationID;
    private Integer months;
    private ImmunicationReferencePoint referencePoint;
    private Long dateLastModified;
    private transient long definitionImmunizationDefinitionId;
    private Boolean isDeleted;
    private Integer version;
    private Long id;
    private Long dateCreated;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ImmunizationScheduleDao myDao;

    private ImmunizationDefinition definition;
    private Long definition__resolvedKey;

    private SaveResult saveResult;
    private Long saveResult__resolvedKey;

    private List<CustomValue> customValues;

    public ImmunizationSchedule() {
    }

    public ImmunizationSchedule(Long id) {
        this.id = id;
    }

    public ImmunizationSchedule(String externalID, String guid, String name, String tagString, long schedulesImmunizationDefinitionId, Long tenantID, long saveResultSaveResultId, String immunizationID, Integer months, ImmunicationReferencePoint referencePoint, Long dateLastModified, long definitionImmunizationDefinitionId, Boolean isDeleted, Integer version, Long id, Long dateCreated) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.tagString = tagString;
        this.schedulesImmunizationDefinitionId = schedulesImmunizationDefinitionId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.immunizationID = immunizationID;
        this.months = months;
        this.referencePoint = referencePoint;
        this.dateLastModified = dateLastModified;
        this.definitionImmunizationDefinitionId = definitionImmunizationDefinitionId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.dateCreated = dateCreated;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImmunizationScheduleDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public long getSchedulesImmunizationDefinitionId() {
        return schedulesImmunizationDefinitionId;
    }

    public void setSchedulesImmunizationDefinitionId(long schedulesImmunizationDefinitionId) {
        this.schedulesImmunizationDefinitionId = schedulesImmunizationDefinitionId;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getImmunizationID() {
        return immunizationID;
    }

    public void setImmunizationID(String immunizationID) {
        this.immunizationID = immunizationID;
    }

    public Integer getMonths() {
        return months;
    }

    public void setMonths(Integer months) {
        this.months = months;
    }

    public ImmunicationReferencePoint getReferencePoint() {
        return referencePoint;
    }

    public void setReferencePoint(ImmunicationReferencePoint referencePoint) {
        this.referencePoint = referencePoint;
    }

    public Long getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(Long dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getDefinitionImmunizationDefinitionId() {
        return definitionImmunizationDefinitionId;
    }

    public void setDefinitionImmunizationDefinitionId(long definitionImmunizationDefinitionId) {
        this.definitionImmunizationDefinitionId = definitionImmunizationDefinitionId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public enum ImmunicationReferencePoint implements DaoEnum {
        BIRTH(0),
        PREVIOUS(1),
        ENROLLMENT(2);

        private static final Map<Long, ImmunicationReferencePoint> intToTypeMap = new HashMap<Long, ImmunicationReferencePoint>();

        static {
            for (ImmunicationReferencePoint type : ImmunicationReferencePoint.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static ImmunicationReferencePoint fromInt(long i) {
            ImmunicationReferencePoint type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private ImmunicationReferencePoint(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ImmunizationDefinition getDefinition() {
        long __key = this.definitionImmunizationDefinitionId;
        if (definition__resolvedKey == null || !definition__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImmunizationDefinitionDao targetDao = daoSession.getImmunizationDefinitionDao();
            ImmunizationDefinition definitionNew = targetDao.load(__key);
            synchronized (this) {
                definition = definitionNew;
            	definition__resolvedKey = __key;
            }
        }
        return definition;
    }

    public void setDefinition(ImmunizationDefinition definition) {
        if (definition == null) {
            throw new DaoException("To-one property 'definitionImmunizationDefinitionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.definition = definition;
            definitionImmunizationDefinitionId = definition.getId();
            definition__resolvedKey = definitionImmunizationDefinitionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryImmunizationSchedule_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
