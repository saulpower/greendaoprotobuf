package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ASSOCIATION.
 */
public class Association extends SyncBase  {

    private String externalID;
    private String name;
    private String guid;
    private String tagString;
    private String roleID;
    private transient long roleRoleBaseId;
    private transient long associationsGuardianId;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private transient long associationsOUId;
    private transient long associationsStudentId;
    private transient long associationsOUBaseId;
    private transient long userAuthorizedPersonId;
    private transient Long syncBaseId;
    private transient long associationsPersonId;
    private Boolean isDeleted;
    private Integer version;
    private transient long associationsCenterId;
    private transient long associationsAuthorizedPersonId;
    private Long id;
    private String dateCreated;
    private transient long oUOUBaseId;
    private Boolean isActive;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AssociationDao myDao;
    private OUBase oU;
    private Long oU__resolvedKey;
    private AuthorizedPerson user;
    private Long user__resolvedKey;
    private RoleBase role;
    private Long role__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public Association() {
    }

    public Association(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Association(String externalID, String name, String guid, String tagString, String roleID, long roleRoleBaseId, long associationsGuardianId, Long tenantID, long saveResultSaveResultId, String dateLastModified, long associationsOUId, long associationsStudentId, long associationsOUBaseId, long userAuthorizedPersonId, Long syncBaseId, long associationsPersonId, Boolean isDeleted, Integer version, long associationsCenterId, long associationsAuthorizedPersonId, Long id, String dateCreated, long oUOUBaseId, Boolean isActive) {
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.tagString = tagString;
        this.roleID = roleID;
        this.roleRoleBaseId = roleRoleBaseId;
        this.associationsGuardianId = associationsGuardianId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.associationsOUId = associationsOUId;
        this.associationsStudentId = associationsStudentId;
        this.associationsOUBaseId = associationsOUBaseId;
        this.userAuthorizedPersonId = userAuthorizedPersonId;
        this.syncBaseId = syncBaseId;
        this.associationsPersonId = associationsPersonId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.associationsCenterId = associationsCenterId;
        this.associationsAuthorizedPersonId = associationsAuthorizedPersonId;
        this.id = id;
        this.dateCreated = dateCreated;
        this.oUOUBaseId = oUOUBaseId;
        this.isActive = isActive;
    }

    public Association(String externalID, String name, String guid, String tagString, String roleID, long roleRoleBaseId, long associationsGuardianId, Long tenantID, long saveResultSaveResultId, String dateLastModified, long associationsOUId, long associationsStudentId, long associationsOUBaseId, long userAuthorizedPersonId, long associationsPersonId, Boolean isDeleted, Integer version, long associationsCenterId, long associationsAuthorizedPersonId, Long id, String dateCreated, long oUOUBaseId, Boolean isActive) {
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.tagString = tagString;
        this.roleID = roleID;
        this.roleRoleBaseId = roleRoleBaseId;
        this.associationsGuardianId = associationsGuardianId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.associationsOUId = associationsOUId;
        this.associationsStudentId = associationsStudentId;
        this.associationsOUBaseId = associationsOUBaseId;
        this.userAuthorizedPersonId = userAuthorizedPersonId;
        this.associationsPersonId = associationsPersonId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.associationsCenterId = associationsCenterId;
        this.associationsAuthorizedPersonId = associationsAuthorizedPersonId;
        this.id = id;
        this.dateCreated = dateCreated;
        this.oUOUBaseId = oUOUBaseId;
        this.isActive = isActive;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAssociationDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public String getRoleID() {
        return roleID;
    }

    public void setRoleID(String roleID) {
        this.roleID = roleID;
    }

    public long getRoleRoleBaseId() {
        return roleRoleBaseId;
    }

    public void setRoleRoleBaseId(long roleRoleBaseId) {
        this.roleRoleBaseId = roleRoleBaseId;
    }

    public long getAssociationsGuardianId() {
        return associationsGuardianId;
    }

    public void setAssociationsGuardianId(long associationsGuardianId) {
        this.associationsGuardianId = associationsGuardianId;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getAssociationsOUId() {
        return associationsOUId;
    }

    public void setAssociationsOUId(long associationsOUId) {
        this.associationsOUId = associationsOUId;
    }

    public long getAssociationsStudentId() {
        return associationsStudentId;
    }

    public void setAssociationsStudentId(long associationsStudentId) {
        this.associationsStudentId = associationsStudentId;
    }

    public long getAssociationsOUBaseId() {
        return associationsOUBaseId;
    }

    public void setAssociationsOUBaseId(long associationsOUBaseId) {
        this.associationsOUBaseId = associationsOUBaseId;
    }

    public long getUserAuthorizedPersonId() {
        return userAuthorizedPersonId;
    }

    public void setUserAuthorizedPersonId(long userAuthorizedPersonId) {
        this.userAuthorizedPersonId = userAuthorizedPersonId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public long getAssociationsPersonId() {
        return associationsPersonId;
    }

    public void setAssociationsPersonId(long associationsPersonId) {
        this.associationsPersonId = associationsPersonId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public long getAssociationsCenterId() {
        return associationsCenterId;
    }

    public void setAssociationsCenterId(long associationsCenterId) {
        this.associationsCenterId = associationsCenterId;
    }

    public long getAssociationsAuthorizedPersonId() {
        return associationsAuthorizedPersonId;
    }

    public void setAssociationsAuthorizedPersonId(long associationsAuthorizedPersonId) {
        this.associationsAuthorizedPersonId = associationsAuthorizedPersonId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getOUOUBaseId() {
        return oUOUBaseId;
    }

    public void setOUOUBaseId(long oUOUBaseId) {
        this.oUOUBaseId = oUOUBaseId;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    /** To-one relationship, resolved on first access. */
    public OUBase getOU() {
        long __key = this.oUOUBaseId;
        if (oU__resolvedKey == null || !oU__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUBaseDao targetDao = daoSession.getOUBaseDao();
            OUBase oUNew = targetDao.load(__key);
            synchronized (this) {
                oU = oUNew;
            	oU__resolvedKey = __key;
            }
        }
        return oU;
    }

    public void setOU(OUBase oU) {
        if (oU == null) {
            throw new DaoException("To-one property 'oUOUBaseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oU = oU;
            oUOUBaseId = oU.getId();
            oU__resolvedKey = oUOUBaseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AuthorizedPerson getUser() {
        long __key = this.userAuthorizedPersonId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AuthorizedPersonDao targetDao = daoSession.getAuthorizedPersonDao();
            AuthorizedPerson userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(AuthorizedPerson user) {
        if (user == null) {
            throw new DaoException("To-one property 'userAuthorizedPersonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            userAuthorizedPersonId = user.getId();
            user__resolvedKey = userAuthorizedPersonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RoleBase getRole() {
        long __key = this.roleRoleBaseId;
        if (role__resolvedKey == null || !role__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoleBaseDao targetDao = daoSession.getRoleBaseDao();
            RoleBase roleNew = targetDao.load(__key);
            synchronized (this) {
                role = roleNew;
            	role__resolvedKey = __key;
            }
        }
        return role;
    }

    public void setRole(RoleBase role) {
        if (role == null) {
            throw new DaoException("To-one property 'roleRoleBaseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.role = role;
            roleRoleBaseId = role.getId();
            role__resolvedKey = roleRoleBaseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryAssociation_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}