package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SCHOOL.
 */
public class School extends SyncBase  {

    private String guid;
    private String name;
    private String externalID;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private transient Long syncBaseId;
    private transient long phoneNumberPhoneNumberId;
    private Boolean isDeleted;
    private Integer version;
    private Long id;
    private transient long addressAddressId;
    private transient long oUOUId;
    private String dateCreated;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SchoolDao myDao;
    private PhoneNumber phoneNumber;
    private Long phoneNumber__resolvedKey;
    private OU oU;
    private Long oU__resolvedKey;
    private Address address;
    private Long address__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<Student> students;
    private List<CustomValue> customValues;

    public School() {
    }

    public School(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    School(String guid, String name, String externalID, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, Long syncBaseId, long phoneNumberPhoneNumberId, Boolean isDeleted, Integer version, Long id, long addressAddressId, long oUOUId, String dateCreated) {
        this.guid = guid;
        this.name = name;
        this.externalID = externalID;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.syncBaseId = syncBaseId;
        this.phoneNumberPhoneNumberId = phoneNumberPhoneNumberId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.addressAddressId = addressAddressId;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
    }

    public School(String guid, String name, String externalID, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, long phoneNumberPhoneNumberId, Boolean isDeleted, Integer version, Long id, long addressAddressId, long oUOUId, String dateCreated) {
        this.guid = guid;
        this.name = name;
        this.externalID = externalID;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.phoneNumberPhoneNumberId = phoneNumberPhoneNumberId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.addressAddressId = addressAddressId;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchoolDao() : null;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public long getPhoneNumberPhoneNumberId() {
        return phoneNumberPhoneNumberId;
    }

    public void setPhoneNumberPhoneNumberId(long phoneNumberPhoneNumberId) {
        this.phoneNumberPhoneNumberId = phoneNumberPhoneNumberId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getAddressAddressId() {
        return addressAddressId;
    }

    public void setAddressAddressId(long addressAddressId) {
        this.addressAddressId = addressAddressId;
    }

    public long getOUOUId() {
        return oUOUId;
    }

    public void setOUOUId(long oUOUId) {
        this.oUOUId = oUOUId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public enum SchoolTransportation implements DaoEnum {
        NONE(0),
        ELEMENTARYSCHOOL(1),
        PARENTORGUARDIAN(2),
        CENTER(3),
        OTHER(4);

        private static final Map<Long, SchoolTransportation> intToTypeMap = new HashMap<Long, SchoolTransportation>();

        static {
            for (SchoolTransportation type : SchoolTransportation.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static SchoolTransportation fromInt(long i) {
            SchoolTransportation type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private SchoolTransportation(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PhoneNumber getPhoneNumber() {
        long __key = this.phoneNumberPhoneNumberId;
        if (phoneNumber__resolvedKey == null || !phoneNumber__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneNumberDao targetDao = daoSession.getPhoneNumberDao();
            PhoneNumber phoneNumberNew = targetDao.load(__key);
            synchronized (this) {
                phoneNumber = phoneNumberNew;
            	phoneNumber__resolvedKey = __key;
            }
        }
        return phoneNumber;
    }

    public void setPhoneNumber(PhoneNumber phoneNumber) {
        if (phoneNumber == null) {
            throw new DaoException("To-one property 'phoneNumberPhoneNumberId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.phoneNumber = phoneNumber;
            phoneNumberPhoneNumberId = phoneNumber.getId();
            phoneNumber__resolvedKey = phoneNumberPhoneNumberId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OU getOU() {
        long __key = this.oUOUId;
        if (oU__resolvedKey == null || !oU__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUDao targetDao = daoSession.getOUDao();
            OU oUNew = targetDao.load(__key);
            synchronized (this) {
                oU = oUNew;
            	oU__resolvedKey = __key;
            }
        }
        return oU;
    }

    public void setOU(OU oU) {
        if (oU == null) {
            throw new DaoException("To-one property 'oUOUId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oU = oU;
            oUOUId = oU.getId();
            oU__resolvedKey = oUOUId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Address getAddress() {
        long __key = this.addressAddressId;
        if (address__resolvedKey == null || !address__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            Address addressNew = targetDao.load(__key);
            synchronized (this) {
                address = addressNew;
            	address__resolvedKey = __key;
            }
        }
        return address;
    }

    public void setAddress(Address address) {
        if (address == null) {
            throw new DaoException("To-one property 'addressAddressId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.address = address;
            addressAddressId = address.getId();
            address__resolvedKey = addressAddressId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Student> getStudents() {
        if (students == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentDao targetDao = daoSession.getStudentDao();
            List<Student> studentsNew = targetDao._querySchool_Students(id);
            synchronized (this) {
                if(students == null) {
                    students = studentsNew;
                }
            }
        }
        return students;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudents() {
        students = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._querySchool_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}