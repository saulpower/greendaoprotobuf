package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.sync.GreenSync;
import com.google.gson.reflect.TypeToken;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.Identification;
import com.saulpower.GreenWireTest.database.Identification.IdentificationType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IDENTIFICATION.
*/
public class IdentificationDao extends AbstractDao<Identification, Long> {

    public static final String TABLENAME = "IDENTIFICATION";

    /**
     * Properties of entity Identification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonPersonId = new Property(0, long.class, "personPersonId", false, "PERSON_PERSON_ID");
        public final static Property ExternalID = new Property(1, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Expiration = new Property(2, String.class, "expiration", false, "EXPIRATION");
        public final static Property VerifiedByID = new Property(3, String.class, "verifiedByID", false, "VERIFIED_BY_ID");
        public final static Property Guid = new Property(4, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property IssuedBy = new Property(6, String.class, "issuedBy", false, "ISSUED_BY");
        public final static Property DateVerified = new Property(7, String.class, "dateVerified", false, "DATE_VERIFIED");
        public final static Property IdentificationStudentId = new Property(8, long.class, "identificationStudentId", false, "IDENTIFICATION_STUDENT_ID");
        public final static Property TagString = new Property(9, String.class, "tagString", false, "TAG_STRING");
        public final static Property DateIssued = new Property(10, String.class, "dateIssued", false, "DATE_ISSUED");
        public final static Property TenantID = new Property(11, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(12, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(13, String.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property Number = new Property(14, String.class, "number", false, "NUMBER");
        public final static Property IdentificationGuardianId = new Property(15, long.class, "identificationGuardianId", false, "IDENTIFICATION_GUARDIAN_ID");
        public final static Property SyncBaseId = new Property(16, Long.class, "syncBaseId", false, "SYNC_BASE_ID");
        public final static Property IsDeleted = new Property(17, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(18, Integer.class, "version", false, "VERSION");
        public final static Property IdentificationPersonId = new Property(19, long.class, "identificationPersonId", false, "IDENTIFICATION_PERSON_ID");
        public final static Property Id = new Property(20, Long.class, "id", true, "_id");
        public final static Property DateCreated = new Property(21, String.class, "dateCreated", false, "DATE_CREATED");
        public final static Property Type = new Property(22, IdentificationType.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;

    private Query<Identification> person_IdentificationQuery;

    private Query<Identification> student_IdentificationQuery;

    private Query<Identification> guardian_IdentificationQuery;

    public IdentificationDao(DaoConfig config) {
        super(config);
    }
    
    public IdentificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IDENTIFICATION' (" + //
                "'PERSON_PERSON_ID' INTEGER NOT NULL ," + // 0: personPersonId
                "'EXTERNAL_ID' TEXT," + // 1: externalID
                "'EXPIRATION' TEXT," + // 2: expiration
                "'VERIFIED_BY_ID' TEXT," + // 3: verifiedByID
                "'GUID' TEXT," + // 4: guid
                "'NAME' TEXT," + // 5: name
                "'ISSUED_BY' TEXT," + // 6: issuedBy
                "'DATE_VERIFIED' TEXT," + // 7: dateVerified
                "'IDENTIFICATION_STUDENT_ID' INTEGER NOT NULL ," + // 8: identificationStudentId
                "'TAG_STRING' TEXT," + // 9: tagString
                "'DATE_ISSUED' TEXT," + // 10: dateIssued
                "'TENANT_ID' INTEGER," + // 11: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 12: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' TEXT," + // 13: dateLastModified
                "'NUMBER' TEXT," + // 14: number
                "'IDENTIFICATION_GUARDIAN_ID' INTEGER NOT NULL ," + // 15: identificationGuardianId
                "'SYNC_BASE_ID' INTEGER REFERENCES 'SYNC_BASE'('SYNC_BASE_ID') ," + // 16: syncBaseId
                "'IS_DELETED' INTEGER," + // 17: isDeleted
                "'VERSION' INTEGER," + // 18: version
                "'IDENTIFICATION_PERSON_ID' INTEGER NOT NULL ," + // 19: identificationPersonId
                "'_id' INTEGER PRIMARY KEY ," + // 20: id
                "'DATE_CREATED' TEXT," + // 21: dateCreated
                "'TYPE' INTEGER);"); // 22: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IDENTIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Identification entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPersonPersonId());
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(2, externalID);
        }
 
        String expiration = entity.getExpiration();
        if (expiration != null) {
            stmt.bindString(3, expiration);
        }
 
        String verifiedByID = entity.getVerifiedByID();
        if (verifiedByID != null) {
            stmt.bindString(4, verifiedByID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(5, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String issuedBy = entity.getIssuedBy();
        if (issuedBy != null) {
            stmt.bindString(7, issuedBy);
        }
 
        String dateVerified = entity.getDateVerified();
        if (dateVerified != null) {
            stmt.bindString(8, dateVerified);
        }
        stmt.bindLong(9, entity.getIdentificationStudentId());
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(10, tagString);
        }
 
        String dateIssued = entity.getDateIssued();
        if (dateIssued != null) {
            stmt.bindString(11, dateIssued);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(12, tenantID);
        }
        stmt.bindLong(13, entity.getSaveResultSaveResultId());
 
        String dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindString(14, dateLastModified);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(15, number);
        }
        stmt.bindLong(16, entity.getIdentificationGuardianId());
 
        Long syncBaseId = entity.getSyncBaseId();
        if (syncBaseId != null) {
            stmt.bindLong(17, syncBaseId);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(18, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(19, version);
        }
        stmt.bindLong(20, entity.getIdentificationPersonId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(21, id);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(22, dateCreated);
        }
 
        IdentificationType type = entity.getType();
        if (type != null) {
            stmt.bindLong(23, type.getValue());
        }
    }

    @Override
    protected void attachEntity(Identification entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20);
    }    

    /** @inheritdoc */
    @Override
    public Identification readEntity(Cursor cursor, int offset) {
        Identification entity = new Identification( //
            cursor.getLong(offset + 0), // personPersonId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // externalID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // expiration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // verifiedByID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // guid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // issuedBy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dateVerified
            cursor.getLong(offset + 8), // identificationStudentId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tagString
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dateIssued
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // tenantID
            cursor.getLong(offset + 12), // saveResultSaveResultId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dateLastModified
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // number
            cursor.getLong(offset + 15), // identificationGuardianId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // syncBaseId
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isDeleted
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // version
            cursor.getLong(offset + 19), // identificationPersonId
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // id
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dateCreated
            cursor.isNull(offset + 22) ? null : IdentificationType.fromInt(cursor.getLong(offset + 22)) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Identification entity, int offset) {
        entity.setPersonPersonId(cursor.getLong(offset + 0));
        entity.setExternalID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpiration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVerifiedByID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGuid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIssuedBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateVerified(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdentificationStudentId(cursor.getLong(offset + 8));
        entity.setTagString(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDateIssued(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTenantID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 12));
        entity.setDateLastModified(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNumber(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIdentificationGuardianId(cursor.getLong(offset + 15));
        entity.setSyncBaseId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setIsDeleted(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setVersion(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIdentificationPersonId(cursor.getLong(offset + 19));
        entity.setId(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setDateCreated(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setType(cursor.isNull(offset + 22) ? null : IdentificationType.fromInt(cursor.getLong(offset + 22)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Identification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Identification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "identification" to-many relationship of Person. */
    public List<Identification> _queryPerson_Identification(long identificationPersonId) {
        synchronized (this) {
            if (person_IdentificationQuery == null) {
                QueryBuilder<Identification> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdentificationPersonId.eq(null));
                person_IdentificationQuery = queryBuilder.build();
            }
        }
        Query<Identification> query = person_IdentificationQuery.forCurrentThread();
        query.setParameter(0, identificationPersonId);
        return query.list();
    }

    /** Internal query to resolve the "identification" to-many relationship of Student. */
    public List<Identification> _queryStudent_Identification(long identificationStudentId) {
        synchronized (this) {
            if (student_IdentificationQuery == null) {
                QueryBuilder<Identification> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdentificationStudentId.eq(null));
                student_IdentificationQuery = queryBuilder.build();
            }
        }
        Query<Identification> query = student_IdentificationQuery.forCurrentThread();
        query.setParameter(0, identificationStudentId);
        return query.list();
    }

    /** Internal query to resolve the "identification" to-many relationship of Guardian. */
    public List<Identification> _queryGuardian_Identification(long identificationGuardianId) {
        synchronized (this) {
            if (guardian_IdentificationQuery == null) {
                QueryBuilder<Identification> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdentificationGuardianId.eq(null));
                guardian_IdentificationQuery = queryBuilder.build();
            }
        }
        Query<Identification> query = guardian_IdentificationQuery.forCurrentThread();
        query.setParameter(0, identificationGuardianId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM IDENTIFICATION T");
            builder.append(" LEFT JOIN PERSON T0 ON T.'PERSON_PERSON_ID'=T0.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T1 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Identification loadCurrentDeep(Cursor cursor, boolean lock) {
        Identification entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Person person = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
         if(person != null) {
            entity.setPerson(person);
        }
        offset += daoSession.getPersonDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public Identification loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Identification> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Identification> list = new ArrayList<Identification>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Identification> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Identification> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
    @Override
    protected void onPreInsertEntity(Identification entity) {
        entity.insertBase(daoSession.getSyncBaseDao());
        entity.setSyncBaseId(entity.getSyncBaseId());
    }

    @Override
    protected void onPreLoadEntity(Identification entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreRefreshEntity(Identification entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreUpdateEntity(Identification entity) {
        entity.updateBase(daoSession.getSyncBaseDao());
    }

    @Override
    protected void onPreDeleteEntity(Identification entity) {
        entity.deleteBase(daoSession.getSyncBaseDao());
    }

    static {
        GreenSync.registerListTypeToken("Identification", new TypeToken<List<Identification>>(){}.getType());
        GreenSync.registerTypeToken("Identification", Identification.class);
    }

}
