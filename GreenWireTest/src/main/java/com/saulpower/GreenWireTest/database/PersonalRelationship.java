package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PERSONAL_RELATIONSHIP.
 */
public class PersonalRelationship extends SyncBase  {

    private String guid;
    private String externalID;
    private String toPersonID;
    private transient long fromPersonPersonId;
    private String dateLastModified;
    private transient long peopleFamilyId;
    private Boolean isPickupOK;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private Boolean showInPickupList;
    private Boolean isLegalGuardian;
    private Long id;
    private transient long relationshipsPersonId;
    private String dateCreated;
    private transient long toPersonPersonId;
    private String name;
    private String fromPersonID;
    private String tagString;
    private Boolean isEmergencyContact;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private transient long relationshipsStudentId;
    private Boolean isBillingPerson;
    private RelationshipType relationshipType;
    private transient long relationshipsGuardianId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PersonalRelationshipDao myDao;
    private Person fromPerson;
    private Long fromPerson__resolvedKey;
    private Person toPerson;
    private Long toPerson__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public PersonalRelationship() {
    }

    public PersonalRelationship(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    PersonalRelationship(String guid, String externalID, String toPersonID, long fromPersonPersonId, String dateLastModified, long peopleFamilyId, Boolean isPickupOK, Long syncBaseId, Boolean isDeleted, Integer version, Boolean showInPickupList, Boolean isLegalGuardian, Long id, long relationshipsPersonId, String dateCreated, long toPersonPersonId, String name, String fromPersonID, String tagString, Boolean isEmergencyContact, Long tenantID, long saveResultSaveResultId, long relationshipsStudentId, Boolean isBillingPerson, RelationshipType relationshipType, long relationshipsGuardianId) {
        this.guid = guid;
        this.externalID = externalID;
        this.toPersonID = toPersonID;
        this.fromPersonPersonId = fromPersonPersonId;
        this.dateLastModified = dateLastModified;
        this.peopleFamilyId = peopleFamilyId;
        this.isPickupOK = isPickupOK;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.showInPickupList = showInPickupList;
        this.isLegalGuardian = isLegalGuardian;
        this.id = id;
        this.relationshipsPersonId = relationshipsPersonId;
        this.dateCreated = dateCreated;
        this.toPersonPersonId = toPersonPersonId;
        this.name = name;
        this.fromPersonID = fromPersonID;
        this.tagString = tagString;
        this.isEmergencyContact = isEmergencyContact;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.relationshipsStudentId = relationshipsStudentId;
        this.isBillingPerson = isBillingPerson;
        this.relationshipType = relationshipType;
        this.relationshipsGuardianId = relationshipsGuardianId;
    }

    public PersonalRelationship(String guid, String externalID, String toPersonID, long fromPersonPersonId, String dateLastModified, long peopleFamilyId, Boolean isPickupOK, Boolean isDeleted, Integer version, Boolean showInPickupList, Boolean isLegalGuardian, Long id, long relationshipsPersonId, String dateCreated, long toPersonPersonId, String name, String fromPersonID, String tagString, Boolean isEmergencyContact, Long tenantID, long saveResultSaveResultId, long relationshipsStudentId, Boolean isBillingPerson, RelationshipType relationshipType, long relationshipsGuardianId) {
        this.guid = guid;
        this.externalID = externalID;
        this.toPersonID = toPersonID;
        this.fromPersonPersonId = fromPersonPersonId;
        this.dateLastModified = dateLastModified;
        this.peopleFamilyId = peopleFamilyId;
        this.isPickupOK = isPickupOK;
        this.isDeleted = isDeleted;
        this.version = version;
        this.showInPickupList = showInPickupList;
        this.isLegalGuardian = isLegalGuardian;
        this.id = id;
        this.relationshipsPersonId = relationshipsPersonId;
        this.dateCreated = dateCreated;
        this.toPersonPersonId = toPersonPersonId;
        this.name = name;
        this.fromPersonID = fromPersonID;
        this.tagString = tagString;
        this.isEmergencyContact = isEmergencyContact;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.relationshipsStudentId = relationshipsStudentId;
        this.isBillingPerson = isBillingPerson;
        this.relationshipType = relationshipType;
        this.relationshipsGuardianId = relationshipsGuardianId;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonalRelationshipDao() : null;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getToPersonID() {
        return toPersonID;
    }

    public void setToPersonID(String toPersonID) {
        this.toPersonID = toPersonID;
    }

    public long getFromPersonPersonId() {
        return fromPersonPersonId;
    }

    public void setFromPersonPersonId(long fromPersonPersonId) {
        this.fromPersonPersonId = fromPersonPersonId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getPeopleFamilyId() {
        return peopleFamilyId;
    }

    public void setPeopleFamilyId(long peopleFamilyId) {
        this.peopleFamilyId = peopleFamilyId;
    }

    public Boolean getIsPickupOK() {
        return isPickupOK;
    }

    public void setIsPickupOK(Boolean isPickupOK) {
        this.isPickupOK = isPickupOK;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Boolean getShowInPickupList() {
        return showInPickupList;
    }

    public void setShowInPickupList(Boolean showInPickupList) {
        this.showInPickupList = showInPickupList;
    }

    public Boolean getIsLegalGuardian() {
        return isLegalGuardian;
    }

    public void setIsLegalGuardian(Boolean isLegalGuardian) {
        this.isLegalGuardian = isLegalGuardian;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getRelationshipsPersonId() {
        return relationshipsPersonId;
    }

    public void setRelationshipsPersonId(long relationshipsPersonId) {
        this.relationshipsPersonId = relationshipsPersonId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getToPersonPersonId() {
        return toPersonPersonId;
    }

    public void setToPersonPersonId(long toPersonPersonId) {
        this.toPersonPersonId = toPersonPersonId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFromPersonID() {
        return fromPersonID;
    }

    public void setFromPersonID(String fromPersonID) {
        this.fromPersonID = fromPersonID;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Boolean getIsEmergencyContact() {
        return isEmergencyContact;
    }

    public void setIsEmergencyContact(Boolean isEmergencyContact) {
        this.isEmergencyContact = isEmergencyContact;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public long getRelationshipsStudentId() {
        return relationshipsStudentId;
    }

    public void setRelationshipsStudentId(long relationshipsStudentId) {
        this.relationshipsStudentId = relationshipsStudentId;
    }

    public Boolean getIsBillingPerson() {
        return isBillingPerson;
    }

    public void setIsBillingPerson(Boolean isBillingPerson) {
        this.isBillingPerson = isBillingPerson;
    }

    public RelationshipType getRelationshipType() {
        return relationshipType;
    }

    public void setRelationshipType(RelationshipType relationshipType) {
        this.relationshipType = relationshipType;
    }

    public long getRelationshipsGuardianId() {
        return relationshipsGuardianId;
    }

    public void setRelationshipsGuardianId(long relationshipsGuardianId) {
        this.relationshipsGuardianId = relationshipsGuardianId;
    }

    public enum RelationshipType implements DaoEnum {
        PARENT(0),
        CHILD(1),
        GRANDPARENT(2),
        GRANDCHILD(3),
        SIBLING(4),
        AUNTUNCLE(5),
        STEPPARENT(6),
        STEPCHILD(7),
        FOSTERPARENT(8),
        FOSTERCHILD(9),
        NIECENEPHIEW(10),
        DOCTOR(11),
        PATIENT(12),
        SPONSOR(13),
        SPONSORED(14),
        PRIMARYRELATIONSHIP(15),
        OTHER(16);

        private static final Map<Long, RelationshipType> intToTypeMap = new HashMap<Long, RelationshipType>();

        static {
            for (RelationshipType type : RelationshipType.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static RelationshipType fromInt(long i) {
            RelationshipType type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private RelationshipType(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Person getFromPerson() {
        long __key = this.fromPersonPersonId;
        if (fromPerson__resolvedKey == null || !fromPerson__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person fromPersonNew = targetDao.load(__key);
            synchronized (this) {
                fromPerson = fromPersonNew;
            	fromPerson__resolvedKey = __key;
            }
        }
        return fromPerson;
    }

    public void setFromPerson(Person fromPerson) {
        if (fromPerson == null) {
            throw new DaoException("To-one property 'fromPersonPersonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.fromPerson = fromPerson;
            fromPersonPersonId = fromPerson.getId();
            fromPerson__resolvedKey = fromPersonPersonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Person getToPerson() {
        long __key = this.toPersonPersonId;
        if (toPerson__resolvedKey == null || !toPerson__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person toPersonNew = targetDao.load(__key);
            synchronized (this) {
                toPerson = toPersonNew;
            	toPerson__resolvedKey = __key;
            }
        }
        return toPerson;
    }

    public void setToPerson(Person toPerson) {
        if (toPerson == null) {
            throw new DaoException("To-one property 'toPersonPersonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.toPerson = toPerson;
            toPersonPersonId = toPerson.getId();
            toPerson__resolvedKey = toPersonPersonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryPersonalRelationship_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}