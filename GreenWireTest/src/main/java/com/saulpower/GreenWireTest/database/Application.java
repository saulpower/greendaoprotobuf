package com.saulpower.GreenWireTest.database;

import java.util.List;
import com.saulpower.GreenWireTest.database.ApplicationStatus;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table APPLICATION.
 */
public class Application extends SyncBase  {

    private String guid;
    private String externalID;
    private ApplicationStatus applicationStatus;
    private transient long applicationsCenterId;
    private String reviewerID;
    private String dateLastModified;
    private String sourceID;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private String startDate;
    private Integer version;
    private transient long addressAddressId;
    private Long id;
    private transient long sourceApplicationSourceId;
    private transient long reviewerPersonId;
    private String dateCreated;
    private transient long campaignCampaignId;
    private String notes;
    private String emailAddress;
    private String name;
    private String campaignID;
    private Integer priority;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String phoneNumber;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ApplicationDao myDao;
    private Address address;
    private Long address__resolvedKey;
    private Person reviewer;
    private Long reviewer__resolvedKey;
    private ApplicationSource source;
    private Long source__resolvedKey;
    private Campaign campaign;
    private Long campaign__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<ApplicantChild> children;
    private List<CustomValue> customValues;

    public Application() {
    }

    public Application(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Application(String guid, String externalID, ApplicationStatus applicationStatus, long applicationsCenterId, String reviewerID, String dateLastModified, String sourceID, Long syncBaseId, Boolean isDeleted, String startDate, Integer version, long addressAddressId, Long id, long sourceApplicationSourceId, long reviewerPersonId, String dateCreated, long campaignCampaignId, String notes, String emailAddress, String name, String campaignID, Integer priority, String tagString, Long tenantID, long saveResultSaveResultId, String phoneNumber) {
        this.guid = guid;
        this.externalID = externalID;
        this.applicationStatus = applicationStatus;
        this.applicationsCenterId = applicationsCenterId;
        this.reviewerID = reviewerID;
        this.dateLastModified = dateLastModified;
        this.sourceID = sourceID;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.startDate = startDate;
        this.version = version;
        this.addressAddressId = addressAddressId;
        this.id = id;
        this.sourceApplicationSourceId = sourceApplicationSourceId;
        this.reviewerPersonId = reviewerPersonId;
        this.dateCreated = dateCreated;
        this.campaignCampaignId = campaignCampaignId;
        this.notes = notes;
        this.emailAddress = emailAddress;
        this.name = name;
        this.campaignID = campaignID;
        this.priority = priority;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.phoneNumber = phoneNumber;
    }

    public Application(String guid, String externalID, ApplicationStatus applicationStatus, long applicationsCenterId, String reviewerID, String dateLastModified, String sourceID, Boolean isDeleted, String startDate, Integer version, long addressAddressId, Long id, long sourceApplicationSourceId, long reviewerPersonId, String dateCreated, long campaignCampaignId, String notes, String emailAddress, String name, String campaignID, Integer priority, String tagString, Long tenantID, long saveResultSaveResultId, String phoneNumber) {
        this.guid = guid;
        this.externalID = externalID;
        this.applicationStatus = applicationStatus;
        this.applicationsCenterId = applicationsCenterId;
        this.reviewerID = reviewerID;
        this.dateLastModified = dateLastModified;
        this.sourceID = sourceID;
        this.isDeleted = isDeleted;
        this.startDate = startDate;
        this.version = version;
        this.addressAddressId = addressAddressId;
        this.id = id;
        this.sourceApplicationSourceId = sourceApplicationSourceId;
        this.reviewerPersonId = reviewerPersonId;
        this.dateCreated = dateCreated;
        this.campaignCampaignId = campaignCampaignId;
        this.notes = notes;
        this.emailAddress = emailAddress;
        this.name = name;
        this.campaignID = campaignID;
        this.priority = priority;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.phoneNumber = phoneNumber;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getApplicationDao() : null;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public ApplicationStatus getApplicationStatus() {
        return applicationStatus;
    }

    public void setApplicationStatus(ApplicationStatus applicationStatus) {
        this.applicationStatus = applicationStatus;
    }

    public long getApplicationsCenterId() {
        return applicationsCenterId;
    }

    public void setApplicationsCenterId(long applicationsCenterId) {
        this.applicationsCenterId = applicationsCenterId;
    }

    public String getReviewerID() {
        return reviewerID;
    }

    public void setReviewerID(String reviewerID) {
        this.reviewerID = reviewerID;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public String getSourceID() {
        return sourceID;
    }

    public void setSourceID(String sourceID) {
        this.sourceID = sourceID;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public long getAddressAddressId() {
        return addressAddressId;
    }

    public void setAddressAddressId(long addressAddressId) {
        this.addressAddressId = addressAddressId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSourceApplicationSourceId() {
        return sourceApplicationSourceId;
    }

    public void setSourceApplicationSourceId(long sourceApplicationSourceId) {
        this.sourceApplicationSourceId = sourceApplicationSourceId;
    }

    public long getReviewerPersonId() {
        return reviewerPersonId;
    }

    public void setReviewerPersonId(long reviewerPersonId) {
        this.reviewerPersonId = reviewerPersonId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getCampaignCampaignId() {
        return campaignCampaignId;
    }

    public void setCampaignCampaignId(long campaignCampaignId) {
        this.campaignCampaignId = campaignCampaignId;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCampaignID() {
        return campaignID;
    }

    public void setCampaignID(String campaignID) {
        this.campaignID = campaignID;
    }

    public Integer getPriority() {
        return priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    /** To-one relationship, resolved on first access. */
    public Address getAddress() {
        long __key = this.addressAddressId;
        if (address__resolvedKey == null || !address__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            Address addressNew = targetDao.load(__key);
            synchronized (this) {
                address = addressNew;
            	address__resolvedKey = __key;
            }
        }
        return address;
    }

    public void setAddress(Address address) {
        if (address == null) {
            throw new DaoException("To-one property 'addressAddressId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.address = address;
            addressAddressId = address.getId();
            address__resolvedKey = addressAddressId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Person getReviewer() {
        long __key = this.reviewerPersonId;
        if (reviewer__resolvedKey == null || !reviewer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person reviewerNew = targetDao.load(__key);
            synchronized (this) {
                reviewer = reviewerNew;
            	reviewer__resolvedKey = __key;
            }
        }
        return reviewer;
    }

    public void setReviewer(Person reviewer) {
        if (reviewer == null) {
            throw new DaoException("To-one property 'reviewerPersonId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.reviewer = reviewer;
            reviewerPersonId = reviewer.getId();
            reviewer__resolvedKey = reviewerPersonId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ApplicationSource getSource() {
        long __key = this.sourceApplicationSourceId;
        if (source__resolvedKey == null || !source__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplicationSourceDao targetDao = daoSession.getApplicationSourceDao();
            ApplicationSource sourceNew = targetDao.load(__key);
            synchronized (this) {
                source = sourceNew;
            	source__resolvedKey = __key;
            }
        }
        return source;
    }

    public void setSource(ApplicationSource source) {
        if (source == null) {
            throw new DaoException("To-one property 'sourceApplicationSourceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.source = source;
            sourceApplicationSourceId = source.getId();
            source__resolvedKey = sourceApplicationSourceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Campaign getCampaign() {
        long __key = this.campaignCampaignId;
        if (campaign__resolvedKey == null || !campaign__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CampaignDao targetDao = daoSession.getCampaignDao();
            Campaign campaignNew = targetDao.load(__key);
            synchronized (this) {
                campaign = campaignNew;
            	campaign__resolvedKey = __key;
            }
        }
        return campaign;
    }

    public void setCampaign(Campaign campaign) {
        if (campaign == null) {
            throw new DaoException("To-one property 'campaignCampaignId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.campaign = campaign;
            campaignCampaignId = campaign.getId();
            campaign__resolvedKey = campaignCampaignId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ApplicantChild> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplicantChildDao targetDao = daoSession.getApplicantChildDao();
            List<ApplicantChild> childrenNew = targetDao._queryApplication_Children(id);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryApplication_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}