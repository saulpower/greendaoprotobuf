package com.saulpower.GreenWireTest.database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.saulpower.GreenWireTest.database.SyncBaseDao;
import com.saulpower.GreenWireTest.database.SaveResultDao;
import com.saulpower.GreenWireTest.database.CustomValueDao;
import com.saulpower.GreenWireTest.database.AddressDao;
import com.saulpower.GreenWireTest.database.AttachmentDao;
import com.saulpower.GreenWireTest.database.PersonalRelationshipDao;
import com.saulpower.GreenWireTest.database.NoteDao;
import com.saulpower.GreenWireTest.database.PickupAuthorizationDao;
import com.saulpower.GreenWireTest.database.IdentificationDao;
import com.saulpower.GreenWireTest.database.PhoneNumberDao;
import com.saulpower.GreenWireTest.database.OUTypeDao;
import com.saulpower.GreenWireTest.database.EmploymentRoleDao;
import com.saulpower.GreenWireTest.database.EmploymentStatusDao;
import com.saulpower.GreenWireTest.database.DepartmentDao;
import com.saulpower.GreenWireTest.database.PayrollDefinitionDao;
import com.saulpower.GreenWireTest.database.EmployeeFileDao;
import com.saulpower.GreenWireTest.database.PayPeriodDao;
import com.saulpower.GreenWireTest.database.ApplicationSourceDao;
import com.saulpower.GreenWireTest.database.LedgerGroupDao;
import com.saulpower.GreenWireTest.database.LedgerItemDao;
import com.saulpower.GreenWireTest.database.LedgerAccountDao;
import com.saulpower.GreenWireTest.database.HolidayDao;
import com.saulpower.GreenWireTest.database.ValueListItemDao;
import com.saulpower.GreenWireTest.database.CustomFieldDao;
import com.saulpower.GreenWireTest.database.RoleBaseDao;
import com.saulpower.GreenWireTest.database.DeviceDao;
import com.saulpower.GreenWireTest.database.AuthorizedPersonDao;
import com.saulpower.GreenWireTest.database.AssociationDao;
import com.saulpower.GreenWireTest.database.OUBaseDao;
import com.saulpower.GreenWireTest.database.OUDao;
import com.saulpower.GreenWireTest.database.SchoolDao;
import com.saulpower.GreenWireTest.database.CheckInDao;
import com.saulpower.GreenWireTest.database.CheckOutDao;
import com.saulpower.GreenWireTest.database.WithdrawalCodeDao;
import com.saulpower.GreenWireTest.database.SecurityQuestionDao;
import com.saulpower.GreenWireTest.database.VehicleDao;
import com.saulpower.GreenWireTest.database.FamilyDao;
import com.saulpower.GreenWireTest.database.MedicalProviderDao;
import com.saulpower.GreenWireTest.database.ActivityDao;
import com.saulpower.GreenWireTest.database.ClaszDao;
import com.saulpower.GreenWireTest.database.ClassAssignmentDao;
import com.saulpower.GreenWireTest.database.AllergyDao;
import com.saulpower.GreenWireTest.database.ImmunizationScheduleDao;
import com.saulpower.GreenWireTest.database.ImmunizationDefinitionDao;
import com.saulpower.GreenWireTest.database.ImmunizationDao;
import com.saulpower.GreenWireTest.database.JournalEntryCommentDao;
import com.saulpower.GreenWireTest.database.JournalEntryDao;
import com.saulpower.GreenWireTest.database.StudentDao;
import com.saulpower.GreenWireTest.database.PersonDao;
import com.saulpower.GreenWireTest.database.ApplicantChildDao;
import com.saulpower.GreenWireTest.database.CampaignDao;
import com.saulpower.GreenWireTest.database.ApplicationDao;
import com.saulpower.GreenWireTest.database.GuardianDao;
import com.saulpower.GreenWireTest.database.CenterDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        SyncBaseDao.createTable(db, ifNotExists);
        SaveResultDao.createTable(db, ifNotExists);
        CustomValueDao.createTable(db, ifNotExists);
        AddressDao.createTable(db, ifNotExists);
        AttachmentDao.createTable(db, ifNotExists);
        PersonalRelationshipDao.createTable(db, ifNotExists);
        NoteDao.createTable(db, ifNotExists);
        PickupAuthorizationDao.createTable(db, ifNotExists);
        IdentificationDao.createTable(db, ifNotExists);
        PhoneNumberDao.createTable(db, ifNotExists);
        OUTypeDao.createTable(db, ifNotExists);
        EmploymentRoleDao.createTable(db, ifNotExists);
        EmploymentStatusDao.createTable(db, ifNotExists);
        DepartmentDao.createTable(db, ifNotExists);
        PayrollDefinitionDao.createTable(db, ifNotExists);
        EmployeeFileDao.createTable(db, ifNotExists);
        PayPeriodDao.createTable(db, ifNotExists);
        ApplicationSourceDao.createTable(db, ifNotExists);
        LedgerGroupDao.createTable(db, ifNotExists);
        LedgerItemDao.createTable(db, ifNotExists);
        LedgerAccountDao.createTable(db, ifNotExists);
        HolidayDao.createTable(db, ifNotExists);
        ValueListItemDao.createTable(db, ifNotExists);
        CustomFieldDao.createTable(db, ifNotExists);
        RoleBaseDao.createTable(db, ifNotExists);
        DeviceDao.createTable(db, ifNotExists);
        AuthorizedPersonDao.createTable(db, ifNotExists);
        AssociationDao.createTable(db, ifNotExists);
        OUBaseDao.createTable(db, ifNotExists);
        OUDao.createTable(db, ifNotExists);
        SchoolDao.createTable(db, ifNotExists);
        CheckInDao.createTable(db, ifNotExists);
        CheckOutDao.createTable(db, ifNotExists);
        WithdrawalCodeDao.createTable(db, ifNotExists);
        SecurityQuestionDao.createTable(db, ifNotExists);
        VehicleDao.createTable(db, ifNotExists);
        FamilyDao.createTable(db, ifNotExists);
        MedicalProviderDao.createTable(db, ifNotExists);
        ActivityDao.createTable(db, ifNotExists);
        ClaszDao.createTable(db, ifNotExists);
        ClassAssignmentDao.createTable(db, ifNotExists);
        AllergyDao.createTable(db, ifNotExists);
        ImmunizationScheduleDao.createTable(db, ifNotExists);
        ImmunizationDefinitionDao.createTable(db, ifNotExists);
        ImmunizationDao.createTable(db, ifNotExists);
        JournalEntryCommentDao.createTable(db, ifNotExists);
        JournalEntryDao.createTable(db, ifNotExists);
        StudentDao.createTable(db, ifNotExists);
        PersonDao.createTable(db, ifNotExists);
        ApplicantChildDao.createTable(db, ifNotExists);
        CampaignDao.createTable(db, ifNotExists);
        ApplicationDao.createTable(db, ifNotExists);
        GuardianDao.createTable(db, ifNotExists);
        CenterDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        SyncBaseDao.dropTable(db, ifExists);
        SaveResultDao.dropTable(db, ifExists);
        CustomValueDao.dropTable(db, ifExists);
        AddressDao.dropTable(db, ifExists);
        AttachmentDao.dropTable(db, ifExists);
        PersonalRelationshipDao.dropTable(db, ifExists);
        NoteDao.dropTable(db, ifExists);
        PickupAuthorizationDao.dropTable(db, ifExists);
        IdentificationDao.dropTable(db, ifExists);
        PhoneNumberDao.dropTable(db, ifExists);
        OUTypeDao.dropTable(db, ifExists);
        EmploymentRoleDao.dropTable(db, ifExists);
        EmploymentStatusDao.dropTable(db, ifExists);
        DepartmentDao.dropTable(db, ifExists);
        PayrollDefinitionDao.dropTable(db, ifExists);
        EmployeeFileDao.dropTable(db, ifExists);
        PayPeriodDao.dropTable(db, ifExists);
        ApplicationSourceDao.dropTable(db, ifExists);
        LedgerGroupDao.dropTable(db, ifExists);
        LedgerItemDao.dropTable(db, ifExists);
        LedgerAccountDao.dropTable(db, ifExists);
        HolidayDao.dropTable(db, ifExists);
        ValueListItemDao.dropTable(db, ifExists);
        CustomFieldDao.dropTable(db, ifExists);
        RoleBaseDao.dropTable(db, ifExists);
        DeviceDao.dropTable(db, ifExists);
        AuthorizedPersonDao.dropTable(db, ifExists);
        AssociationDao.dropTable(db, ifExists);
        OUBaseDao.dropTable(db, ifExists);
        OUDao.dropTable(db, ifExists);
        SchoolDao.dropTable(db, ifExists);
        CheckInDao.dropTable(db, ifExists);
        CheckOutDao.dropTable(db, ifExists);
        WithdrawalCodeDao.dropTable(db, ifExists);
        SecurityQuestionDao.dropTable(db, ifExists);
        VehicleDao.dropTable(db, ifExists);
        FamilyDao.dropTable(db, ifExists);
        MedicalProviderDao.dropTable(db, ifExists);
        ActivityDao.dropTable(db, ifExists);
        ClaszDao.dropTable(db, ifExists);
        ClassAssignmentDao.dropTable(db, ifExists);
        AllergyDao.dropTable(db, ifExists);
        ImmunizationScheduleDao.dropTable(db, ifExists);
        ImmunizationDefinitionDao.dropTable(db, ifExists);
        ImmunizationDao.dropTable(db, ifExists);
        JournalEntryCommentDao.dropTable(db, ifExists);
        JournalEntryDao.dropTable(db, ifExists);
        StudentDao.dropTable(db, ifExists);
        PersonDao.dropTable(db, ifExists);
        ApplicantChildDao.dropTable(db, ifExists);
        CampaignDao.dropTable(db, ifExists);
        ApplicationDao.dropTable(db, ifExists);
        GuardianDao.dropTable(db, ifExists);
        CenterDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(SyncBaseDao.class);
        registerDaoClass(SaveResultDao.class);
        registerDaoClass(CustomValueDao.class);
        registerDaoClass(AddressDao.class);
        registerDaoClass(AttachmentDao.class);
        registerDaoClass(PersonalRelationshipDao.class);
        registerDaoClass(NoteDao.class);
        registerDaoClass(PickupAuthorizationDao.class);
        registerDaoClass(IdentificationDao.class);
        registerDaoClass(PhoneNumberDao.class);
        registerDaoClass(OUTypeDao.class);
        registerDaoClass(EmploymentRoleDao.class);
        registerDaoClass(EmploymentStatusDao.class);
        registerDaoClass(DepartmentDao.class);
        registerDaoClass(PayrollDefinitionDao.class);
        registerDaoClass(EmployeeFileDao.class);
        registerDaoClass(PayPeriodDao.class);
        registerDaoClass(ApplicationSourceDao.class);
        registerDaoClass(LedgerGroupDao.class);
        registerDaoClass(LedgerItemDao.class);
        registerDaoClass(LedgerAccountDao.class);
        registerDaoClass(HolidayDao.class);
        registerDaoClass(ValueListItemDao.class);
        registerDaoClass(CustomFieldDao.class);
        registerDaoClass(RoleBaseDao.class);
        registerDaoClass(DeviceDao.class);
        registerDaoClass(AuthorizedPersonDao.class);
        registerDaoClass(AssociationDao.class);
        registerDaoClass(OUBaseDao.class);
        registerDaoClass(OUDao.class);
        registerDaoClass(SchoolDao.class);
        registerDaoClass(CheckInDao.class);
        registerDaoClass(CheckOutDao.class);
        registerDaoClass(WithdrawalCodeDao.class);
        registerDaoClass(SecurityQuestionDao.class);
        registerDaoClass(VehicleDao.class);
        registerDaoClass(FamilyDao.class);
        registerDaoClass(MedicalProviderDao.class);
        registerDaoClass(ActivityDao.class);
        registerDaoClass(ClaszDao.class);
        registerDaoClass(ClassAssignmentDao.class);
        registerDaoClass(AllergyDao.class);
        registerDaoClass(ImmunizationScheduleDao.class);
        registerDaoClass(ImmunizationDefinitionDao.class);
        registerDaoClass(ImmunizationDao.class);
        registerDaoClass(JournalEntryCommentDao.class);
        registerDaoClass(JournalEntryDao.class);
        registerDaoClass(StudentDao.class);
        registerDaoClass(PersonDao.class);
        registerDaoClass(ApplicantChildDao.class);
        registerDaoClass(CampaignDao.class);
        registerDaoClass(ApplicationDao.class);
        registerDaoClass(GuardianDao.class);
        registerDaoClass(CenterDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
