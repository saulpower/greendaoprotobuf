package com.saulpower.GreenWireTest.database;

import java.util.List;
import com.saulpower.GreenWireTest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table AUTHORIZED_PERSON.
 */
public class AuthorizedPerson {

    private String socialSecurity;
    private String prefix;
    private String externalID;
    private String name;
    private String guid;
    private Long birthDate;
    private String suffix;
    private String emailAddressString;
    private String tagString;
    private Long tenantID;
    private String preferredName;
    private transient long saveResultSaveResultId;
    private Long dateLastModified;
    private transient long currentDeviceDeviceId;
    private String middleName;
    private String firstName;
    private Boolean isDeleted;
    private Integer version;
    private String emailAddresses;
    private Long id;
    private Long dateCreated;
    private Boolean isEnabled;
    private String lastName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AuthorizedPersonDao myDao;

    private Device currentDevice;
    private Long currentDevice__resolvedKey;

    private SaveResult saveResult;
    private Long saveResult__resolvedKey;

    private List<Association> associations;
    private List<PhoneNumber> phoneNumbers;
    private List<CustomValue> customValues;

    public AuthorizedPerson() {
    }

    public AuthorizedPerson(Long id) {
        this.id = id;
    }

    public AuthorizedPerson(String socialSecurity, String prefix, String externalID, String name, String guid, Long birthDate, String suffix, String emailAddressString, String tagString, Long tenantID, String preferredName, long saveResultSaveResultId, Long dateLastModified, long currentDeviceDeviceId, String middleName, String firstName, Boolean isDeleted, Integer version, String emailAddresses, Long id, Long dateCreated, Boolean isEnabled, String lastName) {
        this.socialSecurity = socialSecurity;
        this.prefix = prefix;
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.birthDate = birthDate;
        this.suffix = suffix;
        this.emailAddressString = emailAddressString;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.preferredName = preferredName;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.currentDeviceDeviceId = currentDeviceDeviceId;
        this.middleName = middleName;
        this.firstName = firstName;
        this.isDeleted = isDeleted;
        this.version = version;
        this.emailAddresses = emailAddresses;
        this.id = id;
        this.dateCreated = dateCreated;
        this.isEnabled = isEnabled;
        this.lastName = lastName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAuthorizedPersonDao() : null;
    }

    public String getSocialSecurity() {
        return socialSecurity;
    }

    public void setSocialSecurity(String socialSecurity) {
        this.socialSecurity = socialSecurity;
    }

    public String getPrefix() {
        return prefix;
    }

    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public Long getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Long birthDate) {
        this.birthDate = birthDate;
    }

    public String getSuffix() {
        return suffix;
    }

    public void setSuffix(String suffix) {
        this.suffix = suffix;
    }

    public String getEmailAddressString() {
        return emailAddressString;
    }

    public void setEmailAddressString(String emailAddressString) {
        this.emailAddressString = emailAddressString;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public String getPreferredName() {
        return preferredName;
    }

    public void setPreferredName(String preferredName) {
        this.preferredName = preferredName;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public Long getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(Long dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getCurrentDeviceDeviceId() {
        return currentDeviceDeviceId;
    }

    public void setCurrentDeviceDeviceId(long currentDeviceDeviceId) {
        this.currentDeviceDeviceId = currentDeviceDeviceId;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getEmailAddresses() {
        return emailAddresses;
    }

    public void setEmailAddresses(String emailAddresses) {
        this.emailAddresses = emailAddresses;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /** To-one relationship, resolved on first access. */
    public Device getCurrentDevice() {
        long __key = this.currentDeviceDeviceId;
        if (currentDevice__resolvedKey == null || !currentDevice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeviceDao targetDao = daoSession.getDeviceDao();
            Device currentDeviceNew = targetDao.load(__key);
            synchronized (this) {
                currentDevice = currentDeviceNew;
            	currentDevice__resolvedKey = __key;
            }
        }
        return currentDevice;
    }

    public void setCurrentDevice(Device currentDevice) {
        if (currentDevice == null) {
            throw new DaoException("To-one property 'currentDeviceDeviceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.currentDevice = currentDevice;
            currentDeviceDeviceId = currentDevice.getId();
            currentDevice__resolvedKey = currentDeviceDeviceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Association> getAssociations() {
        if (associations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssociationDao targetDao = daoSession.getAssociationDao();
            List<Association> associationsNew = targetDao._queryAuthorizedPerson_Associations(id);
            synchronized (this) {
                if(associations == null) {
                    associations = associationsNew;
                }
            }
        }
        return associations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssociations() {
        associations = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PhoneNumber> getPhoneNumbers() {
        if (phoneNumbers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneNumberDao targetDao = daoSession.getPhoneNumberDao();
            List<PhoneNumber> phoneNumbersNew = targetDao._queryAuthorizedPerson_PhoneNumbers(id);
            synchronized (this) {
                if(phoneNumbers == null) {
                    phoneNumbers = phoneNumbersNew;
                }
            }
        }
        return phoneNumbers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhoneNumbers() {
        phoneNumbers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryAuthorizedPerson_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
