package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ROLE_BASE.
 */
public class RoleBase extends SyncBase  {

    private String externalID;
    private String name;
    private String guid;
    private transient long rolesCenterId;
    private Boolean canManageOUs;
    private Boolean isService;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private Boolean isManager;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private Boolean isAdmin;
    private Long id;
    private transient long rolesOUId;
    private String dateCreated;
    private Boolean canManageUsers;
    private Boolean isSales;
    private Boolean isActive;
    private transient long rolesOUBaseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoleBaseDao myDao;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public RoleBase() {
    }

    public RoleBase(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    RoleBase(String externalID, String name, String guid, long rolesCenterId, Boolean canManageOUs, Boolean isService, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, Boolean isManager, Long syncBaseId, Boolean isDeleted, Integer version, Boolean isAdmin, Long id, long rolesOUId, String dateCreated, Boolean canManageUsers, Boolean isSales, Boolean isActive, long rolesOUBaseId) {
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.rolesCenterId = rolesCenterId;
        this.canManageOUs = canManageOUs;
        this.isService = isService;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.isManager = isManager;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.isAdmin = isAdmin;
        this.id = id;
        this.rolesOUId = rolesOUId;
        this.dateCreated = dateCreated;
        this.canManageUsers = canManageUsers;
        this.isSales = isSales;
        this.isActive = isActive;
        this.rolesOUBaseId = rolesOUBaseId;
    }

    public RoleBase(String externalID, String name, String guid, long rolesCenterId, Boolean canManageOUs, Boolean isService, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, Boolean isManager, Boolean isDeleted, Integer version, Boolean isAdmin, Long id, long rolesOUId, String dateCreated, Boolean canManageUsers, Boolean isSales, Boolean isActive, long rolesOUBaseId) {
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.rolesCenterId = rolesCenterId;
        this.canManageOUs = canManageOUs;
        this.isService = isService;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.isManager = isManager;
        this.isDeleted = isDeleted;
        this.version = version;
        this.isAdmin = isAdmin;
        this.id = id;
        this.rolesOUId = rolesOUId;
        this.dateCreated = dateCreated;
        this.canManageUsers = canManageUsers;
        this.isSales = isSales;
        this.isActive = isActive;
        this.rolesOUBaseId = rolesOUBaseId;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoleBaseDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public long getRolesCenterId() {
        return rolesCenterId;
    }

    public void setRolesCenterId(long rolesCenterId) {
        this.rolesCenterId = rolesCenterId;
    }

    public Boolean getCanManageOUs() {
        return canManageOUs;
    }

    public void setCanManageOUs(Boolean canManageOUs) {
        this.canManageOUs = canManageOUs;
    }

    public Boolean getIsService() {
        return isService;
    }

    public void setIsService(Boolean isService) {
        this.isService = isService;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public Boolean getIsManager() {
        return isManager;
    }

    public void setIsManager(Boolean isManager) {
        this.isManager = isManager;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Boolean getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(Boolean isAdmin) {
        this.isAdmin = isAdmin;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getRolesOUId() {
        return rolesOUId;
    }

    public void setRolesOUId(long rolesOUId) {
        this.rolesOUId = rolesOUId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Boolean getCanManageUsers() {
        return canManageUsers;
    }

    public void setCanManageUsers(Boolean canManageUsers) {
        this.canManageUsers = canManageUsers;
    }

    public Boolean getIsSales() {
        return isSales;
    }

    public void setIsSales(Boolean isSales) {
        this.isSales = isSales;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public long getRolesOUBaseId() {
        return rolesOUBaseId;
    }

    public void setRolesOUBaseId(long rolesOUBaseId) {
        this.rolesOUBaseId = rolesOUBaseId;
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryRoleBase_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}