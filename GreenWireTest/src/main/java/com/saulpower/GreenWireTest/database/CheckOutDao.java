package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.CheckOut;
import com.saulpower.GreenWireTest.database.CheckIn.TimeCardCaptureMethod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHECK_OUT.
*/
public class CheckOutDao extends AbstractDao<CheckOut, Long> {

    public static final String TABLENAME = "CHECK_OUT";

    /**
     * Properties of entity CheckOut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExternalID = new Property(0, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CheckOutsStudentId = new Property(3, long.class, "checkOutsStudentId", false, "CHECK_OUTS_STUDENT_ID");
        public final static Property TagString = new Property(4, String.class, "tagString", false, "TAG_STRING");
        public final static Property TenantID = new Property(5, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(6, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(7, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property Latitude = new Property(8, Float.class, "latitude", false, "LATITUDE");
        public final static Property CaptureMethod = new Property(9, TimeCardCaptureMethod.class, "captureMethod", false, "CAPTURE_METHOD");
        public final static Property ApproverID = new Property(10, String.class, "approverID", false, "APPROVER_ID");
        public final static Property IsDeleted = new Property(11, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(12, Integer.class, "version", false, "VERSION");
        public final static Property Id = new Property(13, Long.class, "id", true, "_id");
        public final static Property DateCreated = new Property(14, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property Longitude = new Property(15, Float.class, "longitude", false, "LONGITUDE");
    };

    private DaoSession daoSession;

    private Query<CheckOut> student_CheckOutsQuery;

    public CheckOutDao(DaoConfig config) {
        super(config);
    }
    
    public CheckOutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHECK_OUT' (" + //
                "'EXTERNAL_ID' TEXT," + // 0: externalID
                "'GUID' TEXT," + // 1: guid
                "'NAME' TEXT," + // 2: name
                "'CHECK_OUTS_STUDENT_ID' INTEGER NOT NULL ," + // 3: checkOutsStudentId
                "'TAG_STRING' TEXT," + // 4: tagString
                "'TENANT_ID' INTEGER," + // 5: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 6: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' INTEGER," + // 7: dateLastModified
                "'LATITUDE' REAL," + // 8: latitude
                "'CAPTURE_METHOD' INTEGER," + // 9: captureMethod
                "'APPROVER_ID' TEXT," + // 10: approverID
                "'IS_DELETED' INTEGER," + // 11: isDeleted
                "'VERSION' INTEGER," + // 12: version
                "'_id' INTEGER PRIMARY KEY ," + // 13: id
                "'DATE_CREATED' INTEGER," + // 14: dateCreated
                "'LONGITUDE' REAL);"); // 15: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHECK_OUT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CheckOut entity) {
        stmt.clearBindings();
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(1, externalID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getCheckOutsStudentId());
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(5, tagString);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(6, tenantID);
        }
        stmt.bindLong(7, entity.getSaveResultSaveResultId());
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(8, dateLastModified);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        TimeCardCaptureMethod captureMethod = entity.getCaptureMethod();
        if (captureMethod != null) {
            stmt.bindLong(10, captureMethod.getValue());
        }
 
        String approverID = entity.getApproverID();
        if (approverID != null) {
            stmt.bindString(11, approverID);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(12, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(13, version);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(14, id);
        }
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(15, dateCreated);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(16, longitude);
        }
    }

    @Override
    protected void attachEntity(CheckOut entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13);
    }    

    /** @inheritdoc */
    @Override
    public CheckOut readEntity(Cursor cursor, int offset) {
        CheckOut entity = new CheckOut( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // externalID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // checkOutsStudentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tagString
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // tenantID
            cursor.getLong(offset + 6), // saveResultSaveResultId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // dateLastModified
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : TimeCardCaptureMethod.fromInt(cursor.getLong(offset + 9)), // captureMethod
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // approverID
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isDeleted
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // version
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // id
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // dateCreated
            cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15) // longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CheckOut entity, int offset) {
        entity.setExternalID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckOutsStudentId(cursor.getLong(offset + 3));
        entity.setTagString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTenantID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 6));
        entity.setDateLastModified(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setCaptureMethod(cursor.isNull(offset + 9) ? null : TimeCardCaptureMethod.fromInt(cursor.getLong(offset + 9)));
        entity.setApproverID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsDeleted(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setDateCreated(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setLongitude(cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CheckOut entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CheckOut entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "checkOuts" to-many relationship of Student. */
    public List<CheckOut> _queryStudent_CheckOuts(long checkOutsStudentId) {
        synchronized (this) {
            if (student_CheckOutsQuery == null) {
                QueryBuilder<CheckOut> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CheckOutsStudentId.eq(null));
                student_CheckOutsQuery = queryBuilder.build();
            }
        }
        Query<CheckOut> query = student_CheckOutsQuery.forCurrentThread();
        query.setParameter(0, checkOutsStudentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM CHECK_OUT T");
            builder.append(" LEFT JOIN SAVE_RESULT T0 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CheckOut loadCurrentDeep(Cursor cursor, boolean lock) {
        CheckOut entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public CheckOut loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CheckOut> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CheckOut> list = new ArrayList<CheckOut>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CheckOut> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CheckOut> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
