package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.sync.GreenSync;
import com.google.gson.reflect.TypeToken;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.MedicalProvider;
import com.saulpower.GreenWireTest.database.MedicalProvider.MedicalProviderType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEDICAL_PROVIDER.
*/
public class MedicalProviderDao extends AbstractDao<MedicalProvider, Long> {

    public static final String TABLENAME = "MEDICAL_PROVIDER";

    /**
     * Properties of entity MedicalProvider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExternalID = new Property(0, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property FamilyFamilyId = new Property(3, long.class, "familyFamilyId", false, "FAMILY_FAMILY_ID");
        public final static Property TagString = new Property(4, String.class, "tagString", false, "TAG_STRING");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property TenantID = new Property(6, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(7, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(8, String.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property MedicalProvidersFamilyId = new Property(9, long.class, "medicalProvidersFamilyId", false, "MEDICAL_PROVIDERS_FAMILY_ID");
        public final static Property PolicyNumber = new Property(10, String.class, "policyNumber", false, "POLICY_NUMBER");
        public final static Property SyncBaseId = new Property(11, Long.class, "syncBaseId", false, "SYNC_BASE_ID");
        public final static Property PhoneNumber = new Property(12, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property IsDeleted = new Property(13, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(14, Integer.class, "version", false, "VERSION");
        public final static Property ClinicName = new Property(15, String.class, "clinicName", false, "CLINIC_NAME");
        public final static Property Id = new Property(16, Long.class, "id", true, "_id");
        public final static Property MedicalProvidersStudentId = new Property(17, long.class, "medicalProvidersStudentId", false, "MEDICAL_PROVIDERS_STUDENT_ID");
        public final static Property InsuranceProvider = new Property(18, String.class, "insuranceProvider", false, "INSURANCE_PROVIDER");
        public final static Property StudentStudentId = new Property(19, long.class, "studentStudentId", false, "STUDENT_STUDENT_ID");
        public final static Property DateCreated = new Property(20, String.class, "dateCreated", false, "DATE_CREATED");
        public final static Property Type = new Property(21, MedicalProviderType.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;

    private Query<MedicalProvider> student_MedicalProvidersQuery;

    private Query<MedicalProvider> family_MedicalProvidersQuery;

    public MedicalProviderDao(DaoConfig config) {
        super(config);
    }
    
    public MedicalProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEDICAL_PROVIDER' (" + //
                "'EXTERNAL_ID' TEXT," + // 0: externalID
                "'GUID' TEXT," + // 1: guid
                "'NAME' TEXT," + // 2: name
                "'FAMILY_FAMILY_ID' INTEGER NOT NULL ," + // 3: familyFamilyId
                "'TAG_STRING' TEXT," + // 4: tagString
                "'ADDRESS' TEXT," + // 5: address
                "'TENANT_ID' INTEGER," + // 6: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 7: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' TEXT," + // 8: dateLastModified
                "'MEDICAL_PROVIDERS_FAMILY_ID' INTEGER NOT NULL ," + // 9: medicalProvidersFamilyId
                "'POLICY_NUMBER' TEXT," + // 10: policyNumber
                "'SYNC_BASE_ID' INTEGER REFERENCES 'SYNC_BASE'('SYNC_BASE_ID') ," + // 11: syncBaseId
                "'PHONE_NUMBER' TEXT," + // 12: phoneNumber
                "'IS_DELETED' INTEGER," + // 13: isDeleted
                "'VERSION' INTEGER," + // 14: version
                "'CLINIC_NAME' TEXT," + // 15: clinicName
                "'_id' INTEGER PRIMARY KEY ," + // 16: id
                "'MEDICAL_PROVIDERS_STUDENT_ID' INTEGER NOT NULL ," + // 17: medicalProvidersStudentId
                "'INSURANCE_PROVIDER' TEXT," + // 18: insuranceProvider
                "'STUDENT_STUDENT_ID' INTEGER NOT NULL ," + // 19: studentStudentId
                "'DATE_CREATED' TEXT," + // 20: dateCreated
                "'TYPE' INTEGER);"); // 21: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEDICAL_PROVIDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MedicalProvider entity) {
        stmt.clearBindings();
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(1, externalID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getFamilyFamilyId());
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(5, tagString);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(7, tenantID);
        }
        stmt.bindLong(8, entity.getSaveResultSaveResultId());
 
        String dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindString(9, dateLastModified);
        }
        stmt.bindLong(10, entity.getMedicalProvidersFamilyId());
 
        String policyNumber = entity.getPolicyNumber();
        if (policyNumber != null) {
            stmt.bindString(11, policyNumber);
        }
 
        Long syncBaseId = entity.getSyncBaseId();
        if (syncBaseId != null) {
            stmt.bindLong(12, syncBaseId);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(13, phoneNumber);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(14, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(15, version);
        }
 
        String clinicName = entity.getClinicName();
        if (clinicName != null) {
            stmt.bindString(16, clinicName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(17, id);
        }
        stmt.bindLong(18, entity.getMedicalProvidersStudentId());
 
        String insuranceProvider = entity.getInsuranceProvider();
        if (insuranceProvider != null) {
            stmt.bindString(19, insuranceProvider);
        }
        stmt.bindLong(20, entity.getStudentStudentId());
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(21, dateCreated);
        }
 
        MedicalProviderType type = entity.getType();
        if (type != null) {
            stmt.bindLong(22, type.getValue());
        }
    }

    @Override
    protected void attachEntity(MedicalProvider entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16);
    }    

    /** @inheritdoc */
    @Override
    public MedicalProvider readEntity(Cursor cursor, int offset) {
        MedicalProvider entity = new MedicalProvider( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // externalID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // familyFamilyId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tagString
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // tenantID
            cursor.getLong(offset + 7), // saveResultSaveResultId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateLastModified
            cursor.getLong(offset + 9), // medicalProvidersFamilyId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // policyNumber
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // syncBaseId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phoneNumber
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isDeleted
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // version
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // clinicName
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // id
            cursor.getLong(offset + 17), // medicalProvidersStudentId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // insuranceProvider
            cursor.getLong(offset + 19), // studentStudentId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dateCreated
            cursor.isNull(offset + 21) ? null : MedicalProviderType.fromInt(cursor.getLong(offset + 21)) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MedicalProvider entity, int offset) {
        entity.setExternalID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFamilyFamilyId(cursor.getLong(offset + 3));
        entity.setTagString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTenantID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 7));
        entity.setDateLastModified(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMedicalProvidersFamilyId(cursor.getLong(offset + 9));
        entity.setPolicyNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSyncBaseId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setPhoneNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsDeleted(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setVersion(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setClinicName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setMedicalProvidersStudentId(cursor.getLong(offset + 17));
        entity.setInsuranceProvider(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStudentStudentId(cursor.getLong(offset + 19));
        entity.setDateCreated(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setType(cursor.isNull(offset + 21) ? null : MedicalProviderType.fromInt(cursor.getLong(offset + 21)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MedicalProvider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MedicalProvider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "medicalProviders" to-many relationship of Student. */
    public List<MedicalProvider> _queryStudent_MedicalProviders(long medicalProvidersStudentId) {
        synchronized (this) {
            if (student_MedicalProvidersQuery == null) {
                QueryBuilder<MedicalProvider> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MedicalProvidersStudentId.eq(null));
                student_MedicalProvidersQuery = queryBuilder.build();
            }
        }
        Query<MedicalProvider> query = student_MedicalProvidersQuery.forCurrentThread();
        query.setParameter(0, medicalProvidersStudentId);
        return query.list();
    }

    /** Internal query to resolve the "medicalProviders" to-many relationship of Family. */
    public List<MedicalProvider> _queryFamily_MedicalProviders(long medicalProvidersFamilyId) {
        synchronized (this) {
            if (family_MedicalProvidersQuery == null) {
                QueryBuilder<MedicalProvider> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MedicalProvidersFamilyId.eq(null));
                family_MedicalProvidersQuery = queryBuilder.build();
            }
        }
        Query<MedicalProvider> query = family_MedicalProvidersQuery.forCurrentThread();
        query.setParameter(0, medicalProvidersFamilyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFamilyDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getStudentDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM MEDICAL_PROVIDER T");
            builder.append(" LEFT JOIN FAMILY T0 ON T.'FAMILY_FAMILY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN STUDENT T1 ON T.'STUDENT_STUDENT_ID'=T1.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T2 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MedicalProvider loadCurrentDeep(Cursor cursor, boolean lock) {
        MedicalProvider entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Family family = loadCurrentOther(daoSession.getFamilyDao(), cursor, offset);
         if(family != null) {
            entity.setFamily(family);
        }
        offset += daoSession.getFamilyDao().getAllColumns().length;

        Student student = loadCurrentOther(daoSession.getStudentDao(), cursor, offset);
         if(student != null) {
            entity.setStudent(student);
        }
        offset += daoSession.getStudentDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public MedicalProvider loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MedicalProvider> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MedicalProvider> list = new ArrayList<MedicalProvider>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MedicalProvider> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MedicalProvider> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
    @Override
    protected void onPreInsertEntity(MedicalProvider entity) {
        entity.insertBase(daoSession.getSyncBaseDao());
        entity.setSyncBaseId(entity.getSyncBaseId());
    }

    @Override
    protected void onPreLoadEntity(MedicalProvider entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreRefreshEntity(MedicalProvider entity) {
        entity.loadBase(daoSession.getSyncBaseDao(), entity.getSyncBaseId());
    }

    @Override
    protected void onPreUpdateEntity(MedicalProvider entity) {
        entity.updateBase(daoSession.getSyncBaseDao());
    }

    @Override
    protected void onPreDeleteEntity(MedicalProvider entity) {
        entity.deleteBase(daoSession.getSyncBaseDao());
    }

    static {
        GreenSync.registerListTypeToken("MedicalProvider", new TypeToken<List<MedicalProvider>>(){}.getType());
        GreenSync.registerTypeToken("MedicalProvider", MedicalProvider.class);
    }

}
