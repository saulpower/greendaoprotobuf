package com.saulpower.GreenWireTest.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.SyncBase;
import com.saulpower.GreenWireTest.database.BaseState;
import android.util.Log;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.sync.GreenSyncDaoBase;
import de.greenrobot.dao.sync.GreenSyncBase;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYNC_BASE.
*/
public class SyncBaseDao extends AbstractDao<SyncBase, Long> implements GreenSyncDaoBase<SyncBase> {

    public static final String TABLENAME = "SYNC_BASE";

    /**
     * Properties of entity SyncBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UpdatedOn = new Property(0, java.util.Date.class, "updatedOn", false, "UPDATED_ON");
        public final static Property State = new Property(1, BaseState.class, "state", false, "STATE");
        public final static Property SyncBaseId = new Property(2, Long.class, "syncBaseId", true, "SYNC_BASE_ID");
        public final static Property ExternalId = new Property(3, String.class, "externalId", false, "EXTERNAL_ID");
        public final static Property CreatedOn = new Property(4, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property DerivedEntityType = new Property(5, String.class, "derivedEntityType", false, "DERIVED_ENTITY_TYPE");
    };

    private DaoSession daoSession;

    public SyncBaseDao(DaoConfig config) {
        super(config);
    }
    
    public SyncBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYNC_BASE' (" + //
                "'UPDATED_ON' INTEGER," + // 0: updatedOn
                "'STATE' INTEGER," + // 1: state
                "'SYNC_BASE_ID' INTEGER PRIMARY KEY ," + // 2: syncBaseId
                "'EXTERNAL_ID' TEXT," + // 3: externalId
                "'CREATED_ON' INTEGER," + // 4: createdOn
                "'DERIVED_ENTITY_TYPE' TEXT);"); // 5: derivedEntityType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYNC_BASE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SyncBase entity) {
        stmt.clearBindings();
 
        java.util.Date updatedOn = entity.getUpdatedOn();
        if (updatedOn != null) {
            stmt.bindLong(1, updatedOn.getTime());
        }
 
        BaseState state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state.getValue());
        }
 
        Long syncBaseId = entity.getSyncBaseId();
        if (syncBaseId != null) {
            stmt.bindLong(3, syncBaseId);
        }
 
        String externalId = entity.getExternalId();
        if (externalId != null) {
            stmt.bindString(4, externalId);
        }
 
        java.util.Date createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindLong(5, createdOn.getTime());
        }
 
        String derivedEntityType = entity.getDerivedEntityType();
        if (derivedEntityType != null) {
            stmt.bindString(6, derivedEntityType);
        }
    }

    @Override
    protected void attachEntity(SyncBase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public SyncBase readEntity(Cursor cursor, int offset) {
        SyncBase entity = new SyncBase( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // updatedOn
            cursor.isNull(offset + 1) ? null : BaseState.fromInt(cursor.getLong(offset + 1)), // state
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // syncBaseId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // externalId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createdOn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // derivedEntityType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SyncBase entity, int offset) {
        entity.setUpdatedOn(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setState(cursor.isNull(offset + 1) ? null : BaseState.fromInt(cursor.getLong(offset + 1)));
        entity.setSyncBaseId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setExternalId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedOn(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDerivedEntityType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SyncBase entity, long rowId) {
        entity.setSyncBaseId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SyncBase entity) {
        if(entity != null) {
            return entity.getSyncBaseId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /**
    * 1. SELECT BASE_ID, DERIVED_ENTITY_TYPE FROM SyncBase WHERE state = ?
    * 2. Use derivedType to get dao and load entity on baseId
    * @param state
    * @return
    */
    private Map<String, List<GreenSyncBase>> loadState(BaseState state) {

    Query query = queryBuilder().where(Properties.State.eq(state.getValue())).orderAsc(Properties.DerivedEntityType).build();
    Cursor cursor = query.getCursor();

    Map<String, List<GreenSyncBase>> map = new HashMap<String, List<GreenSyncBase>>();

        if (cursor.moveToFirst()) {

            List<GreenSyncBase> list = new ArrayList<GreenSyncBase>();

            do {
                Long baseId = cursor.getLong(Properties.SyncBaseId.ordinal);
                String type = cursor.getString(Properties.DerivedEntityType.ordinal);
                String[] key = type.split("\\.");

                if (!map.containsKey(key[key.length - 1])) {
                    list = new ArrayList<GreenSyncBase>();
                    map.put(key[key.length - 1], list);
                }

                try {
                    AbstractDao abstractDao = daoSession.getDao(Class.forName(type));
                    GreenSyncBase object = (GreenSyncBase) abstractDao.queryBuilder().where(Properties.SyncBaseId.eq(baseId)).uniqueOrThrow();
                    list.add(object);
                } catch (ClassNotFoundException ex) {
                    Log.e("SyncBaseDao", "Could not load dao for class " + type);
                } catch (DaoException ex) {
                    Log.e("SyncBaseDao", "Could not load object from class " + type + " with id " + baseId);
                }
            } while (cursor.moveToNext());
        }

        return map;
    }

    @Override
    public Map<String, List<GreenSyncBase>> getUpdatedObjects() {
        return loadState(BaseState.UPDATE);
    }

    @Override
    public Map<String, List<GreenSyncBase>> getDeletedObjects() {
        return loadState(BaseState.DELETE);
    }

    @Override
    public Map<String, List<GreenSyncBase>> getCreatedObjects() {
        return loadState(BaseState.CREATE);
    }
}
