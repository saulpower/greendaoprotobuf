package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.Association;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ASSOCIATION.
*/
public class AssociationDao extends AbstractDao<Association, Long> {

    public static final String TABLENAME = "ASSOCIATION";

    /**
     * Properties of entity Association.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExternalID = new Property(0, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property TagString = new Property(3, String.class, "tagString", false, "TAG_STRING");
        public final static Property RoleID = new Property(4, String.class, "roleID", false, "ROLE_ID");
        public final static Property RoleRoleBaseId = new Property(5, long.class, "roleRoleBaseId", false, "ROLE_ROLE_BASE_ID");
        public final static Property TenantID = new Property(6, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(7, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(8, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property AssociationsOUId = new Property(9, long.class, "associationsOUId", false, "ASSOCIATIONS_OUID");
        public final static Property AssociationsOUBaseId = new Property(10, long.class, "associationsOUBaseId", false, "ASSOCIATIONS_OUBASE_ID");
        public final static Property AssociationsStudentId = new Property(11, long.class, "associationsStudentId", false, "ASSOCIATIONS_STUDENT_ID");
        public final static Property UserAuthorizedPersonId = new Property(12, long.class, "userAuthorizedPersonId", false, "USER_AUTHORIZED_PERSON_ID");
        public final static Property AssociationsPersonId = new Property(13, long.class, "associationsPersonId", false, "ASSOCIATIONS_PERSON_ID");
        public final static Property IsDeleted = new Property(14, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(15, Integer.class, "version", false, "VERSION");
        public final static Property AssociationsAuthorizedPersonId = new Property(16, long.class, "associationsAuthorizedPersonId", false, "ASSOCIATIONS_AUTHORIZED_PERSON_ID");
        public final static Property Id = new Property(17, Long.class, "id", true, "_id");
        public final static Property OUOUBaseId = new Property(18, long.class, "oUOUBaseId", false, "O_UOUBASE_ID");
        public final static Property DateCreated = new Property(19, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property IsActive = new Property(20, Boolean.class, "isActive", false, "IS_ACTIVE");
    };

    private DaoSession daoSession;

    private Query<Association> student_AssociationsQuery;
    private Query<Association> oU_AssociationsQuery;
    private Query<Association> person_AssociationsQuery;
    private Query<Association> oUBase_AssociationsQuery;
    private Query<Association> authorizedPerson_AssociationsQuery;

    public AssociationDao(DaoConfig config) {
        super(config);
    }
    
    public AssociationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ASSOCIATION' (" + //
                "'EXTERNAL_ID' TEXT," + // 0: externalID
                "'GUID' TEXT," + // 1: guid
                "'NAME' TEXT," + // 2: name
                "'TAG_STRING' TEXT," + // 3: tagString
                "'ROLE_ID' TEXT," + // 4: roleID
                "'ROLE_ROLE_BASE_ID' INTEGER NOT NULL ," + // 5: roleRoleBaseId
                "'TENANT_ID' INTEGER," + // 6: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 7: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' INTEGER," + // 8: dateLastModified
                "'ASSOCIATIONS_OUID' INTEGER NOT NULL ," + // 9: associationsOUId
                "'ASSOCIATIONS_OUBASE_ID' INTEGER NOT NULL ," + // 10: associationsOUBaseId
                "'ASSOCIATIONS_STUDENT_ID' INTEGER NOT NULL ," + // 11: associationsStudentId
                "'USER_AUTHORIZED_PERSON_ID' INTEGER NOT NULL ," + // 12: userAuthorizedPersonId
                "'ASSOCIATIONS_PERSON_ID' INTEGER NOT NULL ," + // 13: associationsPersonId
                "'IS_DELETED' INTEGER," + // 14: isDeleted
                "'VERSION' INTEGER," + // 15: version
                "'ASSOCIATIONS_AUTHORIZED_PERSON_ID' INTEGER NOT NULL ," + // 16: associationsAuthorizedPersonId
                "'_id' INTEGER PRIMARY KEY ," + // 17: id
                "'O_UOUBASE_ID' INTEGER NOT NULL ," + // 18: oUOUBaseId
                "'DATE_CREATED' INTEGER," + // 19: dateCreated
                "'IS_ACTIVE' INTEGER);"); // 20: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ASSOCIATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Association entity) {
        stmt.clearBindings();
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(1, externalID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(4, tagString);
        }
 
        String roleID = entity.getRoleID();
        if (roleID != null) {
            stmt.bindString(5, roleID);
        }
        stmt.bindLong(6, entity.getRoleRoleBaseId());
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(7, tenantID);
        }
        stmt.bindLong(8, entity.getSaveResultSaveResultId());
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(9, dateLastModified);
        }
        stmt.bindLong(10, entity.getAssociationsOUId());
        stmt.bindLong(11, entity.getAssociationsOUBaseId());
        stmt.bindLong(12, entity.getAssociationsStudentId());
        stmt.bindLong(13, entity.getUserAuthorizedPersonId());
        stmt.bindLong(14, entity.getAssociationsPersonId());
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(15, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(16, version);
        }
        stmt.bindLong(17, entity.getAssociationsAuthorizedPersonId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(18, id);
        }
        stmt.bindLong(19, entity.getOUOUBaseId());
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(20, dateCreated);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(21, isActive ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Association entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17);
    }    

    /** @inheritdoc */
    @Override
    public Association readEntity(Cursor cursor, int offset) {
        Association entity = new Association( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // externalID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roleID
            cursor.getLong(offset + 5), // roleRoleBaseId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // tenantID
            cursor.getLong(offset + 7), // saveResultSaveResultId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // dateLastModified
            cursor.getLong(offset + 9), // associationsOUId
            cursor.getLong(offset + 10), // associationsOUBaseId
            cursor.getLong(offset + 11), // associationsStudentId
            cursor.getLong(offset + 12), // userAuthorizedPersonId
            cursor.getLong(offset + 13), // associationsPersonId
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isDeleted
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // version
            cursor.getLong(offset + 16), // associationsAuthorizedPersonId
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // id
            cursor.getLong(offset + 18), // oUOUBaseId
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // dateCreated
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Association entity, int offset) {
        entity.setExternalID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoleID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoleRoleBaseId(cursor.getLong(offset + 5));
        entity.setTenantID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 7));
        entity.setDateLastModified(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAssociationsOUId(cursor.getLong(offset + 9));
        entity.setAssociationsOUBaseId(cursor.getLong(offset + 10));
        entity.setAssociationsStudentId(cursor.getLong(offset + 11));
        entity.setUserAuthorizedPersonId(cursor.getLong(offset + 12));
        entity.setAssociationsPersonId(cursor.getLong(offset + 13));
        entity.setIsDeleted(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setVersion(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setAssociationsAuthorizedPersonId(cursor.getLong(offset + 16));
        entity.setId(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setOUOUBaseId(cursor.getLong(offset + 18));
        entity.setDateCreated(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setIsActive(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Association entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Association entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "associations" to-many relationship of Student. */
    public List<Association> _queryStudent_Associations(long associationsStudentId) {
        synchronized (this) {
            if (student_AssociationsQuery == null) {
                QueryBuilder<Association> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssociationsStudentId.eq(null));
                student_AssociationsQuery = queryBuilder.build();
            }
        }
        Query<Association> query = student_AssociationsQuery.forCurrentThread();
        query.setParameter(0, associationsStudentId);
        return query.list();
    }

    /** Internal query to resolve the "associations" to-many relationship of OU. */
    public List<Association> _queryOU_Associations(long associationsOUId) {
        synchronized (this) {
            if (oU_AssociationsQuery == null) {
                QueryBuilder<Association> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssociationsOUId.eq(null));
                oU_AssociationsQuery = queryBuilder.build();
            }
        }
        Query<Association> query = oU_AssociationsQuery.forCurrentThread();
        query.setParameter(0, associationsOUId);
        return query.list();
    }

    /** Internal query to resolve the "associations" to-many relationship of Person. */
    public List<Association> _queryPerson_Associations(long associationsPersonId) {
        synchronized (this) {
            if (person_AssociationsQuery == null) {
                QueryBuilder<Association> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssociationsPersonId.eq(null));
                person_AssociationsQuery = queryBuilder.build();
            }
        }
        Query<Association> query = person_AssociationsQuery.forCurrentThread();
        query.setParameter(0, associationsPersonId);
        return query.list();
    }

    /** Internal query to resolve the "associations" to-many relationship of OUBase. */
    public List<Association> _queryOUBase_Associations(long associationsOUBaseId) {
        synchronized (this) {
            if (oUBase_AssociationsQuery == null) {
                QueryBuilder<Association> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssociationsOUBaseId.eq(null));
                oUBase_AssociationsQuery = queryBuilder.build();
            }
        }
        Query<Association> query = oUBase_AssociationsQuery.forCurrentThread();
        query.setParameter(0, associationsOUBaseId);
        return query.list();
    }

    /** Internal query to resolve the "associations" to-many relationship of AuthorizedPerson. */
    public List<Association> _queryAuthorizedPerson_Associations(long associationsAuthorizedPersonId) {
        synchronized (this) {
            if (authorizedPerson_AssociationsQuery == null) {
                QueryBuilder<Association> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AssociationsAuthorizedPersonId.eq(null));
                authorizedPerson_AssociationsQuery = queryBuilder.build();
            }
        }
        Query<Association> query = authorizedPerson_AssociationsQuery.forCurrentThread();
        query.setParameter(0, associationsAuthorizedPersonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOUBaseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAuthorizedPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getRoleBaseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM ASSOCIATION T");
            builder.append(" LEFT JOIN OUBASE T0 ON T.'O_UOUBASE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN AUTHORIZED_PERSON T1 ON T.'USER_AUTHORIZED_PERSON_ID'=T1.'_id'");
            builder.append(" LEFT JOIN ROLE_BASE T2 ON T.'ROLE_ROLE_BASE_ID'=T2.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T3 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Association loadCurrentDeep(Cursor cursor, boolean lock) {
        Association entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OUBase oU = loadCurrentOther(daoSession.getOUBaseDao(), cursor, offset);
         if(oU != null) {
            entity.setOU(oU);
        }
        offset += daoSession.getOUBaseDao().getAllColumns().length;

        AuthorizedPerson user = loadCurrentOther(daoSession.getAuthorizedPersonDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getAuthorizedPersonDao().getAllColumns().length;

        RoleBase role = loadCurrentOther(daoSession.getRoleBaseDao(), cursor, offset);
         if(role != null) {
            entity.setRole(role);
        }
        offset += daoSession.getRoleBaseDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public Association loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Association> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Association> list = new ArrayList<Association>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Association> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Association> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
