package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table OU.
 */
public class OU extends SyncBase  {

    private String externalID;
    private String guid;
    private String name;
    private transient long parentOUBaseId;
    private String tagString;
    private String stateTaxID;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private String number;
    private transient long oUTypeOUTypeId;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private String federalTaxID;
    private Integer version;
    private Long id;
    private String parentID;
    private String dateCreated;
    private Boolean isActive;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OUDao myDao;
    private OUType oUType;
    private Long oUType__resolvedKey;
    private OUBase parent;
    private Long parent__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<Address> addresses;
    private List<Address> phoneNumbers;
    private List<EmployeeFile> employeeFiles;
    private List<EmploymentStatus> employmentStatuses;
    private List<EmploymentRole> employmentRoles;
    private List<Department> departments;
    private List<PayPeriod> payPeriods;
    private List<ApplicationSource> applicationSources;
    private List<LedgerAccount> ledgerAccounts;
    private List<Holiday> holidays;
    private List<CustomField> customFields;
    private List<OUBase> children;
    private List<RoleBase> roles;
    private List<Association> associations;
    private List<CustomValue> customValues;

    public OU() {
    }

    public OU(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    OU(String externalID, String guid, String name, long parentOUBaseId, String tagString, String stateTaxID, Long tenantID, long saveResultSaveResultId, String dateLastModified, String number, long oUTypeOUTypeId, Long syncBaseId, Boolean isDeleted, String federalTaxID, Integer version, Long id, String parentID, String dateCreated, Boolean isActive) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.parentOUBaseId = parentOUBaseId;
        this.tagString = tagString;
        this.stateTaxID = stateTaxID;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.number = number;
        this.oUTypeOUTypeId = oUTypeOUTypeId;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.federalTaxID = federalTaxID;
        this.version = version;
        this.id = id;
        this.parentID = parentID;
        this.dateCreated = dateCreated;
        this.isActive = isActive;
    }

    public OU(String externalID, String guid, String name, long parentOUBaseId, String tagString, String stateTaxID, Long tenantID, long saveResultSaveResultId, String dateLastModified, String number, long oUTypeOUTypeId, Boolean isDeleted, String federalTaxID, Integer version, Long id, String parentID, String dateCreated, Boolean isActive) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.parentOUBaseId = parentOUBaseId;
        this.tagString = tagString;
        this.stateTaxID = stateTaxID;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.number = number;
        this.oUTypeOUTypeId = oUTypeOUTypeId;
        this.isDeleted = isDeleted;
        this.federalTaxID = federalTaxID;
        this.version = version;
        this.id = id;
        this.parentID = parentID;
        this.dateCreated = dateCreated;
        this.isActive = isActive;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOUDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getParentOUBaseId() {
        return parentOUBaseId;
    }

    public void setParentOUBaseId(long parentOUBaseId) {
        this.parentOUBaseId = parentOUBaseId;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public String getStateTaxID() {
        return stateTaxID;
    }

    public void setStateTaxID(String stateTaxID) {
        this.stateTaxID = stateTaxID;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public long getOUTypeOUTypeId() {
        return oUTypeOUTypeId;
    }

    public void setOUTypeOUTypeId(long oUTypeOUTypeId) {
        this.oUTypeOUTypeId = oUTypeOUTypeId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getFederalTaxID() {
        return federalTaxID;
    }

    public void setFederalTaxID(String federalTaxID) {
        this.federalTaxID = federalTaxID;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getParentID() {
        return parentID;
    }

    public void setParentID(String parentID) {
        this.parentID = parentID;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    /** To-one relationship, resolved on first access. */
    public OUType getOUType() {
        long __key = this.oUTypeOUTypeId;
        if (oUType__resolvedKey == null || !oUType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUTypeDao targetDao = daoSession.getOUTypeDao();
            OUType oUTypeNew = targetDao.load(__key);
            synchronized (this) {
                oUType = oUTypeNew;
            	oUType__resolvedKey = __key;
            }
        }
        return oUType;
    }

    public void setOUType(OUType oUType) {
        if (oUType == null) {
            throw new DaoException("To-one property 'oUTypeOUTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oUType = oUType;
            oUTypeOUTypeId = oUType.getId();
            oUType__resolvedKey = oUTypeOUTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OUBase getParent() {
        long __key = this.parentOUBaseId;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUBaseDao targetDao = daoSession.getOUBaseDao();
            OUBase parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(OUBase parent) {
        if (parent == null) {
            throw new DaoException("To-one property 'parentOUBaseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.parent = parent;
            parentOUBaseId = parent.getId();
            parent__resolvedKey = parentOUBaseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Address> getAddresses() {
        if (addresses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            List<Address> addressesNew = targetDao._queryOU_Addresses(id);
            synchronized (this) {
                if(addresses == null) {
                    addresses = addressesNew;
                }
            }
        }
        return addresses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAddresses() {
        addresses = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Address> getPhoneNumbers() {
        if (phoneNumbers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            List<Address> phoneNumbersNew = targetDao._queryOU_PhoneNumbers(id);
            synchronized (this) {
                if(phoneNumbers == null) {
                    phoneNumbers = phoneNumbersNew;
                }
            }
        }
        return phoneNumbers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhoneNumbers() {
        phoneNumbers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EmployeeFile> getEmployeeFiles() {
        if (employeeFiles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmployeeFileDao targetDao = daoSession.getEmployeeFileDao();
            List<EmployeeFile> employeeFilesNew = targetDao._queryOU_EmployeeFiles(id);
            synchronized (this) {
                if(employeeFiles == null) {
                    employeeFiles = employeeFilesNew;
                }
            }
        }
        return employeeFiles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmployeeFiles() {
        employeeFiles = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EmploymentStatus> getEmploymentStatuses() {
        if (employmentStatuses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmploymentStatusDao targetDao = daoSession.getEmploymentStatusDao();
            List<EmploymentStatus> employmentStatusesNew = targetDao._queryOU_EmploymentStatuses(id);
            synchronized (this) {
                if(employmentStatuses == null) {
                    employmentStatuses = employmentStatusesNew;
                }
            }
        }
        return employmentStatuses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmploymentStatuses() {
        employmentStatuses = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<EmploymentRole> getEmploymentRoles() {
        if (employmentRoles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmploymentRoleDao targetDao = daoSession.getEmploymentRoleDao();
            List<EmploymentRole> employmentRolesNew = targetDao._queryOU_EmploymentRoles(id);
            synchronized (this) {
                if(employmentRoles == null) {
                    employmentRoles = employmentRolesNew;
                }
            }
        }
        return employmentRoles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmploymentRoles() {
        employmentRoles = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Department> getDepartments() {
        if (departments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DepartmentDao targetDao = daoSession.getDepartmentDao();
            List<Department> departmentsNew = targetDao._queryOU_Departments(id);
            synchronized (this) {
                if(departments == null) {
                    departments = departmentsNew;
                }
            }
        }
        return departments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDepartments() {
        departments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PayPeriod> getPayPeriods() {
        if (payPeriods == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PayPeriodDao targetDao = daoSession.getPayPeriodDao();
            List<PayPeriod> payPeriodsNew = targetDao._queryOU_PayPeriods(id);
            synchronized (this) {
                if(payPeriods == null) {
                    payPeriods = payPeriodsNew;
                }
            }
        }
        return payPeriods;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPayPeriods() {
        payPeriods = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ApplicationSource> getApplicationSources() {
        if (applicationSources == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplicationSourceDao targetDao = daoSession.getApplicationSourceDao();
            List<ApplicationSource> applicationSourcesNew = targetDao._queryOU_ApplicationSources(id);
            synchronized (this) {
                if(applicationSources == null) {
                    applicationSources = applicationSourcesNew;
                }
            }
        }
        return applicationSources;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetApplicationSources() {
        applicationSources = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LedgerAccount> getLedgerAccounts() {
        if (ledgerAccounts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LedgerAccountDao targetDao = daoSession.getLedgerAccountDao();
            List<LedgerAccount> ledgerAccountsNew = targetDao._queryOU_LedgerAccounts(id);
            synchronized (this) {
                if(ledgerAccounts == null) {
                    ledgerAccounts = ledgerAccountsNew;
                }
            }
        }
        return ledgerAccounts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLedgerAccounts() {
        ledgerAccounts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Holiday> getHolidays() {
        if (holidays == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HolidayDao targetDao = daoSession.getHolidayDao();
            List<Holiday> holidaysNew = targetDao._queryOU_Holidays(id);
            synchronized (this) {
                if(holidays == null) {
                    holidays = holidaysNew;
                }
            }
        }
        return holidays;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetHolidays() {
        holidays = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomField> getCustomFields() {
        if (customFields == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomFieldDao targetDao = daoSession.getCustomFieldDao();
            List<CustomField> customFieldsNew = targetDao._queryOU_CustomFields(id);
            synchronized (this) {
                if(customFields == null) {
                    customFields = customFieldsNew;
                }
            }
        }
        return customFields;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomFields() {
        customFields = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OUBase> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUBaseDao targetDao = daoSession.getOUBaseDao();
            List<OUBase> childrenNew = targetDao._queryOU_Children(id);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RoleBase> getRoles() {
        if (roles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoleBaseDao targetDao = daoSession.getRoleBaseDao();
            List<RoleBase> rolesNew = targetDao._queryOU_Roles(id);
            synchronized (this) {
                if(roles == null) {
                    roles = rolesNew;
                }
            }
        }
        return roles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRoles() {
        roles = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Association> getAssociations() {
        if (associations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssociationDao targetDao = daoSession.getAssociationDao();
            List<Association> associationsNew = targetDao._queryOU_Associations(id);
            synchronized (this) {
                if(associations == null) {
                    associations = associationsNew;
                }
            }
        }
        return associations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssociations() {
        associations = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryOU_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}