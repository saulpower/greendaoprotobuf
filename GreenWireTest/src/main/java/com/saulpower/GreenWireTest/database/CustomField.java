package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CUSTOM_FIELD.
 */
public class CustomField extends SyncBase  {

    private Integer dataLength;
    private String externalID;
    private String name;
    private String guid;
    private transient long customFieldsOUBaseId;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private Boolean isRequired;
    private ValueListType valueListType;
    private String dateLastModified;
    private transient Long syncBaseId;
    private String displayName;
    private Boolean isDeleted;
    private CustomFieldDataType dataType;
    private Integer version;
    private Long id;
    private transient long customFieldsOUId;
    private String dateCreated;
    private Boolean hasValueList;
    private transient long customFieldsCenterId;
    private String formatString;
    private String className;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CustomFieldDao myDao;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> values;
    private List<ValueListItem> valueListItems;
    private List<CustomValue> customValues;

    public CustomField() {
    }

    public CustomField(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    CustomField(Integer dataLength, String externalID, String name, String guid, long customFieldsOUBaseId, String tagString, Long tenantID, long saveResultSaveResultId, Boolean isRequired, ValueListType valueListType, String dateLastModified, Long syncBaseId, String displayName, Boolean isDeleted, CustomFieldDataType dataType, Integer version, Long id, long customFieldsOUId, String dateCreated, Boolean hasValueList, long customFieldsCenterId, String formatString, String className) {
        this.dataLength = dataLength;
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.customFieldsOUBaseId = customFieldsOUBaseId;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.isRequired = isRequired;
        this.valueListType = valueListType;
        this.dateLastModified = dateLastModified;
        this.syncBaseId = syncBaseId;
        this.displayName = displayName;
        this.isDeleted = isDeleted;
        this.dataType = dataType;
        this.version = version;
        this.id = id;
        this.customFieldsOUId = customFieldsOUId;
        this.dateCreated = dateCreated;
        this.hasValueList = hasValueList;
        this.customFieldsCenterId = customFieldsCenterId;
        this.formatString = formatString;
        this.className = className;
    }

    public CustomField(Integer dataLength, String externalID, String name, String guid, long customFieldsOUBaseId, String tagString, Long tenantID, long saveResultSaveResultId, Boolean isRequired, ValueListType valueListType, String dateLastModified, String displayName, Boolean isDeleted, CustomFieldDataType dataType, Integer version, Long id, long customFieldsOUId, String dateCreated, Boolean hasValueList, long customFieldsCenterId, String formatString, String className) {
        this.dataLength = dataLength;
        this.externalID = externalID;
        this.name = name;
        this.guid = guid;
        this.customFieldsOUBaseId = customFieldsOUBaseId;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.isRequired = isRequired;
        this.valueListType = valueListType;
        this.dateLastModified = dateLastModified;
        this.displayName = displayName;
        this.isDeleted = isDeleted;
        this.dataType = dataType;
        this.version = version;
        this.id = id;
        this.customFieldsOUId = customFieldsOUId;
        this.dateCreated = dateCreated;
        this.hasValueList = hasValueList;
        this.customFieldsCenterId = customFieldsCenterId;
        this.formatString = formatString;
        this.className = className;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomFieldDao() : null;
    }

    public Integer getDataLength() {
        return dataLength;
    }

    public void setDataLength(Integer dataLength) {
        this.dataLength = dataLength;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public long getCustomFieldsOUBaseId() {
        return customFieldsOUBaseId;
    }

    public void setCustomFieldsOUBaseId(long customFieldsOUBaseId) {
        this.customFieldsOUBaseId = customFieldsOUBaseId;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public Boolean getIsRequired() {
        return isRequired;
    }

    public void setIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
    }

    public ValueListType getValueListType() {
        return valueListType;
    }

    public void setValueListType(ValueListType valueListType) {
        this.valueListType = valueListType;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public CustomFieldDataType getDataType() {
        return dataType;
    }

    public void setDataType(CustomFieldDataType dataType) {
        this.dataType = dataType;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getCustomFieldsOUId() {
        return customFieldsOUId;
    }

    public void setCustomFieldsOUId(long customFieldsOUId) {
        this.customFieldsOUId = customFieldsOUId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Boolean getHasValueList() {
        return hasValueList;
    }

    public void setHasValueList(Boolean hasValueList) {
        this.hasValueList = hasValueList;
    }

    public long getCustomFieldsCenterId() {
        return customFieldsCenterId;
    }

    public void setCustomFieldsCenterId(long customFieldsCenterId) {
        this.customFieldsCenterId = customFieldsCenterId;
    }

    public String getFormatString() {
        return formatString;
    }

    public void setFormatString(String formatString) {
        this.formatString = formatString;
    }

    public String getClassName() {
        return className;
    }

    public void setClassName(String className) {
        this.className = className;
    }

    public enum ValueListType implements DaoEnum {
        FOREIGNKEY(0),
        LIST(1);

        private static final Map<Long, ValueListType> intToTypeMap = new HashMap<Long, ValueListType>();

        static {
            for (ValueListType type : ValueListType.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static ValueListType fromInt(long i) {
            ValueListType type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private ValueListType(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    public enum CustomFieldDataType implements DaoEnum {
        DATATYPESTRING(0),
        DATATYPEINTEGER(1),
        DATATYPEDOUBLE(2),
        DATATYPECURRENCY(3),
        DATATYPEBOOLEAN(4);

        private static final Map<Long, CustomFieldDataType> intToTypeMap = new HashMap<Long, CustomFieldDataType>();

        static {
            for (CustomFieldDataType type : CustomFieldDataType.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static CustomFieldDataType fromInt(long i) {
            CustomFieldDataType type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private CustomFieldDataType(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getValues() {
        if (values == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> valuesNew = targetDao._queryCustomField_Values(id);
            synchronized (this) {
                if(values == null) {
                    values = valuesNew;
                }
            }
        }
        return values;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetValues() {
        values = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ValueListItem> getValueListItems() {
        if (valueListItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ValueListItemDao targetDao = daoSession.getValueListItemDao();
            List<ValueListItem> valueListItemsNew = targetDao._queryCustomField_ValueListItems(id);
            synchronized (this) {
                if(valueListItems == null) {
                    valueListItems = valueListItemsNew;
                }
            }
        }
        return valueListItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetValueListItems() {
        valueListItems = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryCustomField_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}