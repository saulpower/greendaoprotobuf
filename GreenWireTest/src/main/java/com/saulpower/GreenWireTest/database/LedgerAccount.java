package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LEDGER_ACCOUNT.
 */
public class LedgerAccount extends SyncBase  {

    private BalanceType typicalBalance;
    private String externalID;
    private String guid;
    private String name;
    private String accountNumber;
    private Integer sortOrder;
    private String tagString;
    private transient long ledgerAccountsOUId;
    private transient long ledgerGroupLedgerGroupId;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private transient long ledgerAccountsCenterId;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private Long id;
    private transient long oUOUId;
    private String dateCreated;
    private transient long accountsLedgerGroupId;
    private Boolean isActive;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LedgerAccountDao myDao;
    private OU oU;
    private Long oU__resolvedKey;
    private LedgerGroup ledgerGroup;
    private Long ledgerGroup__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<LedgerItem> ledgerItems;
    private List<CustomValue> customValues;

    public LedgerAccount() {
    }

    public LedgerAccount(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    LedgerAccount(BalanceType typicalBalance, String externalID, String guid, String name, String accountNumber, Integer sortOrder, String tagString, long ledgerAccountsOUId, long ledgerGroupLedgerGroupId, Long tenantID, long saveResultSaveResultId, String dateLastModified, long ledgerAccountsCenterId, Long syncBaseId, Boolean isDeleted, Integer version, Long id, long oUOUId, String dateCreated, long accountsLedgerGroupId, Boolean isActive) {
        this.typicalBalance = typicalBalance;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.accountNumber = accountNumber;
        this.sortOrder = sortOrder;
        this.tagString = tagString;
        this.ledgerAccountsOUId = ledgerAccountsOUId;
        this.ledgerGroupLedgerGroupId = ledgerGroupLedgerGroupId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.ledgerAccountsCenterId = ledgerAccountsCenterId;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
        this.accountsLedgerGroupId = accountsLedgerGroupId;
        this.isActive = isActive;
    }

    public LedgerAccount(BalanceType typicalBalance, String externalID, String guid, String name, String accountNumber, Integer sortOrder, String tagString, long ledgerAccountsOUId, long ledgerGroupLedgerGroupId, Long tenantID, long saveResultSaveResultId, String dateLastModified, long ledgerAccountsCenterId, Boolean isDeleted, Integer version, Long id, long oUOUId, String dateCreated, long accountsLedgerGroupId, Boolean isActive) {
        this.typicalBalance = typicalBalance;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.accountNumber = accountNumber;
        this.sortOrder = sortOrder;
        this.tagString = tagString;
        this.ledgerAccountsOUId = ledgerAccountsOUId;
        this.ledgerGroupLedgerGroupId = ledgerGroupLedgerGroupId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.ledgerAccountsCenterId = ledgerAccountsCenterId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.oUOUId = oUOUId;
        this.dateCreated = dateCreated;
        this.accountsLedgerGroupId = accountsLedgerGroupId;
        this.isActive = isActive;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLedgerAccountDao() : null;
    }

    public BalanceType getTypicalBalance() {
        return typicalBalance;
    }

    public void setTypicalBalance(BalanceType typicalBalance) {
        this.typicalBalance = typicalBalance;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public long getLedgerAccountsOUId() {
        return ledgerAccountsOUId;
    }

    public void setLedgerAccountsOUId(long ledgerAccountsOUId) {
        this.ledgerAccountsOUId = ledgerAccountsOUId;
    }

    public long getLedgerGroupLedgerGroupId() {
        return ledgerGroupLedgerGroupId;
    }

    public void setLedgerGroupLedgerGroupId(long ledgerGroupLedgerGroupId) {
        this.ledgerGroupLedgerGroupId = ledgerGroupLedgerGroupId;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getLedgerAccountsCenterId() {
        return ledgerAccountsCenterId;
    }

    public void setLedgerAccountsCenterId(long ledgerAccountsCenterId) {
        this.ledgerAccountsCenterId = ledgerAccountsCenterId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getOUOUId() {
        return oUOUId;
    }

    public void setOUOUId(long oUOUId) {
        this.oUOUId = oUOUId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getAccountsLedgerGroupId() {
        return accountsLedgerGroupId;
    }

    public void setAccountsLedgerGroupId(long accountsLedgerGroupId) {
        this.accountsLedgerGroupId = accountsLedgerGroupId;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public enum BalanceType implements DaoEnum {
        DEBIT(0),
        CREDIT(1);

        private static final Map<Long, BalanceType> intToTypeMap = new HashMap<Long, BalanceType>();

        static {
            for (BalanceType type : BalanceType.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static BalanceType fromInt(long i) {
            BalanceType type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private BalanceType(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OU getOU() {
        long __key = this.oUOUId;
        if (oU__resolvedKey == null || !oU__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUDao targetDao = daoSession.getOUDao();
            OU oUNew = targetDao.load(__key);
            synchronized (this) {
                oU = oUNew;
            	oU__resolvedKey = __key;
            }
        }
        return oU;
    }

    public void setOU(OU oU) {
        if (oU == null) {
            throw new DaoException("To-one property 'oUOUId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oU = oU;
            oUOUId = oU.getId();
            oU__resolvedKey = oUOUId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LedgerGroup getLedgerGroup() {
        long __key = this.ledgerGroupLedgerGroupId;
        if (ledgerGroup__resolvedKey == null || !ledgerGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LedgerGroupDao targetDao = daoSession.getLedgerGroupDao();
            LedgerGroup ledgerGroupNew = targetDao.load(__key);
            synchronized (this) {
                ledgerGroup = ledgerGroupNew;
            	ledgerGroup__resolvedKey = __key;
            }
        }
        return ledgerGroup;
    }

    public void setLedgerGroup(LedgerGroup ledgerGroup) {
        if (ledgerGroup == null) {
            throw new DaoException("To-one property 'ledgerGroupLedgerGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ledgerGroup = ledgerGroup;
            ledgerGroupLedgerGroupId = ledgerGroup.getId();
            ledgerGroup__resolvedKey = ledgerGroupLedgerGroupId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LedgerItem> getLedgerItems() {
        if (ledgerItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LedgerItemDao targetDao = daoSession.getLedgerItemDao();
            List<LedgerItem> ledgerItemsNew = targetDao._queryLedgerAccount_LedgerItems(id);
            synchronized (this) {
                if(ledgerItems == null) {
                    ledgerItems = ledgerItemsNew;
                }
            }
        }
        return ledgerItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLedgerItems() {
        ledgerItems = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryLedgerAccount_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}