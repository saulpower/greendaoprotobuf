package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.PersonalRelationship;
import com.saulpower.GreenWireTest.database.PersonalRelationship.RelationshipType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSONAL_RELATIONSHIP.
*/
public class PersonalRelationshipDao extends AbstractDao<PersonalRelationship, Long> {

    public static final String TABLENAME = "PERSONAL_RELATIONSHIP";

    /**
     * Properties of entity PersonalRelationship.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExternalID = new Property(0, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Guid = new Property(2, String.class, "guid", false, "GUID");
        public final static Property FromPersonID = new Property(3, String.class, "fromPersonID", false, "FROM_PERSON_ID");
        public final static Property ToPersonID = new Property(4, String.class, "toPersonID", false, "TO_PERSON_ID");
        public final static Property TagString = new Property(5, String.class, "tagString", false, "TAG_STRING");
        public final static Property IsEmergencyContact = new Property(6, Boolean.class, "isEmergencyContact", false, "IS_EMERGENCY_CONTACT");
        public final static Property FromPersonPersonId = new Property(7, long.class, "fromPersonPersonId", false, "FROM_PERSON_PERSON_ID");
        public final static Property TenantID = new Property(8, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(9, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(10, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property PeopleFamilyId = new Property(11, long.class, "peopleFamilyId", false, "PEOPLE_FAMILY_ID");
        public final static Property IsPickupOK = new Property(12, Boolean.class, "isPickupOK", false, "IS_PICKUP_OK");
        public final static Property RelationshipsStudentId = new Property(13, long.class, "relationshipsStudentId", false, "RELATIONSHIPS_STUDENT_ID");
        public final static Property RelationshipType = new Property(14, RelationshipType.class, "relationshipType", false, "RELATIONSHIP_TYPE");
        public final static Property IsBillingPerson = new Property(15, Boolean.class, "isBillingPerson", false, "IS_BILLING_PERSON");
        public final static Property IsDeleted = new Property(16, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(17, Integer.class, "version", false, "VERSION");
        public final static Property ShowInPickupList = new Property(18, Boolean.class, "showInPickupList", false, "SHOW_IN_PICKUP_LIST");
        public final static Property Id = new Property(19, Long.class, "id", true, "_id");
        public final static Property IsLegalGuardian = new Property(20, Boolean.class, "isLegalGuardian", false, "IS_LEGAL_GUARDIAN");
        public final static Property DateCreated = new Property(21, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property RelationshipsPersonId = new Property(22, long.class, "relationshipsPersonId", false, "RELATIONSHIPS_PERSON_ID");
        public final static Property ToPersonPersonId = new Property(23, long.class, "toPersonPersonId", false, "TO_PERSON_PERSON_ID");
    };

    private DaoSession daoSession;

    private Query<PersonalRelationship> student_RelationshipsQuery;
    private Query<PersonalRelationship> person_RelationshipsQuery;
    private Query<PersonalRelationship> family_PeopleQuery;

    public PersonalRelationshipDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalRelationshipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSONAL_RELATIONSHIP' (" + //
                "'EXTERNAL_ID' TEXT," + // 0: externalID
                "'NAME' TEXT," + // 1: name
                "'GUID' TEXT," + // 2: guid
                "'FROM_PERSON_ID' TEXT," + // 3: fromPersonID
                "'TO_PERSON_ID' TEXT," + // 4: toPersonID
                "'TAG_STRING' TEXT," + // 5: tagString
                "'IS_EMERGENCY_CONTACT' INTEGER," + // 6: isEmergencyContact
                "'FROM_PERSON_PERSON_ID' INTEGER NOT NULL ," + // 7: fromPersonPersonId
                "'TENANT_ID' INTEGER," + // 8: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 9: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' INTEGER," + // 10: dateLastModified
                "'PEOPLE_FAMILY_ID' INTEGER NOT NULL ," + // 11: peopleFamilyId
                "'IS_PICKUP_OK' INTEGER," + // 12: isPickupOK
                "'RELATIONSHIPS_STUDENT_ID' INTEGER NOT NULL ," + // 13: relationshipsStudentId
                "'RELATIONSHIP_TYPE' INTEGER," + // 14: relationshipType
                "'IS_BILLING_PERSON' INTEGER," + // 15: isBillingPerson
                "'IS_DELETED' INTEGER," + // 16: isDeleted
                "'VERSION' INTEGER," + // 17: version
                "'SHOW_IN_PICKUP_LIST' INTEGER," + // 18: showInPickupList
                "'_id' INTEGER PRIMARY KEY ," + // 19: id
                "'IS_LEGAL_GUARDIAN' INTEGER," + // 20: isLegalGuardian
                "'DATE_CREATED' INTEGER," + // 21: dateCreated
                "'RELATIONSHIPS_PERSON_ID' INTEGER NOT NULL ," + // 22: relationshipsPersonId
                "'TO_PERSON_PERSON_ID' INTEGER NOT NULL );"); // 23: toPersonPersonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSONAL_RELATIONSHIP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonalRelationship entity) {
        stmt.clearBindings();
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(1, externalID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(3, guid);
        }
 
        String fromPersonID = entity.getFromPersonID();
        if (fromPersonID != null) {
            stmt.bindString(4, fromPersonID);
        }
 
        String toPersonID = entity.getToPersonID();
        if (toPersonID != null) {
            stmt.bindString(5, toPersonID);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(6, tagString);
        }
 
        Boolean isEmergencyContact = entity.getIsEmergencyContact();
        if (isEmergencyContact != null) {
            stmt.bindLong(7, isEmergencyContact ? 1l: 0l);
        }
        stmt.bindLong(8, entity.getFromPersonPersonId());
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(9, tenantID);
        }
        stmt.bindLong(10, entity.getSaveResultSaveResultId());
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(11, dateLastModified);
        }
        stmt.bindLong(12, entity.getPeopleFamilyId());
 
        Boolean isPickupOK = entity.getIsPickupOK();
        if (isPickupOK != null) {
            stmt.bindLong(13, isPickupOK ? 1l: 0l);
        }
        stmt.bindLong(14, entity.getRelationshipsStudentId());
 
        RelationshipType relationshipType = entity.getRelationshipType();
        if (relationshipType != null) {
            stmt.bindLong(15, relationshipType.getValue());
        }
 
        Boolean isBillingPerson = entity.getIsBillingPerson();
        if (isBillingPerson != null) {
            stmt.bindLong(16, isBillingPerson ? 1l: 0l);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(17, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(18, version);
        }
 
        Boolean showInPickupList = entity.getShowInPickupList();
        if (showInPickupList != null) {
            stmt.bindLong(19, showInPickupList ? 1l: 0l);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(20, id);
        }
 
        Boolean isLegalGuardian = entity.getIsLegalGuardian();
        if (isLegalGuardian != null) {
            stmt.bindLong(21, isLegalGuardian ? 1l: 0l);
        }
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(22, dateCreated);
        }
        stmt.bindLong(23, entity.getRelationshipsPersonId());
        stmt.bindLong(24, entity.getToPersonPersonId());
    }

    @Override
    protected void attachEntity(PersonalRelationship entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19);
    }    

    /** @inheritdoc */
    @Override
    public PersonalRelationship readEntity(Cursor cursor, int offset) {
        PersonalRelationship entity = new PersonalRelationship( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // externalID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // guid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromPersonID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // toPersonID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tagString
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isEmergencyContact
            cursor.getLong(offset + 7), // fromPersonPersonId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // tenantID
            cursor.getLong(offset + 9), // saveResultSaveResultId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // dateLastModified
            cursor.getLong(offset + 11), // peopleFamilyId
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isPickupOK
            cursor.getLong(offset + 13), // relationshipsStudentId
            cursor.isNull(offset + 14) ? null : RelationshipType.fromInt(cursor.getLong(offset + 14)), // relationshipType
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isBillingPerson
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isDeleted
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // version
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // showInPickupList
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // id
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // isLegalGuardian
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // dateCreated
            cursor.getLong(offset + 22), // relationshipsPersonId
            cursor.getLong(offset + 23) // toPersonPersonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonalRelationship entity, int offset) {
        entity.setExternalID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromPersonID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToPersonID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTagString(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsEmergencyContact(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFromPersonPersonId(cursor.getLong(offset + 7));
        entity.setTenantID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 9));
        entity.setDateLastModified(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setPeopleFamilyId(cursor.getLong(offset + 11));
        entity.setIsPickupOK(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setRelationshipsStudentId(cursor.getLong(offset + 13));
        entity.setRelationshipType(cursor.isNull(offset + 14) ? null : RelationshipType.fromInt(cursor.getLong(offset + 14)));
        entity.setIsBillingPerson(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setVersion(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setShowInPickupList(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setIsLegalGuardian(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setDateCreated(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setRelationshipsPersonId(cursor.getLong(offset + 22));
        entity.setToPersonPersonId(cursor.getLong(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonalRelationship entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonalRelationship entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "relationships" to-many relationship of Student. */
    public List<PersonalRelationship> _queryStudent_Relationships(long relationshipsStudentId) {
        synchronized (this) {
            if (student_RelationshipsQuery == null) {
                QueryBuilder<PersonalRelationship> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RelationshipsStudentId.eq(null));
                student_RelationshipsQuery = queryBuilder.build();
            }
        }
        Query<PersonalRelationship> query = student_RelationshipsQuery.forCurrentThread();
        query.setParameter(0, relationshipsStudentId);
        return query.list();
    }

    /** Internal query to resolve the "relationships" to-many relationship of Person. */
    public List<PersonalRelationship> _queryPerson_Relationships(long relationshipsPersonId) {
        synchronized (this) {
            if (person_RelationshipsQuery == null) {
                QueryBuilder<PersonalRelationship> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RelationshipsPersonId.eq(null));
                person_RelationshipsQuery = queryBuilder.build();
            }
        }
        Query<PersonalRelationship> query = person_RelationshipsQuery.forCurrentThread();
        query.setParameter(0, relationshipsPersonId);
        return query.list();
    }

    /** Internal query to resolve the "people" to-many relationship of Family. */
    public List<PersonalRelationship> _queryFamily_People(long peopleFamilyId) {
        synchronized (this) {
            if (family_PeopleQuery == null) {
                QueryBuilder<PersonalRelationship> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PeopleFamilyId.eq(null));
                family_PeopleQuery = queryBuilder.build();
            }
        }
        Query<PersonalRelationship> query = family_PeopleQuery.forCurrentThread();
        query.setParameter(0, peopleFamilyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM PERSONAL_RELATIONSHIP T");
            builder.append(" LEFT JOIN PERSON T0 ON T.'FROM_PERSON_PERSON_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PERSON T1 ON T.'TO_PERSON_PERSON_ID'=T1.'_id'");
            builder.append(" LEFT JOIN SAVE_RESULT T2 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PersonalRelationship loadCurrentDeep(Cursor cursor, boolean lock) {
        PersonalRelationship entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Person fromPerson = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
         if(fromPerson != null) {
            entity.setFromPerson(fromPerson);
        }
        offset += daoSession.getPersonDao().getAllColumns().length;

        Person toPerson = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
         if(toPerson != null) {
            entity.setToPerson(toPerson);
        }
        offset += daoSession.getPersonDao().getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public PersonalRelationship loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PersonalRelationship> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PersonalRelationship> list = new ArrayList<PersonalRelationship>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PersonalRelationship> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PersonalRelationship> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
