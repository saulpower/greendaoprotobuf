package com.saulpower.GreenWireTest.database;

import java.util.List;
import com.saulpower.GreenWireTest.database.Gender;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table APPLICANT_CHILD.
 */
public class ApplicantChild extends SyncBase  {

    private String externalID;
    private String guid;
    private String name;
    private String birthDate;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private transient long childrenApplicationId;
    private String dateLastModified;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private transient long applicationApplicationId;
    private Gender gender;
    private Long id;
    private String dateCreated;
    private String notes;
    private String applicationID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ApplicantChildDao myDao;
    private Application application;
    private Long application__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public ApplicantChild() {
    }

    public ApplicantChild(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    ApplicantChild(String externalID, String guid, String name, String birthDate, String tagString, Long tenantID, long saveResultSaveResultId, long childrenApplicationId, String dateLastModified, Long syncBaseId, Boolean isDeleted, Integer version, long applicationApplicationId, Gender gender, Long id, String dateCreated, String notes, String applicationID) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.birthDate = birthDate;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.childrenApplicationId = childrenApplicationId;
        this.dateLastModified = dateLastModified;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.applicationApplicationId = applicationApplicationId;
        this.gender = gender;
        this.id = id;
        this.dateCreated = dateCreated;
        this.notes = notes;
        this.applicationID = applicationID;
    }

    public ApplicantChild(String externalID, String guid, String name, String birthDate, String tagString, Long tenantID, long saveResultSaveResultId, long childrenApplicationId, String dateLastModified, Boolean isDeleted, Integer version, long applicationApplicationId, Gender gender, Long id, String dateCreated, String notes, String applicationID) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.birthDate = birthDate;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.childrenApplicationId = childrenApplicationId;
        this.dateLastModified = dateLastModified;
        this.isDeleted = isDeleted;
        this.version = version;
        this.applicationApplicationId = applicationApplicationId;
        this.gender = gender;
        this.id = id;
        this.dateCreated = dateCreated;
        this.notes = notes;
        this.applicationID = applicationID;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getApplicantChildDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(String birthDate) {
        this.birthDate = birthDate;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public long getChildrenApplicationId() {
        return childrenApplicationId;
    }

    public void setChildrenApplicationId(long childrenApplicationId) {
        this.childrenApplicationId = childrenApplicationId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public long getApplicationApplicationId() {
        return applicationApplicationId;
    }

    public void setApplicationApplicationId(long applicationApplicationId) {
        this.applicationApplicationId = applicationApplicationId;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public String getApplicationID() {
        return applicationID;
    }

    public void setApplicationID(String applicationID) {
        this.applicationID = applicationID;
    }

    /** To-one relationship, resolved on first access. */
    public Application getApplication() {
        long __key = this.applicationApplicationId;
        if (application__resolvedKey == null || !application__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplicationDao targetDao = daoSession.getApplicationDao();
            Application applicationNew = targetDao.load(__key);
            synchronized (this) {
                application = applicationNew;
            	application__resolvedKey = __key;
            }
        }
        return application;
    }

    public void setApplication(Application application) {
        if (application == null) {
            throw new DaoException("To-one property 'applicationApplicationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.application = application;
            applicationApplicationId = application.getId();
            application__resolvedKey = applicationApplicationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryApplicantChild_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}