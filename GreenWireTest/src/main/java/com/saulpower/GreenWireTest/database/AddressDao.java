package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.Address;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADDRESS.
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "ADDRESS";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlusFour = new Property(0, String.class, "plusFour", false, "PLUS_FOUR");
        public final static Property State = new Property(1, String.class, "state", false, "STATE");
        public final static Property ExternalID = new Property(2, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Guid = new Property(3, String.class, "guid", false, "GUID");
        public final static Property DateLastModified = new Property(4, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property Latitude = new Property(5, Float.class, "latitude", false, "LATITUDE");
        public final static Property Address2 = new Property(6, String.class, "address2", false, "ADDRESS2");
        public final static Property County = new Property(7, String.class, "county", false, "COUNTY");
        public final static Property IsDeleted = new Property(8, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Address1 = new Property(9, String.class, "address1", false, "ADDRESS1");
        public final static Property TractID = new Property(10, String.class, "tractID", false, "TRACT_ID");
        public final static Property Version = new Property(11, Integer.class, "version", false, "VERSION");
        public final static Property Id = new Property(12, Long.class, "id", true, "_id");
        public final static Property DateCreated = new Property(13, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property PhoneNumbersOUId = new Property(14, long.class, "phoneNumbersOUId", false, "PHONE_NUMBERS_OUID");
        public final static Property AddressesStudentId = new Property(15, long.class, "addressesStudentId", false, "ADDRESSES_STUDENT_ID");
        public final static Property StateID = new Property(16, String.class, "stateID", false, "STATE_ID");
        public final static Property Name = new Property(17, String.class, "name", false, "NAME");
        public final static Property AddressesOUId = new Property(18, long.class, "addressesOUId", false, "ADDRESSES_OUID");
        public final static Property Description = new Property(19, String.class, "description", false, "DESCRIPTION");
        public final static Property TagString = new Property(20, String.class, "tagString", false, "TAG_STRING");
        public final static Property TenantID = new Property(21, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(22, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property CountyID = new Property(23, String.class, "countyID", false, "COUNTY_ID");
        public final static Property BlockGroupID = new Property(24, String.class, "blockGroupID", false, "BLOCK_GROUP_ID");
        public final static Property ZipCode = new Property(25, String.class, "zipCode", false, "ZIP_CODE");
        public final static Property BlockID = new Property(26, String.class, "blockID", false, "BLOCK_ID");
        public final static Property City = new Property(27, String.class, "city", false, "CITY");
        public final static Property Longitude = new Property(28, Float.class, "longitude", false, "LONGITUDE");
        public final static Property AddressesPersonId = new Property(29, long.class, "addressesPersonId", false, "ADDRESSES_PERSON_ID");
    };

    private DaoSession daoSession;

    private Query<Address> student_AddressesQuery;
    private Query<Address> oU_AddressesQuery;
    private Query<Address> oU_PhoneNumbersQuery;
    private Query<Address> person_AddressesQuery;

    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADDRESS' (" + //
                "'PLUS_FOUR' TEXT," + // 0: plusFour
                "'STATE' TEXT," + // 1: state
                "'EXTERNAL_ID' TEXT," + // 2: externalID
                "'GUID' TEXT," + // 3: guid
                "'DATE_LAST_MODIFIED' INTEGER," + // 4: dateLastModified
                "'LATITUDE' REAL," + // 5: latitude
                "'ADDRESS2' TEXT," + // 6: address2
                "'COUNTY' TEXT," + // 7: county
                "'IS_DELETED' INTEGER," + // 8: isDeleted
                "'ADDRESS1' TEXT," + // 9: address1
                "'TRACT_ID' TEXT," + // 10: tractID
                "'VERSION' INTEGER," + // 11: version
                "'_id' INTEGER PRIMARY KEY ," + // 12: id
                "'DATE_CREATED' INTEGER," + // 13: dateCreated
                "'PHONE_NUMBERS_OUID' INTEGER NOT NULL ," + // 14: phoneNumbersOUId
                "'ADDRESSES_STUDENT_ID' INTEGER NOT NULL ," + // 15: addressesStudentId
                "'STATE_ID' TEXT," + // 16: stateID
                "'NAME' TEXT," + // 17: name
                "'ADDRESSES_OUID' INTEGER NOT NULL ," + // 18: addressesOUId
                "'DESCRIPTION' TEXT," + // 19: description
                "'TAG_STRING' TEXT," + // 20: tagString
                "'TENANT_ID' INTEGER," + // 21: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 22: saveResultSaveResultId
                "'COUNTY_ID' TEXT," + // 23: countyID
                "'BLOCK_GROUP_ID' TEXT," + // 24: blockGroupID
                "'ZIP_CODE' TEXT," + // 25: zipCode
                "'BLOCK_ID' TEXT," + // 26: blockID
                "'CITY' TEXT," + // 27: city
                "'LONGITUDE' REAL," + // 28: longitude
                "'ADDRESSES_PERSON_ID' INTEGER NOT NULL );"); // 29: addressesPersonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADDRESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
 
        String plusFour = entity.getPlusFour();
        if (plusFour != null) {
            stmt.bindString(1, plusFour);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(2, state);
        }
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(3, externalID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(4, guid);
        }
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(5, dateLastModified);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(6, latitude);
        }
 
        String address2 = entity.getAddress2();
        if (address2 != null) {
            stmt.bindString(7, address2);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(8, county);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(9, isDeleted ? 1l: 0l);
        }
 
        String address1 = entity.getAddress1();
        if (address1 != null) {
            stmt.bindString(10, address1);
        }
 
        String tractID = entity.getTractID();
        if (tractID != null) {
            stmt.bindString(11, tractID);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(12, version);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(13, id);
        }
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(14, dateCreated);
        }
        stmt.bindLong(15, entity.getPhoneNumbersOUId());
        stmt.bindLong(16, entity.getAddressesStudentId());
 
        String stateID = entity.getStateID();
        if (stateID != null) {
            stmt.bindString(17, stateID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
        stmt.bindLong(19, entity.getAddressesOUId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(20, description);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(21, tagString);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(22, tenantID);
        }
        stmt.bindLong(23, entity.getSaveResultSaveResultId());
 
        String countyID = entity.getCountyID();
        if (countyID != null) {
            stmt.bindString(24, countyID);
        }
 
        String blockGroupID = entity.getBlockGroupID();
        if (blockGroupID != null) {
            stmt.bindString(25, blockGroupID);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(26, zipCode);
        }
 
        String blockID = entity.getBlockID();
        if (blockID != null) {
            stmt.bindString(27, blockID);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(28, city);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(29, longitude);
        }
        stmt.bindLong(30, entity.getAddressesPersonId());
    }

    @Override
    protected void attachEntity(Address entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12);
    }    

    /** @inheritdoc */
    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // plusFour
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // externalID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guid
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // dateLastModified
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // county
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isDeleted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tractID
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // version
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // id
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // dateCreated
            cursor.getLong(offset + 14), // phoneNumbersOUId
            cursor.getLong(offset + 15), // addressesStudentId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // stateID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // name
            cursor.getLong(offset + 18), // addressesOUId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // description
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tagString
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // tenantID
            cursor.getLong(offset + 22), // saveResultSaveResultId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // countyID
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // blockGroupID
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // zipCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // blockID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // city
            cursor.isNull(offset + 28) ? null : cursor.getFloat(offset + 28), // longitude
            cursor.getLong(offset + 29) // addressesPersonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setPlusFour(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExternalID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateLastModified(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAddress2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCounty(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setAddress1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTractID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDateCreated(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setPhoneNumbersOUId(cursor.getLong(offset + 14));
        entity.setAddressesStudentId(cursor.getLong(offset + 15));
        entity.setStateID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAddressesOUId(cursor.getLong(offset + 18));
        entity.setDescription(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTagString(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTenantID(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 22));
        entity.setCountyID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBlockGroupID(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setZipCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBlockID(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCity(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLongitude(cursor.isNull(offset + 28) ? null : cursor.getFloat(offset + 28));
        entity.setAddressesPersonId(cursor.getLong(offset + 29));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "addresses" to-many relationship of Student. */
    public List<Address> _queryStudent_Addresses(long addressesStudentId) {
        synchronized (this) {
            if (student_AddressesQuery == null) {
                QueryBuilder<Address> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AddressesStudentId.eq(null));
                student_AddressesQuery = queryBuilder.build();
            }
        }
        Query<Address> query = student_AddressesQuery.forCurrentThread();
        query.setParameter(0, addressesStudentId);
        return query.list();
    }

    /** Internal query to resolve the "addresses" to-many relationship of OU. */
    public List<Address> _queryOU_Addresses(long addressesOUId) {
        synchronized (this) {
            if (oU_AddressesQuery == null) {
                QueryBuilder<Address> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AddressesOUId.eq(null));
                oU_AddressesQuery = queryBuilder.build();
            }
        }
        Query<Address> query = oU_AddressesQuery.forCurrentThread();
        query.setParameter(0, addressesOUId);
        return query.list();
    }

    /** Internal query to resolve the "phoneNumbers" to-many relationship of OU. */
    public List<Address> _queryOU_PhoneNumbers(long phoneNumbersOUId) {
        synchronized (this) {
            if (oU_PhoneNumbersQuery == null) {
                QueryBuilder<Address> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhoneNumbersOUId.eq(null));
                oU_PhoneNumbersQuery = queryBuilder.build();
            }
        }
        Query<Address> query = oU_PhoneNumbersQuery.forCurrentThread();
        query.setParameter(0, phoneNumbersOUId);
        return query.list();
    }

    /** Internal query to resolve the "addresses" to-many relationship of Person. */
    public List<Address> _queryPerson_Addresses(long addressesPersonId) {
        synchronized (this) {
            if (person_AddressesQuery == null) {
                QueryBuilder<Address> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AddressesPersonId.eq(null));
                person_AddressesQuery = queryBuilder.build();
            }
        }
        Query<Address> query = person_AddressesQuery.forCurrentThread();
        query.setParameter(0, addressesPersonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM ADDRESS T");
            builder.append(" LEFT JOIN SAVE_RESULT T0 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Address loadCurrentDeep(Cursor cursor, boolean lock) {
        Address entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public Address loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Address> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Address> list = new ArrayList<Address>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Address> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Address> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
