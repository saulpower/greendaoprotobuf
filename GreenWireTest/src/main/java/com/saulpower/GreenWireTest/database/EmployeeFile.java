package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EMPLOYEE_FILE.
 */
public class EmployeeFile extends SyncBase  {

    private transient long employeeFilesOUId;
    private String guid;
    private String externalID;
    private String departmentID;
    private String dateLastModified;
    private transient long employeeFilesCenterId;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private String startDate;
    private Integer version;
    private Integer maxHoursPerWeek;
    private Long id;
    private transient long statusEmploymentStatusId;
    private String dateCreated;
    private String endDate;
    private Integer minHoursPerWeek;
    private String name;
    private Integer priority;
    private String tagString;
    private String roleID;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private transient long roleEmploymentRoleId;
    private EmploymentClass employmentClass;
    private String statusID;
    private transient long oUOUId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EmployeeFileDao myDao;
    private OU oU;
    private Long oU__resolvedKey;
    private EmploymentRole role;
    private Long role__resolvedKey;
    private EmploymentStatus status;
    private Long status__resolvedKey;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<Department> departments;
    private List<PayrollDefinition> payrollDefinitions;
    private List<CustomValue> customValues;

    public EmployeeFile() {
    }

    public EmployeeFile(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    EmployeeFile(long employeeFilesOUId, String guid, String externalID, String departmentID, String dateLastModified, long employeeFilesCenterId, Long syncBaseId, Boolean isDeleted, String startDate, Integer version, Integer maxHoursPerWeek, Long id, long statusEmploymentStatusId, String dateCreated, String endDate, Integer minHoursPerWeek, String name, Integer priority, String tagString, String roleID, Long tenantID, long saveResultSaveResultId, long roleEmploymentRoleId, EmploymentClass employmentClass, String statusID, long oUOUId) {
        this.employeeFilesOUId = employeeFilesOUId;
        this.guid = guid;
        this.externalID = externalID;
        this.departmentID = departmentID;
        this.dateLastModified = dateLastModified;
        this.employeeFilesCenterId = employeeFilesCenterId;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.startDate = startDate;
        this.version = version;
        this.maxHoursPerWeek = maxHoursPerWeek;
        this.id = id;
        this.statusEmploymentStatusId = statusEmploymentStatusId;
        this.dateCreated = dateCreated;
        this.endDate = endDate;
        this.minHoursPerWeek = minHoursPerWeek;
        this.name = name;
        this.priority = priority;
        this.tagString = tagString;
        this.roleID = roleID;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.roleEmploymentRoleId = roleEmploymentRoleId;
        this.employmentClass = employmentClass;
        this.statusID = statusID;
        this.oUOUId = oUOUId;
    }

    public EmployeeFile(long employeeFilesOUId, String guid, String externalID, String departmentID, String dateLastModified, long employeeFilesCenterId, Boolean isDeleted, String startDate, Integer version, Integer maxHoursPerWeek, Long id, long statusEmploymentStatusId, String dateCreated, String endDate, Integer minHoursPerWeek, String name, Integer priority, String tagString, String roleID, Long tenantID, long saveResultSaveResultId, long roleEmploymentRoleId, EmploymentClass employmentClass, String statusID, long oUOUId) {
        this.employeeFilesOUId = employeeFilesOUId;
        this.guid = guid;
        this.externalID = externalID;
        this.departmentID = departmentID;
        this.dateLastModified = dateLastModified;
        this.employeeFilesCenterId = employeeFilesCenterId;
        this.isDeleted = isDeleted;
        this.startDate = startDate;
        this.version = version;
        this.maxHoursPerWeek = maxHoursPerWeek;
        this.id = id;
        this.statusEmploymentStatusId = statusEmploymentStatusId;
        this.dateCreated = dateCreated;
        this.endDate = endDate;
        this.minHoursPerWeek = minHoursPerWeek;
        this.name = name;
        this.priority = priority;
        this.tagString = tagString;
        this.roleID = roleID;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.roleEmploymentRoleId = roleEmploymentRoleId;
        this.employmentClass = employmentClass;
        this.statusID = statusID;
        this.oUOUId = oUOUId;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEmployeeFileDao() : null;
    }

    public long getEmployeeFilesOUId() {
        return employeeFilesOUId;
    }

    public void setEmployeeFilesOUId(long employeeFilesOUId) {
        this.employeeFilesOUId = employeeFilesOUId;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getDepartmentID() {
        return departmentID;
    }

    public void setDepartmentID(String departmentID) {
        this.departmentID = departmentID;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getEmployeeFilesCenterId() {
        return employeeFilesCenterId;
    }

    public void setEmployeeFilesCenterId(long employeeFilesCenterId) {
        this.employeeFilesCenterId = employeeFilesCenterId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Integer getMaxHoursPerWeek() {
        return maxHoursPerWeek;
    }

    public void setMaxHoursPerWeek(Integer maxHoursPerWeek) {
        this.maxHoursPerWeek = maxHoursPerWeek;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getStatusEmploymentStatusId() {
        return statusEmploymentStatusId;
    }

    public void setStatusEmploymentStatusId(long statusEmploymentStatusId) {
        this.statusEmploymentStatusId = statusEmploymentStatusId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getEndDate() {
        return endDate;
    }

    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public Integer getMinHoursPerWeek() {
        return minHoursPerWeek;
    }

    public void setMinHoursPerWeek(Integer minHoursPerWeek) {
        this.minHoursPerWeek = minHoursPerWeek;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getPriority() {
        return priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public String getRoleID() {
        return roleID;
    }

    public void setRoleID(String roleID) {
        this.roleID = roleID;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public long getRoleEmploymentRoleId() {
        return roleEmploymentRoleId;
    }

    public void setRoleEmploymentRoleId(long roleEmploymentRoleId) {
        this.roleEmploymentRoleId = roleEmploymentRoleId;
    }

    public EmploymentClass getEmploymentClass() {
        return employmentClass;
    }

    public void setEmploymentClass(EmploymentClass employmentClass) {
        this.employmentClass = employmentClass;
    }

    public String getStatusID() {
        return statusID;
    }

    public void setStatusID(String statusID) {
        this.statusID = statusID;
    }

    public long getOUOUId() {
        return oUOUId;
    }

    public void setOUOUId(long oUOUId) {
        this.oUOUId = oUOUId;
    }

    public enum EmploymentClass implements DaoEnum {
        EMPLOYEE(0),
        INDEPENDENTCONTRACTOR(1);

        private static final Map<Long, EmploymentClass> intToTypeMap = new HashMap<Long, EmploymentClass>();

        static {
            for (EmploymentClass type : EmploymentClass.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static EmploymentClass fromInt(long i) {
            EmploymentClass type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private EmploymentClass(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OU getOU() {
        long __key = this.oUOUId;
        if (oU__resolvedKey == null || !oU__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OUDao targetDao = daoSession.getOUDao();
            OU oUNew = targetDao.load(__key);
            synchronized (this) {
                oU = oUNew;
            	oU__resolvedKey = __key;
            }
        }
        return oU;
    }

    public void setOU(OU oU) {
        if (oU == null) {
            throw new DaoException("To-one property 'oUOUId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.oU = oU;
            oUOUId = oU.getId();
            oU__resolvedKey = oUOUId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EmploymentRole getRole() {
        long __key = this.roleEmploymentRoleId;
        if (role__resolvedKey == null || !role__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmploymentRoleDao targetDao = daoSession.getEmploymentRoleDao();
            EmploymentRole roleNew = targetDao.load(__key);
            synchronized (this) {
                role = roleNew;
            	role__resolvedKey = __key;
            }
        }
        return role;
    }

    public void setRole(EmploymentRole role) {
        if (role == null) {
            throw new DaoException("To-one property 'roleEmploymentRoleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.role = role;
            roleEmploymentRoleId = role.getId();
            role__resolvedKey = roleEmploymentRoleId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EmploymentStatus getStatus() {
        long __key = this.statusEmploymentStatusId;
        if (status__resolvedKey == null || !status__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmploymentStatusDao targetDao = daoSession.getEmploymentStatusDao();
            EmploymentStatus statusNew = targetDao.load(__key);
            synchronized (this) {
                status = statusNew;
            	status__resolvedKey = __key;
            }
        }
        return status;
    }

    public void setStatus(EmploymentStatus status) {
        if (status == null) {
            throw new DaoException("To-one property 'statusEmploymentStatusId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.status = status;
            statusEmploymentStatusId = status.getId();
            status__resolvedKey = statusEmploymentStatusId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Department> getDepartments() {
        if (departments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DepartmentDao targetDao = daoSession.getDepartmentDao();
            List<Department> departmentsNew = targetDao._queryEmployeeFile_Departments(id);
            synchronized (this) {
                if(departments == null) {
                    departments = departmentsNew;
                }
            }
        }
        return departments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDepartments() {
        departments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PayrollDefinition> getPayrollDefinitions() {
        if (payrollDefinitions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PayrollDefinitionDao targetDao = daoSession.getPayrollDefinitionDao();
            List<PayrollDefinition> payrollDefinitionsNew = targetDao._queryEmployeeFile_PayrollDefinitions(id);
            synchronized (this) {
                if(payrollDefinitions == null) {
                    payrollDefinitions = payrollDefinitionsNew;
                }
            }
        }
        return payrollDefinitions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPayrollDefinitions() {
        payrollDefinitions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryEmployeeFile_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}