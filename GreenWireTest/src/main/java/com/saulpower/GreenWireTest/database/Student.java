package com.saulpower.GreenWireTest.database;

import java.util.List;
import com.saulpower.GreenWireTest.database.School.SchoolTransportation;
import com.saulpower.GreenWireTest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table STUDENT.
 */
public class Student {

    private String prefix;
    private String socialSecurityRaw;
    private Boolean attendsSchool;
    private Long dateLastModified;
    private transient long currentDeviceDeviceId;
    private transient long schoolSchoolId;
    private transient long blacklistedFromStudentId;
    private String middleName;
    private Boolean isDeleted;
    private transient long studentsActivityId;
    private Long startDate;
    private Integer version;
    private String emailAddresses;
    private String distinguishingMarks;
    private Long id;
    private Long dateCreated;
    private String socialSecurityEntrypted;
    private String name;
    private String suffix;
    private String employer;
    private String tagString;
    private Long tenantID;
    private Long schoolID;
    private String yearInSchool;
    private String languages;
    private String interestsString;
    private Boolean isEnabled;
    private String lastName;
    private String schoolPickupTime;
    private String socialSecurity;
    private String schoolDropOffTime;
    private String guid;
    private String externalID;
    private transient long studentsSchoolId;
    private transient long blacklistedFromPersonId;
    private String height;
    private String preferredName;
    private Long dateEnrolled;
    private String firstName;
    private String workHours;
    private String weight;
    private transient long withrawalCodeWithdrawalCodeId;
    private Long dateOfLastPhysical;
    private Long birthDate;
    private String emailAddressString;
    private transient long saveResultSaveResultId;
    private String hairColor;
    private Long dateWithdrawn;
    private SchoolTransportation schoolTransportation;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StudentDao myDao;

    private School school;
    private Long school__resolvedKey;

    private WithdrawalCode withrawalCode;
    private Long withrawalCode__resolvedKey;

    private Device currentDevice;
    private Long currentDevice__resolvedKey;

    private SaveResult saveResult;
    private Long saveResult__resolvedKey;

    private List<PickupAuthorization> pickupList;
    private List<Person> blackList;
    private List<CheckIn> checkIns;
    private List<CheckOut> checkOuts;
    private List<SecurityQuestion> securityQuestions;
    private List<MedicalProvider> medicalProviders;
    private List<Activity> activities;
    private List<ClassAssignment> classAssignments;
    private List<Attachment> attachments;
    private List<Address> addresses;
    private List<PersonalRelationship> relationships;
    private List<Note> notes;
    private List<PickupAuthorization> authorizedPickups;
    private List<Identification> identification;
    private List<Student> blacklistedFrom;
    private List<Allergy> allergies;
    private List<Immunization> immunizations;
    private List<JournalEntry> journalEntries;
    private List<Vehicle> vehicles;
    private List<Association> associations;
    private List<PhoneNumber> phoneNumbers;
    private List<CustomValue> customValues;

    public Student() {
    }

    public Student(Long id) {
        this.id = id;
    }

    public Student(String prefix, String socialSecurityRaw, Boolean attendsSchool, Long dateLastModified, long currentDeviceDeviceId, long schoolSchoolId, long blacklistedFromStudentId, String middleName, Boolean isDeleted, long studentsActivityId, Long startDate, Integer version, String emailAddresses, String distinguishingMarks, Long id, Long dateCreated, String socialSecurityEntrypted, String name, String suffix, String employer, String tagString, Long tenantID, Long schoolID, String yearInSchool, String languages, String interestsString, Boolean isEnabled, String lastName, String schoolPickupTime, String socialSecurity, String schoolDropOffTime, String guid, String externalID, long studentsSchoolId, long blacklistedFromPersonId, String height, String preferredName, Long dateEnrolled, String firstName, String workHours, String weight, long withrawalCodeWithdrawalCodeId, Long dateOfLastPhysical, Long birthDate, String emailAddressString, long saveResultSaveResultId, String hairColor, Long dateWithdrawn, SchoolTransportation schoolTransportation) {
        this.prefix = prefix;
        this.socialSecurityRaw = socialSecurityRaw;
        this.attendsSchool = attendsSchool;
        this.dateLastModified = dateLastModified;
        this.currentDeviceDeviceId = currentDeviceDeviceId;
        this.schoolSchoolId = schoolSchoolId;
        this.blacklistedFromStudentId = blacklistedFromStudentId;
        this.middleName = middleName;
        this.isDeleted = isDeleted;
        this.studentsActivityId = studentsActivityId;
        this.startDate = startDate;
        this.version = version;
        this.emailAddresses = emailAddresses;
        this.distinguishingMarks = distinguishingMarks;
        this.id = id;
        this.dateCreated = dateCreated;
        this.socialSecurityEntrypted = socialSecurityEntrypted;
        this.name = name;
        this.suffix = suffix;
        this.employer = employer;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.schoolID = schoolID;
        this.yearInSchool = yearInSchool;
        this.languages = languages;
        this.interestsString = interestsString;
        this.isEnabled = isEnabled;
        this.lastName = lastName;
        this.schoolPickupTime = schoolPickupTime;
        this.socialSecurity = socialSecurity;
        this.schoolDropOffTime = schoolDropOffTime;
        this.guid = guid;
        this.externalID = externalID;
        this.studentsSchoolId = studentsSchoolId;
        this.blacklistedFromPersonId = blacklistedFromPersonId;
        this.height = height;
        this.preferredName = preferredName;
        this.dateEnrolled = dateEnrolled;
        this.firstName = firstName;
        this.workHours = workHours;
        this.weight = weight;
        this.withrawalCodeWithdrawalCodeId = withrawalCodeWithdrawalCodeId;
        this.dateOfLastPhysical = dateOfLastPhysical;
        this.birthDate = birthDate;
        this.emailAddressString = emailAddressString;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.hairColor = hairColor;
        this.dateWithdrawn = dateWithdrawn;
        this.schoolTransportation = schoolTransportation;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public String getPrefix() {
        return prefix;
    }

    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }

    public String getSocialSecurityRaw() {
        return socialSecurityRaw;
    }

    public void setSocialSecurityRaw(String socialSecurityRaw) {
        this.socialSecurityRaw = socialSecurityRaw;
    }

    public Boolean getAttendsSchool() {
        return attendsSchool;
    }

    public void setAttendsSchool(Boolean attendsSchool) {
        this.attendsSchool = attendsSchool;
    }

    public Long getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(Long dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getCurrentDeviceDeviceId() {
        return currentDeviceDeviceId;
    }

    public void setCurrentDeviceDeviceId(long currentDeviceDeviceId) {
        this.currentDeviceDeviceId = currentDeviceDeviceId;
    }

    public long getSchoolSchoolId() {
        return schoolSchoolId;
    }

    public void setSchoolSchoolId(long schoolSchoolId) {
        this.schoolSchoolId = schoolSchoolId;
    }

    public long getBlacklistedFromStudentId() {
        return blacklistedFromStudentId;
    }

    public void setBlacklistedFromStudentId(long blacklistedFromStudentId) {
        this.blacklistedFromStudentId = blacklistedFromStudentId;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public long getStudentsActivityId() {
        return studentsActivityId;
    }

    public void setStudentsActivityId(long studentsActivityId) {
        this.studentsActivityId = studentsActivityId;
    }

    public Long getStartDate() {
        return startDate;
    }

    public void setStartDate(Long startDate) {
        this.startDate = startDate;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getEmailAddresses() {
        return emailAddresses;
    }

    public void setEmailAddresses(String emailAddresses) {
        this.emailAddresses = emailAddresses;
    }

    public String getDistinguishingMarks() {
        return distinguishingMarks;
    }

    public void setDistinguishingMarks(String distinguishingMarks) {
        this.distinguishingMarks = distinguishingMarks;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getSocialSecurityEntrypted() {
        return socialSecurityEntrypted;
    }

    public void setSocialSecurityEntrypted(String socialSecurityEntrypted) {
        this.socialSecurityEntrypted = socialSecurityEntrypted;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSuffix() {
        return suffix;
    }

    public void setSuffix(String suffix) {
        this.suffix = suffix;
    }

    public String getEmployer() {
        return employer;
    }

    public void setEmployer(String employer) {
        this.employer = employer;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public Long getSchoolID() {
        return schoolID;
    }

    public void setSchoolID(Long schoolID) {
        this.schoolID = schoolID;
    }

    public String getYearInSchool() {
        return yearInSchool;
    }

    public void setYearInSchool(String yearInSchool) {
        this.yearInSchool = yearInSchool;
    }

    public String getLanguages() {
        return languages;
    }

    public void setLanguages(String languages) {
        this.languages = languages;
    }

    public String getInterestsString() {
        return interestsString;
    }

    public void setInterestsString(String interestsString) {
        this.interestsString = interestsString;
    }

    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getSchoolPickupTime() {
        return schoolPickupTime;
    }

    public void setSchoolPickupTime(String schoolPickupTime) {
        this.schoolPickupTime = schoolPickupTime;
    }

    public String getSocialSecurity() {
        return socialSecurity;
    }

    public void setSocialSecurity(String socialSecurity) {
        this.socialSecurity = socialSecurity;
    }

    public String getSchoolDropOffTime() {
        return schoolDropOffTime;
    }

    public void setSchoolDropOffTime(String schoolDropOffTime) {
        this.schoolDropOffTime = schoolDropOffTime;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public long getStudentsSchoolId() {
        return studentsSchoolId;
    }

    public void setStudentsSchoolId(long studentsSchoolId) {
        this.studentsSchoolId = studentsSchoolId;
    }

    public long getBlacklistedFromPersonId() {
        return blacklistedFromPersonId;
    }

    public void setBlacklistedFromPersonId(long blacklistedFromPersonId) {
        this.blacklistedFromPersonId = blacklistedFromPersonId;
    }

    public String getHeight() {
        return height;
    }

    public void setHeight(String height) {
        this.height = height;
    }

    public String getPreferredName() {
        return preferredName;
    }

    public void setPreferredName(String preferredName) {
        this.preferredName = preferredName;
    }

    public Long getDateEnrolled() {
        return dateEnrolled;
    }

    public void setDateEnrolled(Long dateEnrolled) {
        this.dateEnrolled = dateEnrolled;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getWorkHours() {
        return workHours;
    }

    public void setWorkHours(String workHours) {
        this.workHours = workHours;
    }

    public String getWeight() {
        return weight;
    }

    public void setWeight(String weight) {
        this.weight = weight;
    }

    public long getWithrawalCodeWithdrawalCodeId() {
        return withrawalCodeWithdrawalCodeId;
    }

    public void setWithrawalCodeWithdrawalCodeId(long withrawalCodeWithdrawalCodeId) {
        this.withrawalCodeWithdrawalCodeId = withrawalCodeWithdrawalCodeId;
    }

    public Long getDateOfLastPhysical() {
        return dateOfLastPhysical;
    }

    public void setDateOfLastPhysical(Long dateOfLastPhysical) {
        this.dateOfLastPhysical = dateOfLastPhysical;
    }

    public Long getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Long birthDate) {
        this.birthDate = birthDate;
    }

    public String getEmailAddressString() {
        return emailAddressString;
    }

    public void setEmailAddressString(String emailAddressString) {
        this.emailAddressString = emailAddressString;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getHairColor() {
        return hairColor;
    }

    public void setHairColor(String hairColor) {
        this.hairColor = hairColor;
    }

    public Long getDateWithdrawn() {
        return dateWithdrawn;
    }

    public void setDateWithdrawn(Long dateWithdrawn) {
        this.dateWithdrawn = dateWithdrawn;
    }

    public SchoolTransportation getSchoolTransportation() {
        return schoolTransportation;
    }

    public void setSchoolTransportation(SchoolTransportation schoolTransportation) {
        this.schoolTransportation = schoolTransportation;
    }

    /** To-one relationship, resolved on first access. */
    public School getSchool() {
        long __key = this.schoolSchoolId;
        if (school__resolvedKey == null || !school__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SchoolDao targetDao = daoSession.getSchoolDao();
            School schoolNew = targetDao.load(__key);
            synchronized (this) {
                school = schoolNew;
            	school__resolvedKey = __key;
            }
        }
        return school;
    }

    public void setSchool(School school) {
        if (school == null) {
            throw new DaoException("To-one property 'schoolSchoolId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.school = school;
            schoolSchoolId = school.getId();
            school__resolvedKey = schoolSchoolId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public WithdrawalCode getWithrawalCode() {
        long __key = this.withrawalCodeWithdrawalCodeId;
        if (withrawalCode__resolvedKey == null || !withrawalCode__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WithdrawalCodeDao targetDao = daoSession.getWithdrawalCodeDao();
            WithdrawalCode withrawalCodeNew = targetDao.load(__key);
            synchronized (this) {
                withrawalCode = withrawalCodeNew;
            	withrawalCode__resolvedKey = __key;
            }
        }
        return withrawalCode;
    }

    public void setWithrawalCode(WithdrawalCode withrawalCode) {
        if (withrawalCode == null) {
            throw new DaoException("To-one property 'withrawalCodeWithdrawalCodeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.withrawalCode = withrawalCode;
            withrawalCodeWithdrawalCodeId = withrawalCode.getId();
            withrawalCode__resolvedKey = withrawalCodeWithdrawalCodeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Device getCurrentDevice() {
        long __key = this.currentDeviceDeviceId;
        if (currentDevice__resolvedKey == null || !currentDevice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeviceDao targetDao = daoSession.getDeviceDao();
            Device currentDeviceNew = targetDao.load(__key);
            synchronized (this) {
                currentDevice = currentDeviceNew;
            	currentDevice__resolvedKey = __key;
            }
        }
        return currentDevice;
    }

    public void setCurrentDevice(Device currentDevice) {
        if (currentDevice == null) {
            throw new DaoException("To-one property 'currentDeviceDeviceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.currentDevice = currentDevice;
            currentDeviceDeviceId = currentDevice.getId();
            currentDevice__resolvedKey = currentDeviceDeviceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PickupAuthorization> getPickupList() {
        if (pickupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PickupAuthorizationDao targetDao = daoSession.getPickupAuthorizationDao();
            List<PickupAuthorization> pickupListNew = targetDao._queryStudent_PickupList(id);
            synchronized (this) {
                if(pickupList == null) {
                    pickupList = pickupListNew;
                }
            }
        }
        return pickupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPickupList() {
        pickupList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Person> getBlackList() {
        if (blackList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            List<Person> blackListNew = targetDao._queryStudent_BlackList(id);
            synchronized (this) {
                if(blackList == null) {
                    blackList = blackListNew;
                }
            }
        }
        return blackList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBlackList() {
        blackList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CheckIn> getCheckIns() {
        if (checkIns == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CheckInDao targetDao = daoSession.getCheckInDao();
            List<CheckIn> checkInsNew = targetDao._queryStudent_CheckIns(id);
            synchronized (this) {
                if(checkIns == null) {
                    checkIns = checkInsNew;
                }
            }
        }
        return checkIns;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCheckIns() {
        checkIns = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CheckOut> getCheckOuts() {
        if (checkOuts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CheckOutDao targetDao = daoSession.getCheckOutDao();
            List<CheckOut> checkOutsNew = targetDao._queryStudent_CheckOuts(id);
            synchronized (this) {
                if(checkOuts == null) {
                    checkOuts = checkOutsNew;
                }
            }
        }
        return checkOuts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCheckOuts() {
        checkOuts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SecurityQuestion> getSecurityQuestions() {
        if (securityQuestions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SecurityQuestionDao targetDao = daoSession.getSecurityQuestionDao();
            List<SecurityQuestion> securityQuestionsNew = targetDao._queryStudent_SecurityQuestions(id);
            synchronized (this) {
                if(securityQuestions == null) {
                    securityQuestions = securityQuestionsNew;
                }
            }
        }
        return securityQuestions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSecurityQuestions() {
        securityQuestions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MedicalProvider> getMedicalProviders() {
        if (medicalProviders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MedicalProviderDao targetDao = daoSession.getMedicalProviderDao();
            List<MedicalProvider> medicalProvidersNew = targetDao._queryStudent_MedicalProviders(id);
            synchronized (this) {
                if(medicalProviders == null) {
                    medicalProviders = medicalProvidersNew;
                }
            }
        }
        return medicalProviders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMedicalProviders() {
        medicalProviders = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Activity> getActivities() {
        if (activities == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActivityDao targetDao = daoSession.getActivityDao();
            List<Activity> activitiesNew = targetDao._queryStudent_Activities(id);
            synchronized (this) {
                if(activities == null) {
                    activities = activitiesNew;
                }
            }
        }
        return activities;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActivities() {
        activities = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassAssignment> getClassAssignments() {
        if (classAssignments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassAssignmentDao targetDao = daoSession.getClassAssignmentDao();
            List<ClassAssignment> classAssignmentsNew = targetDao._queryStudent_ClassAssignments(id);
            synchronized (this) {
                if(classAssignments == null) {
                    classAssignments = classAssignmentsNew;
                }
            }
        }
        return classAssignments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClassAssignments() {
        classAssignments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Attachment> getAttachments() {
        if (attachments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttachmentDao targetDao = daoSession.getAttachmentDao();
            List<Attachment> attachmentsNew = targetDao._queryStudent_Attachments(id);
            synchronized (this) {
                if(attachments == null) {
                    attachments = attachmentsNew;
                }
            }
        }
        return attachments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAttachments() {
        attachments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Address> getAddresses() {
        if (addresses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            List<Address> addressesNew = targetDao._queryStudent_Addresses(id);
            synchronized (this) {
                if(addresses == null) {
                    addresses = addressesNew;
                }
            }
        }
        return addresses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAddresses() {
        addresses = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PersonalRelationship> getRelationships() {
        if (relationships == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonalRelationshipDao targetDao = daoSession.getPersonalRelationshipDao();
            List<PersonalRelationship> relationshipsNew = targetDao._queryStudent_Relationships(id);
            synchronized (this) {
                if(relationships == null) {
                    relationships = relationshipsNew;
                }
            }
        }
        return relationships;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRelationships() {
        relationships = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Note> getNotes() {
        if (notes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> notesNew = targetDao._queryStudent_Notes(id);
            synchronized (this) {
                if(notes == null) {
                    notes = notesNew;
                }
            }
        }
        return notes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNotes() {
        notes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PickupAuthorization> getAuthorizedPickups() {
        if (authorizedPickups == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PickupAuthorizationDao targetDao = daoSession.getPickupAuthorizationDao();
            List<PickupAuthorization> authorizedPickupsNew = targetDao._queryStudent_AuthorizedPickups(id);
            synchronized (this) {
                if(authorizedPickups == null) {
                    authorizedPickups = authorizedPickupsNew;
                }
            }
        }
        return authorizedPickups;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAuthorizedPickups() {
        authorizedPickups = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Identification> getIdentification() {
        if (identification == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            IdentificationDao targetDao = daoSession.getIdentificationDao();
            List<Identification> identificationNew = targetDao._queryStudent_Identification(id);
            synchronized (this) {
                if(identification == null) {
                    identification = identificationNew;
                }
            }
        }
        return identification;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetIdentification() {
        identification = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Student> getBlacklistedFrom() {
        if (blacklistedFrom == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentDao targetDao = daoSession.getStudentDao();
            List<Student> blacklistedFromNew = targetDao._queryStudent_BlacklistedFrom(id);
            synchronized (this) {
                if(blacklistedFrom == null) {
                    blacklistedFrom = blacklistedFromNew;
                }
            }
        }
        return blacklistedFrom;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBlacklistedFrom() {
        blacklistedFrom = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Allergy> getAllergies() {
        if (allergies == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AllergyDao targetDao = daoSession.getAllergyDao();
            List<Allergy> allergiesNew = targetDao._queryStudent_Allergies(id);
            synchronized (this) {
                if(allergies == null) {
                    allergies = allergiesNew;
                }
            }
        }
        return allergies;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAllergies() {
        allergies = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Immunization> getImmunizations() {
        if (immunizations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImmunizationDao targetDao = daoSession.getImmunizationDao();
            List<Immunization> immunizationsNew = targetDao._queryStudent_Immunizations(id);
            synchronized (this) {
                if(immunizations == null) {
                    immunizations = immunizationsNew;
                }
            }
        }
        return immunizations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImmunizations() {
        immunizations = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<JournalEntry> getJournalEntries() {
        if (journalEntries == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JournalEntryDao targetDao = daoSession.getJournalEntryDao();
            List<JournalEntry> journalEntriesNew = targetDao._queryStudent_JournalEntries(id);
            synchronized (this) {
                if(journalEntries == null) {
                    journalEntries = journalEntriesNew;
                }
            }
        }
        return journalEntries;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetJournalEntries() {
        journalEntries = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Vehicle> getVehicles() {
        if (vehicles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VehicleDao targetDao = daoSession.getVehicleDao();
            List<Vehicle> vehiclesNew = targetDao._queryStudent_Vehicles(id);
            synchronized (this) {
                if(vehicles == null) {
                    vehicles = vehiclesNew;
                }
            }
        }
        return vehicles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVehicles() {
        vehicles = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Association> getAssociations() {
        if (associations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssociationDao targetDao = daoSession.getAssociationDao();
            List<Association> associationsNew = targetDao._queryStudent_Associations(id);
            synchronized (this) {
                if(associations == null) {
                    associations = associationsNew;
                }
            }
        }
        return associations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssociations() {
        associations = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PhoneNumber> getPhoneNumbers() {
        if (phoneNumbers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneNumberDao targetDao = daoSession.getPhoneNumberDao();
            List<PhoneNumber> phoneNumbersNew = targetDao._queryStudent_PhoneNumbers(id);
            synchronized (this) {
                if(phoneNumbers == null) {
                    phoneNumbers = phoneNumbersNew;
                }
            }
        }
        return phoneNumbers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhoneNumbers() {
        phoneNumbers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryStudent_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
