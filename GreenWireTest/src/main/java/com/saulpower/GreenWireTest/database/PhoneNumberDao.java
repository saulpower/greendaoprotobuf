package com.saulpower.GreenWireTest.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.saulpower.GreenWireTest.database.PhoneNumber;
import com.saulpower.GreenWireTest.database.PhoneNumber.PhoneType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHONE_NUMBER.
*/
public class PhoneNumberDao extends AbstractDao<PhoneNumber, Long> {

    public static final String TABLENAME = "PHONE_NUMBER";

    /**
     * Properties of entity PhoneNumber.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PhoneNumbersStudentId = new Property(0, long.class, "phoneNumbersStudentId", false, "PHONE_NUMBERS_STUDENT_ID");
        public final static Property IsPrimary = new Property(1, Boolean.class, "isPrimary", false, "IS_PRIMARY");
        public final static Property PhoneNumbersPersonId = new Property(2, long.class, "phoneNumbersPersonId", false, "PHONE_NUMBERS_PERSON_ID");
        public final static Property ExternalID = new Property(3, String.class, "externalID", false, "EXTERNAL_ID");
        public final static Property Guid = new Property(4, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property TagString = new Property(6, String.class, "tagString", false, "TAG_STRING");
        public final static Property TenantID = new Property(7, Long.class, "tenantID", false, "TENANT_ID");
        public final static Property SaveResultSaveResultId = new Property(8, long.class, "saveResultSaveResultId", false, "SAVE_RESULT_SAVE_RESULT_ID");
        public final static Property DateLastModified = new Property(9, Long.class, "dateLastModified", false, "DATE_LAST_MODIFIED");
        public final static Property PhoneNumbersAuthorizedPersonId = new Property(10, long.class, "phoneNumbersAuthorizedPersonId", false, "PHONE_NUMBERS_AUTHORIZED_PERSON_ID");
        public final static Property Number = new Property(11, String.class, "number", false, "NUMBER");
        public final static Property PhoneType = new Property(12, PhoneType.class, "phoneType", false, "PHONE_TYPE");
        public final static Property IsDeleted = new Property(13, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Version = new Property(14, Integer.class, "version", false, "VERSION");
        public final static Property OwnerID = new Property(15, String.class, "ownerID", false, "OWNER_ID");
        public final static Property Id = new Property(16, Long.class, "id", true, "_id");
        public final static Property DateCreated = new Property(17, Long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property Extension = new Property(18, String.class, "extension", false, "EXTENSION");
        public final static Property AreaCode = new Property(19, String.class, "areaCode", false, "AREA_CODE");
    };

    private DaoSession daoSession;

    private Query<PhoneNumber> student_PhoneNumbersQuery;
    private Query<PhoneNumber> person_PhoneNumbersQuery;
    private Query<PhoneNumber> authorizedPerson_PhoneNumbersQuery;

    public PhoneNumberDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneNumberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHONE_NUMBER' (" + //
                "'PHONE_NUMBERS_STUDENT_ID' INTEGER NOT NULL ," + // 0: phoneNumbersStudentId
                "'IS_PRIMARY' INTEGER," + // 1: isPrimary
                "'PHONE_NUMBERS_PERSON_ID' INTEGER NOT NULL ," + // 2: phoneNumbersPersonId
                "'EXTERNAL_ID' TEXT," + // 3: externalID
                "'GUID' TEXT," + // 4: guid
                "'NAME' TEXT," + // 5: name
                "'TAG_STRING' TEXT," + // 6: tagString
                "'TENANT_ID' INTEGER," + // 7: tenantID
                "'SAVE_RESULT_SAVE_RESULT_ID' INTEGER NOT NULL ," + // 8: saveResultSaveResultId
                "'DATE_LAST_MODIFIED' INTEGER," + // 9: dateLastModified
                "'PHONE_NUMBERS_AUTHORIZED_PERSON_ID' INTEGER NOT NULL ," + // 10: phoneNumbersAuthorizedPersonId
                "'NUMBER' TEXT," + // 11: number
                "'PHONE_TYPE' INTEGER," + // 12: phoneType
                "'IS_DELETED' INTEGER," + // 13: isDeleted
                "'VERSION' INTEGER," + // 14: version
                "'OWNER_ID' TEXT," + // 15: ownerID
                "'_id' INTEGER PRIMARY KEY ," + // 16: id
                "'DATE_CREATED' INTEGER," + // 17: dateCreated
                "'EXTENSION' TEXT," + // 18: extension
                "'AREA_CODE' TEXT);"); // 19: areaCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHONE_NUMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneNumber entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhoneNumbersStudentId());
 
        Boolean isPrimary = entity.getIsPrimary();
        if (isPrimary != null) {
            stmt.bindLong(2, isPrimary ? 1l: 0l);
        }
        stmt.bindLong(3, entity.getPhoneNumbersPersonId());
 
        String externalID = entity.getExternalID();
        if (externalID != null) {
            stmt.bindString(4, externalID);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(5, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(7, tagString);
        }
 
        Long tenantID = entity.getTenantID();
        if (tenantID != null) {
            stmt.bindLong(8, tenantID);
        }
        stmt.bindLong(9, entity.getSaveResultSaveResultId());
 
        Long dateLastModified = entity.getDateLastModified();
        if (dateLastModified != null) {
            stmt.bindLong(10, dateLastModified);
        }
        stmt.bindLong(11, entity.getPhoneNumbersAuthorizedPersonId());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(12, number);
        }
 
        PhoneType phoneType = entity.getPhoneType();
        if (phoneType != null) {
            stmt.bindLong(13, phoneType.getValue());
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(14, isDeleted ? 1l: 0l);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(15, version);
        }
 
        String ownerID = entity.getOwnerID();
        if (ownerID != null) {
            stmt.bindString(16, ownerID);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(17, id);
        }
 
        Long dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(18, dateCreated);
        }
 
        String extension = entity.getExtension();
        if (extension != null) {
            stmt.bindString(19, extension);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(20, areaCode);
        }
    }

    @Override
    protected void attachEntity(PhoneNumber entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16);
    }    

    /** @inheritdoc */
    @Override
    public PhoneNumber readEntity(Cursor cursor, int offset) {
        PhoneNumber entity = new PhoneNumber( //
            cursor.getLong(offset + 0), // phoneNumbersStudentId
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isPrimary
            cursor.getLong(offset + 2), // phoneNumbersPersonId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // externalID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // guid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tagString
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // tenantID
            cursor.getLong(offset + 8), // saveResultSaveResultId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // dateLastModified
            cursor.getLong(offset + 10), // phoneNumbersAuthorizedPersonId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // number
            cursor.isNull(offset + 12) ? null : PhoneType.fromInt(cursor.getLong(offset + 12)), // phoneType
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isDeleted
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // version
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ownerID
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // id
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // dateCreated
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // extension
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // areaCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneNumber entity, int offset) {
        entity.setPhoneNumbersStudentId(cursor.getLong(offset + 0));
        entity.setIsPrimary(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setPhoneNumbersPersonId(cursor.getLong(offset + 2));
        entity.setExternalID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGuid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTagString(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTenantID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSaveResultSaveResultId(cursor.getLong(offset + 8));
        entity.setDateLastModified(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPhoneNumbersAuthorizedPersonId(cursor.getLong(offset + 10));
        entity.setNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhoneType(cursor.isNull(offset + 12) ? null : PhoneType.fromInt(cursor.getLong(offset + 12)));
        entity.setIsDeleted(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setVersion(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOwnerID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setDateCreated(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setExtension(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAreaCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneNumber entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneNumber entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phoneNumbers" to-many relationship of Student. */
    public List<PhoneNumber> _queryStudent_PhoneNumbers(long phoneNumbersStudentId) {
        synchronized (this) {
            if (student_PhoneNumbersQuery == null) {
                QueryBuilder<PhoneNumber> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhoneNumbersStudentId.eq(null));
                student_PhoneNumbersQuery = queryBuilder.build();
            }
        }
        Query<PhoneNumber> query = student_PhoneNumbersQuery.forCurrentThread();
        query.setParameter(0, phoneNumbersStudentId);
        return query.list();
    }

    /** Internal query to resolve the "phoneNumbers" to-many relationship of Person. */
    public List<PhoneNumber> _queryPerson_PhoneNumbers(long phoneNumbersPersonId) {
        synchronized (this) {
            if (person_PhoneNumbersQuery == null) {
                QueryBuilder<PhoneNumber> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhoneNumbersPersonId.eq(null));
                person_PhoneNumbersQuery = queryBuilder.build();
            }
        }
        Query<PhoneNumber> query = person_PhoneNumbersQuery.forCurrentThread();
        query.setParameter(0, phoneNumbersPersonId);
        return query.list();
    }

    /** Internal query to resolve the "phoneNumbers" to-many relationship of AuthorizedPerson. */
    public List<PhoneNumber> _queryAuthorizedPerson_PhoneNumbers(long phoneNumbersAuthorizedPersonId) {
        synchronized (this) {
            if (authorizedPerson_PhoneNumbersQuery == null) {
                QueryBuilder<PhoneNumber> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhoneNumbersAuthorizedPersonId.eq(null));
                authorizedPerson_PhoneNumbersQuery = queryBuilder.build();
            }
        }
        Query<PhoneNumber> query = authorizedPerson_PhoneNumbersQuery.forCurrentThread();
        query.setParameter(0, phoneNumbersAuthorizedPersonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSaveResultDao().getAllColumns());
            builder.append(" FROM PHONE_NUMBER T");
            builder.append(" LEFT JOIN SAVE_RESULT T0 ON T.'SAVE_RESULT_SAVE_RESULT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PhoneNumber loadCurrentDeep(Cursor cursor, boolean lock) {
        PhoneNumber entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        SaveResult saveResult = loadCurrentOther(daoSession.getSaveResultDao(), cursor, offset);
         if(saveResult != null) {
            entity.setSaveResult(saveResult);
        }

        return entity;    
    }

    public PhoneNumber loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PhoneNumber> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PhoneNumber> list = new ArrayList<PhoneNumber>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PhoneNumber> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PhoneNumber> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
