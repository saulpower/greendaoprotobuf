package com.saulpower.GreenWireTest.database;

import java.util.List;
import com.saulpower.GreenWireTest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CLASZ.
 */
public class Clasz {

    private String externalID;
    private Boolean isDeleted;
    private String name;
    private String guid;
    private Integer version;
    private String tagString;
    private Long id;
    private Long dateCreated;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private Integer studentsPerTeacher;
    private Long dateLastModified;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClaszDao myDao;

    private SaveResult saveResult;
    private Long saveResult__resolvedKey;

    private List<ClassAssignment> classAssignments;
    private List<ClassAssignment> employees;
    private List<CustomValue> customValues;

    public Clasz() {
    }

    public Clasz(Long id) {
        this.id = id;
    }

    public Clasz(String externalID, Boolean isDeleted, String name, String guid, Integer version, String tagString, Long id, Long dateCreated, Long tenantID, long saveResultSaveResultId, Integer studentsPerTeacher, Long dateLastModified) {
        this.externalID = externalID;
        this.isDeleted = isDeleted;
        this.name = name;
        this.guid = guid;
        this.version = version;
        this.tagString = tagString;
        this.id = id;
        this.dateCreated = dateCreated;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.studentsPerTeacher = studentsPerTeacher;
        this.dateLastModified = dateLastModified;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClaszDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(Long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public Integer getStudentsPerTeacher() {
        return studentsPerTeacher;
    }

    public void setStudentsPerTeacher(Integer studentsPerTeacher) {
        this.studentsPerTeacher = studentsPerTeacher;
    }

    public Long getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(Long dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassAssignment> getClassAssignments() {
        if (classAssignments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassAssignmentDao targetDao = daoSession.getClassAssignmentDao();
            List<ClassAssignment> classAssignmentsNew = targetDao._queryClasz_ClassAssignments(id);
            synchronized (this) {
                if(classAssignments == null) {
                    classAssignments = classAssignmentsNew;
                }
            }
        }
        return classAssignments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClassAssignments() {
        classAssignments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassAssignment> getEmployees() {
        if (employees == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassAssignmentDao targetDao = daoSession.getClassAssignmentDao();
            List<ClassAssignment> employeesNew = targetDao._queryClasz_Employees(id);
            synchronized (this) {
                if(employees == null) {
                    employees = employeesNew;
                }
            }
        }
        return employees;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmployees() {
        employees = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryClasz_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
