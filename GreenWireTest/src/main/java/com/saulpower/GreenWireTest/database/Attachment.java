package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ATTACHMENT.
 */
public class Attachment extends SyncBase  {

    private String externalID;
    private String guid;
    private String name;
    private transient long attachmentsJournalEntryId;
    private Integer sortOrder;
    private String tagString;
    private transient long attachmentsLedgerItemId;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private transient long attachmentsGuardianId;
    private String dateLastModified;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private transient long attachmentsStudentId;
    private transient long attachmentsIdentificationId;
    private Long id;
    private String mimeType;
    private String dateCreated;
    private transient long attachmentsPersonId;
    private String notes;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AttachmentDao myDao;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public Attachment() {
    }

    public Attachment(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Attachment(String externalID, String guid, String name, long attachmentsJournalEntryId, Integer sortOrder, String tagString, long attachmentsLedgerItemId, Long tenantID, long saveResultSaveResultId, long attachmentsGuardianId, String dateLastModified, Long syncBaseId, Boolean isDeleted, Integer version, long attachmentsStudentId, long attachmentsIdentificationId, Long id, String mimeType, String dateCreated, long attachmentsPersonId, String notes) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.attachmentsJournalEntryId = attachmentsJournalEntryId;
        this.sortOrder = sortOrder;
        this.tagString = tagString;
        this.attachmentsLedgerItemId = attachmentsLedgerItemId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.attachmentsGuardianId = attachmentsGuardianId;
        this.dateLastModified = dateLastModified;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.attachmentsStudentId = attachmentsStudentId;
        this.attachmentsIdentificationId = attachmentsIdentificationId;
        this.id = id;
        this.mimeType = mimeType;
        this.dateCreated = dateCreated;
        this.attachmentsPersonId = attachmentsPersonId;
        this.notes = notes;
    }

    public Attachment(String externalID, String guid, String name, long attachmentsJournalEntryId, Integer sortOrder, String tagString, long attachmentsLedgerItemId, Long tenantID, long saveResultSaveResultId, long attachmentsGuardianId, String dateLastModified, Boolean isDeleted, Integer version, long attachmentsStudentId, long attachmentsIdentificationId, Long id, String mimeType, String dateCreated, long attachmentsPersonId, String notes) {
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.attachmentsJournalEntryId = attachmentsJournalEntryId;
        this.sortOrder = sortOrder;
        this.tagString = tagString;
        this.attachmentsLedgerItemId = attachmentsLedgerItemId;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.attachmentsGuardianId = attachmentsGuardianId;
        this.dateLastModified = dateLastModified;
        this.isDeleted = isDeleted;
        this.version = version;
        this.attachmentsStudentId = attachmentsStudentId;
        this.attachmentsIdentificationId = attachmentsIdentificationId;
        this.id = id;
        this.mimeType = mimeType;
        this.dateCreated = dateCreated;
        this.attachmentsPersonId = attachmentsPersonId;
        this.notes = notes;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttachmentDao() : null;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getAttachmentsJournalEntryId() {
        return attachmentsJournalEntryId;
    }

    public void setAttachmentsJournalEntryId(long attachmentsJournalEntryId) {
        this.attachmentsJournalEntryId = attachmentsJournalEntryId;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public long getAttachmentsLedgerItemId() {
        return attachmentsLedgerItemId;
    }

    public void setAttachmentsLedgerItemId(long attachmentsLedgerItemId) {
        this.attachmentsLedgerItemId = attachmentsLedgerItemId;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public long getAttachmentsGuardianId() {
        return attachmentsGuardianId;
    }

    public void setAttachmentsGuardianId(long attachmentsGuardianId) {
        this.attachmentsGuardianId = attachmentsGuardianId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public long getAttachmentsStudentId() {
        return attachmentsStudentId;
    }

    public void setAttachmentsStudentId(long attachmentsStudentId) {
        this.attachmentsStudentId = attachmentsStudentId;
    }

    public long getAttachmentsIdentificationId() {
        return attachmentsIdentificationId;
    }

    public void setAttachmentsIdentificationId(long attachmentsIdentificationId) {
        this.attachmentsIdentificationId = attachmentsIdentificationId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMimeType() {
        return mimeType;
    }

    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public long getAttachmentsPersonId() {
        return attachmentsPersonId;
    }

    public void setAttachmentsPersonId(long attachmentsPersonId) {
        this.attachmentsPersonId = attachmentsPersonId;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryAttachment_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}