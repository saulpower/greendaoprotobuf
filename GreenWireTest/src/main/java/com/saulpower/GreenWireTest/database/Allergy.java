package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoEnum;
import java.util.Map;
import java.util.HashMap;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ALLERGY.
 */
public class Allergy extends SyncBase  {

    private String definitionID;
    private String externalID;
    private String guid;
    private String name;
    private transient long allergiesPersonId;
    private AllergySeverity severity;
    private String tagString;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private transient long allergiesGuardianId;
    private transient Long syncBaseId;
    private Boolean isDeleted;
    private Integer version;
    private Long id;
    private transient long allergiesStudentId;
    private String dateCreated;
    private String treatment;
    private String notes;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AllergyDao myDao;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public Allergy() {
    }

    public Allergy(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Allergy(String definitionID, String externalID, String guid, String name, long allergiesPersonId, AllergySeverity severity, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, long allergiesGuardianId, Long syncBaseId, Boolean isDeleted, Integer version, Long id, long allergiesStudentId, String dateCreated, String treatment, String notes) {
        this.definitionID = definitionID;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.allergiesPersonId = allergiesPersonId;
        this.severity = severity;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.allergiesGuardianId = allergiesGuardianId;
        this.syncBaseId = syncBaseId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.allergiesStudentId = allergiesStudentId;
        this.dateCreated = dateCreated;
        this.treatment = treatment;
        this.notes = notes;
    }

    public Allergy(String definitionID, String externalID, String guid, String name, long allergiesPersonId, AllergySeverity severity, String tagString, Long tenantID, long saveResultSaveResultId, String dateLastModified, long allergiesGuardianId, Boolean isDeleted, Integer version, Long id, long allergiesStudentId, String dateCreated, String treatment, String notes) {
        this.definitionID = definitionID;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.allergiesPersonId = allergiesPersonId;
        this.severity = severity;
        this.tagString = tagString;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.allergiesGuardianId = allergiesGuardianId;
        this.isDeleted = isDeleted;
        this.version = version;
        this.id = id;
        this.allergiesStudentId = allergiesStudentId;
        this.dateCreated = dateCreated;
        this.treatment = treatment;
        this.notes = notes;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAllergyDao() : null;
    }

    public String getDefinitionID() {
        return definitionID;
    }

    public void setDefinitionID(String definitionID) {
        this.definitionID = definitionID;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getAllergiesPersonId() {
        return allergiesPersonId;
    }

    public void setAllergiesPersonId(long allergiesPersonId) {
        this.allergiesPersonId = allergiesPersonId;
    }

    public AllergySeverity getSeverity() {
        return severity;
    }

    public void setSeverity(AllergySeverity severity) {
        this.severity = severity;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public long getAllergiesGuardianId() {
        return allergiesGuardianId;
    }

    public void setAllergiesGuardianId(long allergiesGuardianId) {
        this.allergiesGuardianId = allergiesGuardianId;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getAllergiesStudentId() {
        return allergiesStudentId;
    }

    public void setAllergiesStudentId(long allergiesStudentId) {
        this.allergiesStudentId = allergiesStudentId;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getTreatment() {
        return treatment;
    }

    public void setTreatment(String treatment) {
        this.treatment = treatment;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public enum AllergySeverity implements DaoEnum {
        MILD(0),
        MODERATE(1),
        SEVERE(2),
        FATAL(3);

        private static final Map<Long, AllergySeverity> intToTypeMap = new HashMap<Long, AllergySeverity>();

        static {
            for (AllergySeverity type : AllergySeverity.values()) {
                intToTypeMap.put(type.value, type);
            }
        }

        public static AllergySeverity fromInt(long i) {
            AllergySeverity type = intToTypeMap.get(Long.valueOf(i));
            return type;
        }

        private final long value;

        private AllergySeverity(long value) {
            this.value = value;
        }

        @Override
        public long getValue() {
            return value;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryAllergy_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}