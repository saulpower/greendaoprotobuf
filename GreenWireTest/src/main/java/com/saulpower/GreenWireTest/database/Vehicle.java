package com.saulpower.GreenWireTest.database;

import java.util.List;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VEHICLE.
 */
public class Vehicle extends SyncBase  {

    private transient long vehiclesFamilyId;
    private String externalID;
    private String guid;
    private String name;
    private transient long vehiclesGuardianId;
    private String tagString;
    private Integer year;
    private Long tenantID;
    private transient long saveResultSaveResultId;
    private String dateLastModified;
    private String license;
    private String make;
    private transient Long syncBaseId;
    private transient long vehiclesStudentId;
    private Boolean isDeleted;
    private String model;
    private Integer version;
    private Long id;
    private String dateCreated;
    private String color;
    private transient long vehiclesPersonId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VehicleDao myDao;
    private SaveResult saveResult;
    private Long saveResult__resolvedKey;
    private List<CustomValue> customValues;

    public Vehicle() {
    }

    public Vehicle(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Vehicle(long vehiclesFamilyId, String externalID, String guid, String name, long vehiclesGuardianId, String tagString, Integer year, Long tenantID, long saveResultSaveResultId, String dateLastModified, String license, String make, Long syncBaseId, long vehiclesStudentId, Boolean isDeleted, String model, Integer version, Long id, String dateCreated, String color, long vehiclesPersonId) {
        this.vehiclesFamilyId = vehiclesFamilyId;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.vehiclesGuardianId = vehiclesGuardianId;
        this.tagString = tagString;
        this.year = year;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.license = license;
        this.make = make;
        this.syncBaseId = syncBaseId;
        this.vehiclesStudentId = vehiclesStudentId;
        this.isDeleted = isDeleted;
        this.model = model;
        this.version = version;
        this.id = id;
        this.dateCreated = dateCreated;
        this.color = color;
        this.vehiclesPersonId = vehiclesPersonId;
    }

    public Vehicle(long vehiclesFamilyId, String externalID, String guid, String name, long vehiclesGuardianId, String tagString, Integer year, Long tenantID, long saveResultSaveResultId, String dateLastModified, String license, String make, long vehiclesStudentId, Boolean isDeleted, String model, Integer version, Long id, String dateCreated, String color, long vehiclesPersonId) {
        this.vehiclesFamilyId = vehiclesFamilyId;
        this.externalID = externalID;
        this.guid = guid;
        this.name = name;
        this.vehiclesGuardianId = vehiclesGuardianId;
        this.tagString = tagString;
        this.year = year;
        this.tenantID = tenantID;
        this.saveResultSaveResultId = saveResultSaveResultId;
        this.dateLastModified = dateLastModified;
        this.license = license;
        this.make = make;
        this.vehiclesStudentId = vehiclesStudentId;
        this.isDeleted = isDeleted;
        this.model = model;
        this.version = version;
        this.id = id;
        this.dateCreated = dateCreated;
        this.color = color;
        this.vehiclesPersonId = vehiclesPersonId;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVehicleDao() : null;
    }

    public long getVehiclesFamilyId() {
        return vehiclesFamilyId;
    }

    public void setVehiclesFamilyId(long vehiclesFamilyId) {
        this.vehiclesFamilyId = vehiclesFamilyId;
    }

    public String getExternalID() {
        return externalID;
    }

    public void setExternalID(String externalID) {
        this.externalID = externalID;
    }

    public String getGuid() {
        return guid;
    }

    public void setGuid(String guid) {
        this.guid = guid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getVehiclesGuardianId() {
        return vehiclesGuardianId;
    }

    public void setVehiclesGuardianId(long vehiclesGuardianId) {
        this.vehiclesGuardianId = vehiclesGuardianId;
    }

    public String getTagString() {
        return tagString;
    }

    public void setTagString(String tagString) {
        this.tagString = tagString;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    public Long getTenantID() {
        return tenantID;
    }

    public void setTenantID(Long tenantID) {
        this.tenantID = tenantID;
    }

    public long getSaveResultSaveResultId() {
        return saveResultSaveResultId;
    }

    public void setSaveResultSaveResultId(long saveResultSaveResultId) {
        this.saveResultSaveResultId = saveResultSaveResultId;
    }

    public String getDateLastModified() {
        return dateLastModified;
    }

    public void setDateLastModified(String dateLastModified) {
        this.dateLastModified = dateLastModified;
    }

    public String getLicense() {
        return license;
    }

    public void setLicense(String license) {
        this.license = license;
    }

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    public long getVehiclesStudentId() {
        return vehiclesStudentId;
    }

    public void setVehiclesStudentId(long vehiclesStudentId) {
        this.vehiclesStudentId = vehiclesStudentId;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public long getVehiclesPersonId() {
        return vehiclesPersonId;
    }

    public void setVehiclesPersonId(long vehiclesPersonId) {
        this.vehiclesPersonId = vehiclesPersonId;
    }

    /** To-one relationship, resolved on first access. */
    public SaveResult getSaveResult() {
        long __key = this.saveResultSaveResultId;
        if (saveResult__resolvedKey == null || !saveResult__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaveResultDao targetDao = daoSession.getSaveResultDao();
            SaveResult saveResultNew = targetDao.load(__key);
            synchronized (this) {
                saveResult = saveResultNew;
            	saveResult__resolvedKey = __key;
            }
        }
        return saveResult;
    }

    public void setSaveResult(SaveResult saveResult) {
        if (saveResult == null) {
            throw new DaoException("To-one property 'saveResultSaveResultId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saveResult = saveResult;
            saveResultSaveResultId = saveResult.getId();
            saveResult__resolvedKey = saveResultSaveResultId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CustomValue> getCustomValues() {
        if (customValues == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomValueDao targetDao = daoSession.getCustomValueDao();
            List<CustomValue> customValuesNew = targetDao._queryVehicle_CustomValues(id);
            synchronized (this) {
                if(customValues == null) {
                    customValues = customValuesNew;
                }
            }
        }
        return customValues;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCustomValues() {
        customValues = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}