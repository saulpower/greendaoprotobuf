package de.greenrobot.daoexample.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BASE_OBJECT.
*/
public class BaseObjectDao extends AbstractDao<BaseObject, Long> {

    public static final String TABLENAME = "BASE_OBJECT";

    /**
     * Properties of entity BaseObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UpdatedOn = new Property(0, java.util.Date.class, "updatedOn", false, "UPDATED_ON");
        public final static Property CreatedOn = new Property(1, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property DerivedEntityType = new Property(2, String.class, "derivedEntityType", false, "DERIVED_ENTITY_TYPE");
        public final static Property BaseId = new Property(3, Long.class, "baseId", true, "BASE_ID");
    };

    private DaoSession daoSession;


    public BaseObjectDao(DaoConfig config) {
        super(config);
    }
    
    public BaseObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASE_OBJECT' (" + //
                "'UPDATED_ON' INTEGER," + // 0: updatedOn
                "'CREATED_ON' INTEGER," + // 1: createdOn
                "'DERIVED_ENTITY_TYPE' TEXT NOT NULL ," + // 2: derivedEntityType
                "'BASE_ID' INTEGER PRIMARY KEY );"); // 3: baseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BaseObject entity) {
        stmt.clearBindings();
 
        java.util.Date updatedOn = entity.getUpdatedOn();
        if (updatedOn != null) {
            stmt.bindLong(1, updatedOn.getTime());
        }
 
        java.util.Date createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindLong(2, createdOn.getTime());
        }
        stmt.bindString(3, entity.getDerivedEntityType());
 
        Long baseId = entity.getBaseId();
        if (baseId != null) {
            stmt.bindLong(4, baseId);
        }
    }

    @Override
    protected void attachEntity(BaseObject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public BaseObject readEntity(Cursor cursor, int offset) {
        BaseObject entity = new BaseObject( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // updatedOn
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdOn
            cursor.getString(offset + 2), // derivedEntityType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // baseId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BaseObject entity, int offset) {
        entity.setUpdatedOn(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setCreatedOn(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDerivedEntityType(cursor.getString(offset + 2));
        entity.setBaseId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BaseObject entity, long rowId) {
        entity.setBaseId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BaseObject entity) {
        if(entity != null) {
            return entity.getBaseId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    

}
