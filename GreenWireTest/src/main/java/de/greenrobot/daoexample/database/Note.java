package de.greenrobot.daoexample.database;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table NOTE.
 */
public class Note extends BaseObject {

    /** Not-null value. */
    private String text;
    private String comment;
    private transient Long id;
    private NoteType type;
    private transient Long baseObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;


    public Note() {
    }

    public Note(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getSimpleName());
    }

    Note(String text, String comment, Long id, NoteType type, Long baseObjectId) {
        this.text = text;
        this.comment = comment;
        this.id = id;
        this.type = type;
        this.baseObjectId = baseObjectId;
    }

    public Note(String text, String comment, Long id, NoteType type) {
        this.text = text;
        this.comment = comment;
        this.id = id;
        this.type = type;
        setDerivedEntityType(getClass().getSimpleName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }


    /** Not-null value. */
    public String getText() {
        return text;
    }
    /** Not-null value; ensure this value is available before it is saved to the database. */

    public void setText(String text) {
        this.text = text;
    }


    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }


    public NoteType getType() {
        return type;
    }

    public void setType(NoteType type) {
        this.type = type;
    }


    Long getBaseObjectId() {
        return baseObjectId;
    }

    void setBaseObjectId(Long baseObjectId) {
        this.baseObjectId = baseObjectId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
