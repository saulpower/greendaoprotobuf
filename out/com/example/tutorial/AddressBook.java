package com.example.tutorial;

import java.util.List;
import com.example.tutorial.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ADDRESS_BOOK.
 */
public class AddressBook {

    private Long id;
    private Long personId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AddressBookDao myDao;

    private Person addressBook;
    private Long addressBook__resolvedKey;

    private List<Person> people;

    public AddressBook() {
    }

    public AddressBook(Long id) {
        this.id = id;
    }

    public AddressBook(Long id, Long personId) {
        this.id = id;
        this.personId = personId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAddressBookDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPersonId() {
        return personId;
    }

    public void setPersonId(Long personId) {
        this.personId = personId;
    }

    /** To-one relationship, resolved on first access. */
    public Person getAddressBook() {
        Long __key = this.personId;
        if (addressBook__resolvedKey == null || !addressBook__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person addressBookNew = targetDao.load(__key);
            synchronized (this) {
                addressBook = addressBookNew;
            	addressBook__resolvedKey = __key;
            }
        }
        return addressBook;
    }

    public void setAddressBook(Person addressBook) {
        synchronized (this) {
            this.addressBook = addressBook;
            personId = addressBook == null ? null : addressBook.getId();
            addressBook__resolvedKey = personId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Person> getPeople() {
        if (people == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            List<Person> peopleNew = targetDao._queryAddressBook_People(id);
            synchronized (this) {
                if(people == null) {
                    people = peopleNew;
                }
            }
        }
        return people;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPeople() {
        people = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
